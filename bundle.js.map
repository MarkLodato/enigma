{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/dom.ts","webpack:///./lib/helpers.ts","webpack:///./lib/logic.ts","webpack:///./lib/main.ts","webpack:///./lib/graphics.ts","webpack:///./node_modules/svg.js/dist/svg.js","webpack:///./lib/drag.ts","webpack:///./lib/svg.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getElementByIdOrThrow","id","element","document","getElementById","Error","getSVGGraphicsElementByIdOrThrow","setClassKeyValue","regexp","RegExp","klass","getAttribute","replace","v","setAttribute","clearClassKey","mod","a","result","circularDistance","difference","divisor","Dictionary","[object Object]","message","this","_map","_message","default_value","has","undefined","UnreachableCaseError","val","super","helpers","M3_DEF","alphabet","rotors","I","permutation","notch","II","III","IV","V","VI","VII","VIII","reflectors","A","B","C","defaults","rotor_order","reflector","Alphabet","string","toUpperCase","length","_to_index","letter","set","toLowerCase","character","index","indices","out","idx","b","indexOf","callback","len","charAt","Permutation","permutation_string","last_forward","input","output","last_inverse","setTo","_forward_table","_inverse_table","forward_table","inverse_table","plain","fromIndex","cipher","Rotor","notch_string","_notches","Set","map","_alphabet","_indicator","_ring_setting","indicator","ring_setting","offset","add","forward","inverse","Plugboard","pair_string","_toPermutationString","e","split","pairs","pair","j","tmp","join","Enigma","spec","_onUpdateCallbacks","Array","_spec","_plugboard","setRotorOrder","setReflector","_ring_locked","push","field","fromIndices","_rotors","error","_validateRotorField","_callRotorUpdate","allValid","valid","forEach","onIndicatorChange","getIndicator","onRingSettingChange","getRingSetting","_getRotorField","_setRotorField","_setRotorFieldAtIndex","_rotor_order","validate_only","new_rotors","rotor_name","rotor_spec","old_rotors","onRotorOrderChange","onRotorChange","_reflector_name","_permutation","_reflector","onReflectorChange","onPlugboardChange","validate","onRingLocked","plugboard","stepAndEncryptSingle","step","encryptSingleNoStep","x","onEncrypt","getLastValues","suppress_on_update","isOnNotch","state","getRotorOrder","getPlugboard","setIfValid","query_param","console","warn","setRingSetting","setIndicator","setPlugboard","setBooleanIfValid","setRingLocked","dom_1","graphics_1","logic_1","getInputElementByIdOrThrow","HtmlInterface","enigma","_enigma","SetupInputHandler","validateRotorOrder","validateRingSetting","validateIndicator","validatePlugboard","SetupCheckbox","registerOnUpdateCallback","oninput","event","classList","remove","onchange","checked","setting","order","graphics","EnigmaGraphics","addEventListeners","onHashChange","URLSearchParams","window","location","hash","substring","loadState","addEventListener","SetupOnHashChange","main","SVG","drag_1","helpers_1","logic","svg_1","KEYBOARD_X","KEYBOARD_Y","DISPLAY_Y","KEY_RADIUS","KEY_ROW_SPACING","KEY_COL_SPACING","ROTOR_CX","ROTOR_CY","REFLECTOR_RADIUS","REFLECTOR_RING_WIDTH","ROTOR_WIDTH","RING_WIDTH","WINDOW_THICKNESS","A_DOT_RADIUS","PLUGBOARD_TOP","PLUGBOARD_HEIGHT","PLUGBOARD_LETTER_HEIGHT","PLUGBOARD_HANDLE_WIDTH","PLUGBOARD_HANDLE_HEIGHT","PLUGBOARD_MAX_DRAG_Y_OFFSET","ETW_HEIGHT","ETW_X_OFFSET","WIRE_TOP","ROTOR_IN_LENGTH","kAlphabet","kKeyboardOrder","keyX","column","keyY","drawEverything","svg","draw","size","viewbox","keyboardEnclosure","group","translate","display","drawKeyboardLike","keyboard","container","height","width","topBox","bottomBox","wires","each","attr","y","wireGroup","addClass","path","plot","SvgPathBuilder","M","L","build","rect","h","z","drawPlugboard","rotorEnclosure","drawRotor","outer_radius","reflector_name","keys","def","perm","drawReflectorWires","drawRingLetters","drawReflector","reflectorRadius","rotorWidth","center","cx","cy","ring_width","inner_radius","circle","radius","drawRotorFrame","idPrefix","donut","drawRotorHotspots","connectorEnclosure","xOffset","yOffset","line","drawDisplayKeyboardConnector","rbox","yBreak","y2","yDest","xStart","xDest","yStart","drawKeyboardPlugboardConnector","rotor","etw_top","x2","etw_delta","N","rotor_center","start","angle","end","addPoints","fromPolar","deg","end_in","moveTo","H","lineTo","drawPlugboardRotorConnector","back","transform","rotation","drawRotorWires","r_outer","r_inner","kGap","kBand","eachPair","i_angle","j_angle","half_angle","Math","sign","5","7","8","9","10","11","12","13","26","spread","quadraticCurveTo","abs","arcTo","sweep","handle","color_index","color","cubicCurveTo","_svg","_enableAnimation","setupKeyboardClick","setupPlugboardDrag","setupRotorDrag","setupWindowKeyboardListener","hotspot","plainIndex","plainX","fakePlugboard","origPlugboardSetting","computePlugboard","dx","mouse","current","dy","target","round","keyXOffsetToLetterOffset","cipherIndex","sort","draggable","onStart","_disableAnimation","onMove","newPlugboardSetting","onFinish","getPlugboardPermutation","rotorIndex","wireHotspot","ringHotspot","rotorStartPosition","wiresStartPosition","setupHotspot","_rotorPosition","deltaPosition","degreesTo","_rotateRotor","roundToLetter","position","setIndicatorAtIndex","setRingSettingAtIndex","defaultPrevented","nodeName","getModifierState","isValidLetter","_clear","selectedName","_setWires","_setNotches","allNames","found","el","assert","id_or_el","direction","old_position","new_position","tick","dataset","style","values","highlight","showOutput","clear","__WEBPACK_AMD_DEFINE_RESULT__","root","supported","Doc","parser","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","extend","methods","slice","arguments","pop","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","body","getElementsByTagName","documentElement","nested","poly","polyline","native","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","array","block","il","filter","radians","PI","degrees","filterSVGElements","nodes","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","rx","ry","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","match","g","test","exec","parseInt","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","fallback","valueOf","lastValue","lastDestination","settle","seen","isArray","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","points","move","box","bbox","isNaN","getBBox","pathHandlers","p0","S","Q","T","Z","mlhvqtcsa","jl","PathArray","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","proportionalSize","writeDataToDom","assignNewId","cloneNode","after","removeElement","addTo","put","putIn","inside","show","hide","visible","classes","hasClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","lines","fn","removeAttribute","stringify","is","obj","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","real","G","num","Text","leading","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","parseMatrix","scale","around","rotate","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","first","deep","removeChild","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","listenerId","events","listener","binding","options","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","version","spof","nextSibling","siblings","next","previous","backward","front","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","Ellipse","ellipse","Line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","_rebuild","_build","oy","nodeType","newLined","textContent","tspan","newLine","textPath","blankLineOffset","Tspan","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","comp","w","extension","dmove","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","currTime","getTime","timeToCall","clearTimeout","factory","other","ownerSVGElement","computeCenter","scrollX","scrollY","translatePoint","clientX","clientY","mouseMoveHandler","c1","c2","isArcOptionsR","largeArc","c1x","c1y","c2x","c2y","c1dx","c1dy","c2dx","c2dy","cdx","cdy","xAxisRotate","lAF","sF","rdx","rdy","close"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,kCC/EA,SAAgBC,EAAsBC,GACpC,MAAMC,EAAUC,SAASC,eAAeH,GACxC,IAAKC,EACH,MAAMG,MAAM,wBAA0BJ,GAExC,OAAOC,mDALTpC,EAAAkC,wBASAlC,EAAAwC,iCAAA,SAAiDL,GAE/C,OAAQD,EAAsBC,IAKhCnC,EAAAyC,iBAAA,SAAiCL,EAAsBX,EACtBN,GAC/B,MAAMuB,EAAS,IAAIC,OAAO,YAAclB,EAAM,QAAS,KAGvD,IAAImB,GAASR,EAAQS,aAAa,UAAY,IAAIC,QAAQJ,EAAQ,IAClE,GAAqB,iBAAVvB,EACTyB,OAAanB,KAAON,SAEpB,IAAK,MAAM4B,KAAK5B,EACdyB,OAAanB,KAAOsB,IAGxBX,EAAQY,aAAa,QAASJ,IAIhC5C,EAAAiD,cAAA,SAA8Bb,EAAsBX,GAClD,MAAMiB,EAAS,IAAIC,OAAO,YAAclB,EAAM,QAAS,KAGjDmB,GAASR,EAAQS,aAAa,UAAY,IAAIC,QAAQJ,EAAQ,IACpEN,EAAQY,aAAa,QAASJ,kCCtBhC,SAAgBM,EAAIC,EAAWxB,GAC7B,IAAIyB,EAASD,EAAIxB,EAIjB,OAHIyB,EAAS,IACXA,GAAUzB,GAELyB,mDAdTpD,EAAAqD,iBAAA,SAAiCC,EAAoBC,GACnD,IAAI/C,EAAI0C,EAAII,EAAYC,GAIxB,OAHI/C,EAAI+C,EAAU,IAChB/C,GAAK+C,GAEA/C,GAITR,EAAAkD,MAaAlD,EAAAwD,WAAA,MAIEC,YAAYC,EAAkB,iBAC5BC,KAAKC,KAAO,GACZD,KAAKE,SAAWH,EAGXD,IAAIhC,EAAaN,GAAkBwC,KAAKC,KAAKnC,GAAON,EACpDsC,IAAIhC,GAAwB,OAAOkC,KAAKC,KAAK7B,eAAeN,GAC5DgC,IAAIhC,EAAaqC,GACtB,GAAIH,KAAKI,IAAItC,GAAM,OAAOkC,KAAKC,KAAKnC,GACpC,QAAsBuC,IAAlBF,EAA6B,OAAOA,EACxC,MAAMvB,MAAMoB,KAAKE,SAAW,KAAOpC,KAQvCzB,EAAAiE,qBAAA,cAA0C1B,MACxCkB,YAAYS,GAAcC,2BAA2BD,sFCnDvD,MAAAE,EAAAtE,EAAA,GAEMoD,EAAMkB,EAAQlB,IACdM,EAAaY,EAAQZ,WA+ChBxD,EAAAqE,OAAe,CACxBC,SAAU,6BACVC,OAAQ,CACNC,EAAK,CAACC,YAAa,6BAA8BC,MAAO,KACxDC,GAAM,CAACF,YAAa,6BAA8BC,MAAO,KACzDE,IAAO,CAACH,YAAa,6BAA8BC,MAAO,KAC1DG,GAAM,CAACJ,YAAa,6BAA8BC,MAAO,KACzDI,EAAK,CAACL,YAAa,6BAA8BC,MAAO,KACxDK,GAAM,CAACN,YAAa,6BAA8BC,MAAO,MACzDM,IAAO,CAACP,YAAa,6BAA8BC,MAAO,MAC1DO,KAAQ,CAACR,YAAa,6BAA8BC,MAAO,OAE7DQ,WAAY,CACVC,EAAK,6BACLC,EAAK,6BACLC,EAAK,8BAEPC,SAAU,CACRC,YAAa,WACbC,UAAW,MAUf,MAAaC,EAMXhC,YAAYa,GACVX,KAAK+B,OAASpB,EAASqB,cACvBhC,KAAKiC,OAAStB,EAASsB,OACvBjC,KAAKkC,UAAY,IAAIrC,EAAmB,kBACxC,IAAK,IAAItD,EAAI,EAAGA,EAAIyD,KAAK+B,OAAOE,OAAQ1F,IAAK,CAC3C,MAAM4F,EAASnC,KAAK+B,OAAOxF,GAC3ByD,KAAKkC,UAAUE,IAAID,EAAQ5F,GAC3ByD,KAAKkC,UAAUE,IAAID,EAAOE,cAAe9F,IAKtCuD,MAAMqC,GAA2B,OAAOnC,KAAKkC,UAAU9B,IAAI+B,GAG3DrC,SAASxB,GACd,IAAK,MAAMgE,KAAahE,EACtB,IAAK0B,KAAKkC,UAAU9B,IAAIkC,GACtB,OAAO,EAGX,OAAO,EAKFxC,QAAQqC,GAA0B,OAAOnC,KAAKkC,UAAU9E,IAAI+E,GAG5DrC,UAAUyC,GAAyB,OAAOvC,KAAK+B,OAAOQ,GAGtDzC,eAAe0C,GACpB,IAAIC,EAAM,GACV,IAAK,MAAMC,KAAOF,EAChBC,GAAOzC,KAAK+B,OAAOW,GAErB,OAAOD,EAIF3C,IAAIN,EAAkBmD,GAG3B,MAFiB,iBAANnD,IAAgBA,EAAIQ,KAAK4C,QAAQpD,IAC3B,iBAANmD,IAAgBA,EAAI3C,KAAK4C,QAAQD,IACrC3C,KAAK+B,OAAOxC,EAAIC,EAAImD,EAAG3C,KAAKiC,SAI9BnC,KAAK+C,GACV,IAAK,IAAItG,EAAI,EAAGuG,EAAM9C,KAAK+B,OAAOE,OAAQ1F,EAAIuG,EAAKvG,IACjDsG,EAAS7C,KAAK+B,OAAOgB,OAAOxG,GAAIA,IAxDtCF,EAAAyF,WAkEA,MAAakB,EASXlD,YAAYmD,EAA4BtC,GAPjCX,KAAAkD,aAA0B,CAACC,MAAO,GAAIC,OAAQ,IAC9CpD,KAAAqD,aAA0B,CAACF,MAAO,GAAIC,OAAQ,IAOnDpD,KAAKW,SAAWA,EAChBX,KAAKsD,MAAML,GAINnD,QAAQqC,GACbA,EAASA,EAAOH,cAChB,MAAMoB,EAASpD,KAAKuD,eAAenG,IAAI+E,GAEvC,OADAnC,KAAKkD,aAAe,CAACC,MAAOhB,EAAQiB,OAAQA,GACrCA,EAIFtD,QAAQqC,GACbA,EAASA,EAAOH,cAChB,MAAMoB,EAASpD,KAAKwD,eAAepG,IAAI+E,GAEvC,OADAnC,KAAKqD,aAAe,CAACF,MAAOhB,EAAQiB,OAAQA,GACrCA,EAIFtD,MAAMmD,GAEX,IADAA,EAAqBA,EAAmBjB,eACjBC,SAAWjC,KAAKW,SAASsB,OAC9C,MAAMrD,MAAM,+BAAiCqE,EAAmBhB,OACpD,cAAgBjC,KAAKW,SAASsB,QAE5C,MAAMwB,EAAgB,IAAI5D,EAAmB,kBACvC6D,EAAgB,IAAI7D,EAAmB,kBAC7C,IAAK,IAAItD,EAAI,EAAGA,EAAIyD,KAAKW,SAASsB,OAAQ1F,IAAK,CAC7C,MAAMoH,EAAQ3D,KAAKW,SAASiD,UAAUrH,GAChCsH,EAASZ,EAAmB1G,GAElC,GADAyD,KAAKW,SAASiC,QAAQiB,GAClBH,EAActD,IAAIyD,GACpB,MAAMjF,MAAM,+BAAiCiF,EACjC,wBAEdJ,EAAcrB,IAAIuB,EAAOE,GACzBH,EAActB,IAAIyB,EAAQF,GAG5B3D,KAAK+B,OAASkB,EACdjD,KAAKuD,eAAiBE,EACtBzD,KAAKwD,eAAiBE,EAKjB5D,SAAS+C,GAEd,IAAK,IAAItG,EAAI,EAAGA,EAAIyD,KAAK+B,OAAOE,OAAQ1F,IACtCsG,EAAS7C,KAAKW,SAASoB,OAAOxF,GAAIyD,KAAK+B,OAAOxF,KA7DpDF,EAAA2G,cAuEA,MAAac,EASXhE,YAAYmD,EAA4Bc,EAC5BpD,GACVX,KAAKc,YAAc,IAAIkC,EAAYC,EAAoBtC,GACvDX,KAAK+D,aAAeA,EACpB/D,KAAKgE,SAAW,IAAIC,IAChB,IAAIF,GAAcG,IAAK/B,GAAWxB,EAASiC,QAAQT,KACvDnC,KAAKmE,UAAYxD,EACjBX,KAAKoE,WAAa,EAClBpE,KAAKqE,cAAgB,EAGvBC,gBAA0B,OAAOtE,KAAKoE,WACtCE,cAAc9G,GACZwC,KAAKoE,WAAa7E,EAAI/B,EAAOwC,KAAKmE,UAAUlC,QAG9CsC,mBAA6B,OAAOvE,KAAKqE,cACzCE,iBAAiB/G,GACfwC,KAAKqE,cAAgB9E,EAAI/B,EAAOwC,KAAKmE,UAAUlC,QAG1CnC,QAAQqC,GACb,MAAMqC,EAASxE,KAAKoE,WAAapE,KAAKqE,cAGtC,OAFAlC,EAASnC,KAAKmE,UAAUM,IAAID,EAAQrC,GACpCA,EAASnC,KAAKc,YAAY4D,QAAQvC,GAC3BnC,KAAKmE,UAAUM,KAAKD,EAAQrC,GAG9BrC,QAAQqC,GACb,MAAMqC,EAASxE,KAAKoE,WAAapE,KAAKqE,cAGtC,OAFAlC,EAASnC,KAAKmE,UAAUM,IAAID,EAAQrC,GACpCA,EAASnC,KAAKc,YAAY6D,QAAQxC,GAC3BnC,KAAKmE,UAAUM,KAAKD,EAAQrC,GAG9BrC,OAAeE,KAAKsE,WAAa,EAEjCxE,YAAuB,OAAOE,KAAKgE,SAAS5D,IAAIJ,KAAKoE,aA9C9D/H,EAAAyH,QAqDA,MAAac,EAMX9E,YAAYa,GACVX,KAAKmE,UAAYxD,EACjBX,KAAKc,YAAc,IAAIkC,EAAYhD,KAAKmE,UAAUpC,OAAQ/B,KAAKmE,WAC/DnE,KAAK+B,OAAS,GAGTjC,QAAQqC,GACb,OAAOnC,KAAKc,YAAY4D,QAAQvC,GAE3BrC,QAAQqC,GACb,OAAOnC,KAAKc,YAAY6D,QAAQxC,GAI3BrC,MAAM+E,GACXA,EAAcA,EAAY7C,cAC1BhC,KAAKc,YAAYwC,MAAMtD,KAAK8E,qBAAqBD,IACjD7E,KAAK+B,OAAS8C,EAIT/E,SAAS+E,GACd,IAEE,OADA7E,KAAK8E,qBAAqBD,EAAY7C,eAC/B,GACP,MAAO+C,GACP,OAAOA,EAAEhF,SAMLD,qBAAqB+E,GAC3B,MAAMpC,EAAMzC,KAAKmE,UAAUpC,OAAOiD,MAAM,IAClCC,EAAQJ,EAAY7C,cAAcgD,MAAM,OAC9C,IAAK,MAAME,KAAQD,EAAO,CACxB,GAAa,KAATC,EAAa,SACjB,GAAoB,IAAhBA,EAAKjD,QAAgBiD,EAAK,KAAOA,EAAK,GACxC,MAAMtG,MAAM,4BAA8BsG,EAAO,KAEnD,MAAM3I,EAAIyD,KAAKmE,UAAUvB,QAAQsC,EAAK,IAChCC,EAAInF,KAAKmE,UAAUvB,QAAQsC,EAAK,IACtC,GAAIzC,EAAIlG,KAAO2I,EAAK,GAClB,MAAMtG,MAAM,oBAAsBsG,EAAK,GAAK,yBAE9C,GAAIzC,EAAI0C,KAAOD,EAAK,GAClB,MAAMtG,MAAM,oBAAsBsG,EAAK,GAAK,yBAE9C,MAAME,EAAM3C,EAAIlG,GAChBkG,EAAIlG,GAAKkG,EAAI0C,GACb1C,EAAI0C,GAAKC,EAEX,OAAO3C,EAAI4C,KAAK,KA1DpBhJ,EAAAuI,YAkEAvI,EAAAiJ,OAAA,MAWExF,YAAYyF,GACVvF,KAAKwF,mBAAqB,IAAIC,MAC9BzF,KAAK0F,MAAQH,EACbvF,KAAKmE,UAAY,IAAIrC,EAASyD,EAAK5E,UACnCX,KAAK2F,WAAa,IAAIf,EAAU5E,KAAKmE,WACrCnE,KAAK4F,cAAcL,EAAK5D,SAASC,aACjC5B,KAAK6F,aAAaN,EAAK5D,SAASE,WAChC7B,KAAK8F,cAAe,EAGfhG,yBAAyB+C,GAC9B7C,KAAKwF,mBAAmBO,KAAKlD,GAGvB/C,eAAekG,GACrB,OAAOhG,KAAKmE,UAAU8B,YAClBjG,KAAKkG,QAAQ,GAAGF,GAAQhG,KAAKkG,QAAQ,GAAGF,GAAQhG,KAAKkG,QAAQ,GAAGF,IAG9DlG,eAAekG,EAAmCxI,GACxD,MAAM2I,EAAQnG,KAAKoG,oBAAoBJ,EAAOxI,GAC9C,GAAI2I,EAAO,MAAM,IAAIvH,MAAMuH,GAC3B,IAAK,IAAI5J,EAAI,EAAGA,EAAIiB,EAAMyE,OAAQ1F,IAChCyD,KAAKkG,QAAQ3J,GAAGyJ,GAAShG,KAAKmE,UAAUvB,QAAQpF,EAAMjB,IAExDyD,KAAKqG,iBAAiBL,GAGhBlG,oBAAoBkG,EACAxI,GAE1B,OAAqB,KADrBA,EAAQA,EAAMwE,eACJC,OACD+D,EAAQ,oBAEZhG,KAAKmE,UAAUmC,SAAS9I,GAGtB,GAFE,WAAawI,EAAQ,YAAcxI,EAKtCsC,sBAAsByC,EACAyD,EACAxI,GAC5B,GAAI+E,EAAQ,GAAKA,EAAQ,EACvB,MAAM,IAAI3D,MAAM,wBAA0B2D,GAE5C,IAAKvC,KAAKmE,UAAUoC,MAAM/I,GACxB,MAAM,IAAIoB,MAAM,mBAAqBpB,GAEvCwC,KAAKkG,QAAQ3D,GAAOyD,GAAShG,KAAKmE,UAAUvB,QAAQpF,GACpDwC,KAAKqG,iBAAiBL,GAGhBlG,iBAAiBkG,GACT,cAAVA,EACFhG,KAAKwF,mBAAmBgB,QACpB5J,GAAKA,EAAE6J,kBAAkBzG,KAAK0G,iBAElC1G,KAAKwF,mBAAmBgB,QACpB5J,GAAKA,EAAE+J,oBAAoB3G,KAAK4G,mBAIjC9G,eAAyB,OAAOE,KAAK6G,eAAe,aACpD/G,aAAatC,GAClBwC,KAAK8G,eAAe,YAAatJ,GAE5BsC,oBAAoByC,EAAe/E,GACxCwC,KAAK+G,sBAAsBxE,EAAO,YAAa/E,GAE1CsC,kBAAkBtC,GACvB,OAAOwC,KAAKoG,oBAAoB,YAAa5I,GAGxCsC,iBACL,OAAOE,KAAK6G,eAAe,gBAEtB/G,eAAetC,GACpBwC,KAAK8G,eAAe,eAAgBtJ,GAE/BsC,sBAAsByC,EAAe/E,GAC1CwC,KAAK+G,sBAAsBxE,EAAO,eAAgB/E,GAE7CsC,oBAAoBtC,GACzB,OAAOwC,KAAKoG,oBAAoB,eAAgB5I,GAG3CsC,gBAA0B,OAAOE,KAAKgH,aACtClH,cAActC,EAAeyJ,GAAgB,GAElD,MAAMzH,GADNhC,EAAQA,EAAMwE,eACEgD,MAAM,KACtB,GAAiB,IAAbxF,EAAEyC,OACJ,MAAM,IAAIrD,MAAM,6CAElB,MAAMsI,EAAsB,GAC5B,IAAK,MAAMC,KAAc3H,EAAG,CAC1B,MAAM4H,EAAapH,KAAK0F,MAAM9E,OAAOuG,GACrC,QAAmB9G,IAAf+G,EACF,MAAMxI,MAAM,uBAAyBuI,GAEvCD,EAAWnB,KACP,IAAIjC,EAAMsD,EAAWtG,YAAasG,EAAWrG,MAAOf,KAAKmE,YAE/D,IAAK8C,EAAe,CAClB,MAAMI,EAAarH,KAAKkG,QACxB,GAAImB,EACF,IAAK,IAAI9K,EAAI,EAAGA,EAAI2K,EAAWjF,OAAQ1F,IACrC2K,EAAW3K,GAAG+H,UAAY+C,EAAW9K,GAAG+H,UACxC4C,EAAW3K,GAAGgI,aAAe8C,EAAW9K,GAAGgI,aAG/CvE,KAAKkG,QAAUgB,EACflH,KAAKgH,aAAexJ,EACpBwC,KAAKwF,mBAAmBgB,QACpB5J,GAAKA,EAAE0K,mBAAmBtH,KAAKgH,eACnChH,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAE2K,cAAc,IAAK/H,EAAE,KAC5DQ,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAE2K,cAAc,IAAK/H,EAAE,KAC5DQ,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAE2K,cAAc,IAAK/H,EAAE,MAGzDM,mBAAmBtC,GACxB,IACEwC,KAAK4F,cAAcpI,GAAO,GAC1B,MAAOuH,GACP,OAAOA,EAAEhF,QAEX,MAAO,GAGFD,eAAyB,OAAOE,KAAKwH,gBACrC1H,aAAahD,EAAcmK,GAAgB,GAChD,MAAMQ,EAAezH,KAAK0F,MAAMnE,WAAWzE,GAC3C,QAAqBuD,IAAjBoH,EACF,MAAM7I,MAAM,2BAA6B9B,GAEtCmK,IACHjH,KAAK0H,WAAa,IAAI5D,EAAM2D,EAAc,GAAIzH,KAAKmE,WACnDnE,KAAKwH,gBAAkB1K,EACvBkD,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAE+K,kBAAkB7K,KAGtDgD,kBAAkBhD,GACvB,IACEkD,KAAK6F,aAAa/I,GAAM,GACxB,MAAOiI,GACP,OAAOA,EAAEhF,QAEX,MAAO,GAEFD,0BACL,OAAOE,KAAK0H,WAAW5G,YAGlBhB,eAAyB,OAAOE,KAAK2F,WAAW5D,OAChDjC,aAAatC,GAClBwC,KAAK2F,WAAWrC,MAAM9F,GACtBwC,KAAKwF,mBAAmBgB,QACpB5J,GAAKA,EAAEgL,kBAAkB5H,KAAK2F,WAAW7E,YAChBd,KAAK2F,WAAW5D,SAExCjC,kBAAkBtC,GACvB,OAAOwC,KAAK2F,WAAWkC,SAASrK,GAE3BsC,0BACL,OAAOE,KAAK2F,WAAW7E,YAGlBhB,cAActC,GACnBwC,KAAK8F,aAAetI,EACpBwC,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAEkL,aAAatK,IAI/CsC,gBACL,MAAO,CACLiI,UAAW,CACTrD,QAAS1E,KAAK2F,WAAW7E,YAAYoC,aACrCyB,QAAS3E,KAAK2F,WAAW7E,YAAYuC,cAEvCzC,OAAQ,CACN,CACE8D,QAAS1E,KAAKkG,QAAQ,GAAGpF,YAAYoC,aACrCyB,QAAS3E,KAAKkG,QAAQ,GAAGpF,YAAYuC,cAEvC,CACEqB,QAAS1E,KAAKkG,QAAQ,GAAGpF,YAAYoC,aACrCyB,QAAS3E,KAAKkG,QAAQ,GAAGpF,YAAYuC,cAEvC,CACEqB,QAAS1E,KAAKkG,QAAQ,GAAGpF,YAAYoC,aACrCyB,QAAS3E,KAAKkG,QAAQ,GAAGpF,YAAYuC,eAGzCxB,UAAW7B,KAAK0H,WAAW5G,YAAYoC,cAIpCpD,cAAcqC,GACnB,OAAOnC,KAAKmE,UAAUoC,MAAMpE,GAIvBrC,eAAeC,GACpB,IAAI0C,EAAM,GACV,IAAK,MAAMH,KAAavC,EACtB0C,GAAOzC,KAAKgI,qBAAqB1F,GAEnC,OAAOG,EAKF3C,qBAAqBqC,GAE1B,OADAnC,KAAKiI,MAAK,GACHjI,KAAKkI,oBAAoB/F,GAI3BrC,oBAAoBqC,GACzB,IAAIgG,EAAIhG,EAWR,OAVAgG,EAAInI,KAAK2F,WAAWjB,QAAQyD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGxB,QAAQyD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGxB,QAAQyD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGxB,QAAQyD,GAC5BA,EAAInI,KAAK0H,WAAWhD,QAAQyD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGvB,QAAQwD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGvB,QAAQwD,GAC5BA,EAAInI,KAAKkG,QAAQ,GAAGvB,QAAQwD,GAC5BA,EAAInI,KAAK2F,WAAWhB,QAAQwD,GAC5BnI,KAAKwF,mBAAmBgB,QAAQ5J,GAAKA,EAAEwL,UAAUpI,KAAKqI,kBAC/CF,EAIFrI,KAAKwI,GACNtI,KAAKkG,QAAQ,GAAGqC,aAClBvI,KAAKkG,QAAQ,GAAG+B,QAEdjI,KAAKkG,QAAQ,GAAGqC,aAAevI,KAAKkG,QAAQ,GAAGqC,cACjDvI,KAAKkG,QAAQ,GAAG+B,OAElBjI,KAAKkG,QAAQ,GAAG+B,OAChBjI,KAAKwF,mBAAmBgB,QACpB5J,GAAKA,EAAE6J,kBAAkBzG,KAAK0G,iBAG7B5G,UAAU0I,GACfA,EAAMpG,IAAI,cAAepC,KAAKyI,iBAC9BD,EAAMpG,IAAI,eAAgBpC,KAAK4G,kBAC/B4B,EAAMpG,IAAI,YAAapC,KAAK0G,gBAC5B8B,EAAMpG,IAAI,YAAapC,KAAK0I,gBAC5BF,EAAMpG,IAAI,SAAUpC,KAAK8F,aAAe,IAAM,KAGzChG,UAAU0I,GACf,SAASG,EAAWC,EAAqBxG,GACvC,MAAM5E,EAAQgL,EAAMpL,IAAIwL,GACxB,GAAc,OAAVpL,EAGJ,IACE4E,EAAI5E,GACJ,MAAOuH,GACP8D,QAAQC,KAAK,kCAAmCF,EAAapL,EAAOuH,IAkBxE4D,EAAW,cAAgBvJ,GAAMY,KAAK4F,cAAcxG,IACpDuJ,EAAW,eAAiBvJ,GAAMY,KAAK+I,eAAe3J,IACtDuJ,EAAW,YAAcvJ,GAAMY,KAAKgJ,aAAa5J,IACjDuJ,EAAW,YAAcvJ,GAAMY,KAAKiJ,aAAa7J,IAlBjD,SAA2BwJ,EACAxG,GACzB,MAAM5E,EAAQgL,EAAMpL,IAAIwL,GACV,OAAVpL,IAGU,MAAVA,EACF4E,GAAI,GACe,MAAV5E,EACT4E,GAAI,GAEJyG,QAAQC,KAAK,kDACAF,EAAapL,IAO9B0L,CAAkB,cAAgB9J,GAAMY,KAAKmJ,cAAc/J,0HCvnB/D,MAAAgK,EAAAjN,EAAA,GACAkN,EAAAlN,EAAA,GACAmN,EAAAnN,EAAA,GAcA,SAASoN,EAA2B/K,GAClC,OAAO4K,EAAA7K,sBAAsBC,GAY/B,MAAMgL,EAQJ1J,YAAY2J,GACVzJ,KAAK0J,QAAUD,EACfzJ,KAAKgH,aACDhH,KAAK2J,kBAAkB,cACCvK,GAAMqK,EAAOG,mBAAmBxK,GAChCA,GAAMqK,EAAO7D,cAAcxG,IACvDY,KAAKqE,cACDrE,KAAK2J,kBAAkB,eACCvK,GAAMqK,EAAOI,oBAAoBzK,GACjCA,GAAMqK,EAAOV,eAAe3J,IACxDY,KAAKoE,WACDpE,KAAK2J,kBAAkB,YACCvK,GAAMqK,EAAOK,kBAAkB1K,GAC/BA,GAAMqK,EAAOT,aAAa5J,IACtDY,KAAK2F,WACD3F,KAAK2J,kBAAkB,YACCvK,GAAMqK,EAAOM,kBAAkB3K,GAC/BA,GAAMqK,EAAOR,aAAa7J,IACtDY,KAAK8F,aACD9F,KAAKgK,cAAc,cAAgB5K,GAAMqK,EAAON,cAAc/J,IAClEY,KAAK0J,QAAQO,yBAAyBjK,MAGhCF,kBAAkBtB,EAAYqJ,EACZzF,GACxB,MAAM3D,EAAU8K,EAA2B/K,GAgB3C,OAfAC,EAAQyL,QAAWC,IACe,KAA5BtC,EAASpJ,EAAQjB,OACnBiB,EAAQ2L,UAAUC,OAAO,OAEzB5L,EAAQ2L,UAAU3F,IAAI,QAG1BhG,EAAQ6L,SAAYH,IAClB,IACE/H,EAAI3D,EAAQjB,OACZiB,EAAQ2L,UAAUC,OAAO,OACzB,MAAOtF,GACPtG,EAAQ2L,UAAU3F,IAAI,SAGnBhG,EAIDqB,cAActB,EACA4D,GACpB,MAAM3D,EAAU8K,EAA2B/K,GAE3C,OADAC,EAAQ6L,SAAYH,IAAY/H,EAAI3D,EAAQ8L,UACrC9L,EAGFqB,kBAAkBgB,EAA0B0J,GACjDxK,KAAK2F,WAAWnI,MAAQgN,EAEnB1K,mBAAmB2K,GACxBzK,KAAKgH,aAAaxJ,MAAQiN,EAErB3K,oBAAoBtC,GACzBwC,KAAKqE,cAAc7G,MAAQA,EAEtBsC,kBAAkBtC,GACvBwC,KAAKoE,WAAW5G,MAAQA,EAEnBsC,aAAatC,GAClBwC,KAAK8F,aAAayE,QAAU/M,EAGvBsC,qBACAA,iBACAA,eAvGT,WACE,MAAM4K,EAAW,IAAIrB,EAAAsB,eAAe,UAAWrB,EAAA5I,QACzC+I,EAAS,IAAIH,EAAAhE,OAAOgE,EAAA5I,QAC1B+I,EAAOQ,yBAAyBS,GAChCA,EAASE,kBAAkBnB,GACJ,IAAID,EAAcC,GAW3C,SAA2BA,GACzB,SAASoB,IACP,MAAMrC,EAAQ,IAAIsC,gBAAgBC,OAAOC,SAASC,KAAKC,UAAU,IACjEzB,EAAO0B,UAAU3C,GAEnBqC,IACAE,OAAOK,iBAAiB,aAAcP,GAAc,GAhBpDQ,CAAkB5B,GAGlBA,EAAOvB,oBAAoB,KAiG7BoD,kFC5GA,MAAAC,EAAApP,EAAA,GACAiN,EAAAjN,EAAA,GACAqP,EAAArP,EAAA,GACAsP,EAAAtP,EAAA,GACAuP,EAAAvP,EAAA,GACAwP,EAAAxP,EAAA,GAEM2F,EAAW4J,EAAM5J,SASjB8J,EAAa,GACbC,EAAa,IACbC,EAAY,IAEZC,EAAa,GACbC,EAA+B,EAAbD,EAClBE,EAA+B,KAAbF,EAGlBG,EAAW,KACXC,EAAW,IACXC,EAAmB,GACnBC,EAAuB,GAEvBC,EAAc,IACdC,EAAa,GAEbC,EAAmB,EACnBC,EAAe,EAEfC,EAAgB,IAChBC,EAAmB,IACnBC,EAA0B,GAE1BC,EAAyB,GACzBC,EAA0B,GAC1BC,EAA8BJ,EAAmB,EAEjDK,EAAa,IACbC,EAAe,GACfC,EAAW,GACXC,EAAkB,GAwBlBC,EAAY,IAAItL,EA1DL,8BA2DXuL,EAAiB,IAAIvL,EA1DJ,8BA4DvB,SAASwL,EAAKC,GACZ,OAAOxB,EAAawB,EAAStB,EAG/B,SAASuB,EAAKD,GAEZ,OAAOxB,GADMwB,EAAS,GAAK,EACDvB,EA0B5B,SAASyB,EAAeC,EAAkBnI,GACxC,MAAMoI,EAAOpC,EAAImC,GAGjBC,EAAKC,KAAK,KAAM,KAAKC,QAAQ,EAAG,EAAG,KAAM,KAEzC,MAAMC,EACFH,EAAKI,QAAQvP,GAAG,wBAAwBwP,UAAUpC,EAAYE,GAC5DmC,EAAUC,EAAiBJ,EAAkBC,QAAQvP,GAAG,cACxD2P,EAAWD,EAAiBJ,EAAkBC,QACbvP,GAAG,cACHwP,UAAU,EAAGnC,EAAaC,IAC3D/D,EA+CR,SAAuBqG,GACrB,MAAMtR,EAAOsR,EAAU5P,KACjB6P,EAAS1B,EACT2B,EAAQvC,EAAaqB,EAAUnL,OAASgK,EAExCsC,EAASH,EAAUL,QAAQvP,MAAM1B,SACjC0R,EAAYJ,EAAUL,QAAQvP,MAAM1B,YACpC2R,EAAQL,EAAUL,QAAQvP,MAAM1B,WA0CtC,OAzCAsQ,EAAUsB,KAAK,CAACvM,EAAQoL,KACtB,MAAMpF,EAAImF,EAAKC,GACfgB,EAAO5K,MAAMxB,GAAQwM,KAAK,CAACxG,EAAGA,EAAGyG,EAAGhC,EAA0B,IAC9D4B,EAAU7K,MAAMxB,GAAQwM,KACpB,CAACxG,EAAGA,EAAGyG,EAAGP,EAASzB,EAA0B,IACjD,MAAMiC,EAAYJ,EAAMV,QAAQe,kBAAkB3M,KAClD0M,EAAUE,OACLvQ,MAAM1B,KAAQqF,KACd2M,iBAAiB3M,KACjB2M,SAAS,YACTA,SAAS,QAGTd,UAAU7F,EAAGyE,GACboC,MAAK,IAAIrD,EAAAsD,gBACCC,EAAE,EAAG,GACLC,EAAE,EAAGd,EAAS,EAAIzB,GAClBwC,SACfP,EAAUQ,KAAKxC,EAAwBC,GAClCtO,MAAM1B,KAAQqF,iBACdwM,KAAK,CACJxG,EAAGA,EAAI0E,EAAyB,EAChC+B,EAAGP,EAASzB,EAA0BE,IAEvCgC,uBAAuB3M,KACvB2M,SAAS,uBAGhBV,EAAUW,OAAOD,SAAS,OAAOE,MAC7B,IAAIrD,EAAAsD,gBACCC,EAAE,EAAG,GACLI,EAAEhB,GACFlP,EAAEiP,GACFiB,GAAGhB,GACHiB,IACA5S,EAAE,EAAGiQ,GACL0C,EAAEhB,GACF3R,EAAE,EAAG0R,EAAS,EAAIzB,GAClB0C,GAAGhB,GACHc,SAEFhB,EAhGWoB,CAAc1B,EAAkBC,QACbvP,GAAG,eACHwP,UAAU,EAAGtB,EAAgBZ,IAE5D2D,EACF9B,EAAKI,QAAQvP,GAAG,qBAAqBwP,UAAU9B,EAAUC,GAC7DuD,EAAUD,EAAe1B,QAAQvP,GAAG,aAC1B4N,EAAmB,EAAIE,EAAa/G,GAC9CmK,EAAUD,EAAe1B,QAAQvP,GAAG,aAC1B4N,EAAmB,EAAIE,EAAa/G,GAC9CmK,EAAUD,EAAe1B,QAAQvP,GAAG,aAC1B4N,EAAmB,EAAIE,EAAa/G,GAuPhD,SAAuB6I,EAA0BuB,EAC1BpK,GACrB,MAAMzI,EAAOsR,EAAU5P,KAEjBiQ,EAAQL,EAAUL,QAAQvP,MAAM1B,WACtC,IAAK,MAAM8S,KAAkB3S,OAAO4S,KAAKtK,EAAKhE,YAAa,CACzD,MAAMuO,EAAMvK,EAAKhE,WAAWqO,GACtBG,EAAO,IAAIrE,EAAM1I,YAAY8M,EAAK1C,GACxC4C,EAAmBvB,EAAMV,QAAQvP,MAAM1B,WAAc8S,KAClCD,EAAcI,GAKnCE,EAAgB7B,EAAUL,QAAQvP,MAAM1B,UAAc6S,EACtCtD,GArQhB6D,CAAcT,EAAe1B,QAAQvP,GAAG,eAAgB4N,EAC1C7G,GAuFhB,SAAwB6I,EAA0B+B,EAC1BC,GACtB,MAAMC,EAAS,CAACC,GAAI,EAAGC,GAAI,GAC3B,IAAK,IAAIhU,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,MAAMoT,EAAeQ,EAAkB5T,EAAI6T,EACrCI,EAAmB,IAANjU,EAAU8P,EAAuBE,EAC9CkE,EAAed,EAAea,EAGpC,GAFApC,EAAUsC,OAAsB,EAAff,GAAkBhB,KAAK0B,GAAQvB,SAAS,aACzDV,EAAUsC,OAAsB,EAAfD,GAAkB9B,KAAK0B,GAAQvB,SAAS,aACrDvS,GAAK,EAAG,CACV,MAAM+R,EAAQkC,EAAahE,EAC3B4B,EAAUiB,KAAKf,EAAOA,GACjBQ,SAAS,eACT6B,OAAOnE,GACP8D,GAAGG,EAAeD,EAAa,GAC/BD,GAAG,KArGZK,CAAenB,EAAe1B,QAAQvP,GAAG,iBAAkB4N,EAC5CE,GA2GjB,SAA2B8B,EAA0B+B,EAC1BC,GACzB,SAASzC,EAAKkD,EAAkBlB,GAC9BvB,EAAUW,OACLvQ,MAAMqS,UACN/B,SAAS,iBACTE,KAAKrD,EAAAmF,MAAMnB,EAAcpD,IAC9B6B,EAAUW,OACLvQ,MAAMqS,WACN/B,SAAS,iBACTE,KAAKrD,EAAAmF,MAAMnB,EAAepD,EAAY6D,EAAa7D,IAE1DoB,EAAK,oBAAqBwC,EAAkB,EAAIC,GAChDzC,EAAK,oBAAqBwC,EAAkB,EAAIC,GAChDzC,EAAK,oBAAqBwC,EAAkB,EAAIC,GAxHhDW,CAAkBtB,EAAe1B,QAAQvP,GAAG,oBAC1B4N,EAAkBE,GAEpC,MAAM0E,EAAqBrD,EAAKI,QAAQvP,GAAG,iBAmQ7C,SAAsC4P,EACAH,EACAE,GACvBC,EAAU5P,KACvB6O,EAAeqB,KAAK,CAACvM,EAAQoL,KAC3B,MAAM0D,EAAU3D,EAAKC,GACf2D,EAAU1D,EAAKD,GACrBa,EACK+C,KAAKlD,EAAQ9F,EAAI8I,EAAShD,EAAQW,EAAIsC,EACjC/C,EAAShG,EAAI8I,EAAS9C,EAASS,EAAIsC,GACxCpC,iBAAiB3M,KACjB2M,kBAAkB3M,KAClB2M,SAAS,UA9QhBsC,CACIJ,EAAmBjD,QAAQvP,GAAG,yBAA0ByP,EAAQoD,OAChElD,EAASkD,QAiRf,SAAwCjD,EACAD,EACApG,GACzBqG,EAAU5P,KAAvB,MACM8S,EAASnD,EAASoD,GAClBC,EAAQzJ,EAAU6G,EAClBsC,EAAUM,EAAQF,EACxBjE,EAAeqB,KAAK,CAACvM,EAAQoL,KAC3B,MAAMkE,EAAStD,EAAShG,EAAImF,EAAKC,GAC3BmE,EAAQ3J,EAAUI,EAAImF,EAAKF,EAAUxK,QAAQT,IAC7CwP,EAASxD,EAASS,EAAIpB,EAAKD,GACjCa,EAAUW,OACLD,iBAAiB3M,KACjB2M,kBAAkB3M,KAClB2M,SAAS,QACTE,MAAK,IAAIrD,EAAAsD,gBACCC,EAAEuC,EAAQE,GACVxQ,EAAEmQ,GACF5P,EAAE+P,EAAQH,EAASJ,EAAU,EAC3BQ,EAAOF,EAAQN,EAAU,EACzBQ,EAAOF,GACTpC,WArSjBwC,CACIZ,EAAmBjD,QAAQvP,GAAG,2BAA4B2P,EAASkD,OACnEtJ,EAAUsJ,QAwShB,SACIjD,EAA0BrG,EAC1B8J,GACF,MAAMC,EAAU,CAAC3J,EAAGJ,EAAUgK,GAAK9E,EAAc2B,EAAG7G,EAAUwJ,IACxDS,EAAYhF,EAAaI,EAAUnL,OACnCgQ,EAAI7E,EAAUnL,OACdiQ,EAAe,CAAC/J,EAAG0J,EAAMvB,GAAI1B,EAAGiD,EAAMtB,IACtClT,EAAIwU,EAAMxU,EAChB+P,EAAUsB,KAAK,CAACvM,EAAQ5F,KACtB,MAAM4V,EAAQ,CAAChK,EAAGJ,EAAUI,EAAImF,EAAK/Q,GAAIqS,EAAG7G,EAAUwJ,IAChDa,EAAQ,IAAM7V,EAAI0V,EAClBI,EAAM1G,EAAA2G,UAAUJ,EAAcvG,EAAA4G,UAAU,CAACC,IAAKJ,EAAO/U,EAAGA,KACxDoV,EAAS9G,EAAA2G,UAAUD,EAAK1G,EAAA4G,UAAU,CAACC,IAAKJ,EAAO/U,EAAG8P,KAClD4B,EAAO,IAAIpD,EAAAsD,eAGjB,GAFAF,EAAK2D,OAAOP,GACZpD,EAAK3P,EAAE4N,EAAazQ,EAAIyV,GACpBI,EAAQ,IAAK,CACf,MAAM5N,GAAUyN,EAAI,EAAI1V,GAAKyV,EAC7BjD,EAAK4D,EAAEb,EAAQ3J,EAAI3D,GACnBuK,EAAK5N,EAAE+L,EAAW1I,GAEpBuK,EAAK4D,EAAEF,EAAOtK,GACd4G,EAAK5N,EAAEsR,EAAO7D,GACdG,EAAK6D,OAAOP,GACZjE,EAAUW,OACLD,iBAAiB3M,KACjB2M,kBAAkB3M,KAClB2M,SAAS,QACTE,KAAKD,EAAKK,WAnUjByD,CACI7B,EAAmBjD,QAAQvP,GAAG,wBAAyBuJ,EAAUsJ,OACjE,CAACf,GAAIpE,EAAUqE,GAAIpE,EAAU9O,EAAG+O,EAAmB,EAAIE,IAC3D0E,EAAmB8B,OAGrB,SAAS5E,EAAiBE,GACxB,MAAMtR,EAAOsR,EAAU5P,KAWvB,OAVA4P,EAAUU,SAAS,iBACnBzB,EAAeqB,KAAK,CAACvM,EAAQoL,KAC3B,MAAMzP,EAAMsQ,EAAUL,QACLsC,OAAO/C,EAAKC,GAASC,EAAKD,IAC1B/O,MAAM1B,SAAYqF,KAClB2M,SAAS,gBACTA,mBAAmB3M,KACpCrE,EAAI4S,OAAO,EAAI3E,GAAYsE,OAAO,EAAG,GACrCvS,EAAI6F,MAAMxB,KAELiM,EAkGT,SAAS6B,EAAgB7B,EAA0BuB,EAC1Ba,GACvB,MAAM1T,EAAOsR,EAAU5P,KACjBiS,EAAed,EAAea,EAQpC,OAPApD,EAAUsB,KAAK,CAACvM,EAAQ5F,KACtB6R,EAAUzK,MAAMxB,GACXwM,KAAK,CAACxG,EAAGsI,EAAeD,EAAa,EAAG5B,EAAG,IAC3CmE,UAAU,CAACzC,GAAI,EAAGC,GAAI,EAAGyC,SAAc,IAAJzW,EAAU6Q,EAAUnL,SACvD6M,SAAS,eACTtQ,MAAM1B,YAAeqF,OAErBiM,EAIT,SAAS6E,EAAe7E,EAA0BuB,EAC1B7O,GACtBsN,EAAUU,SAAS,wBACNV,EAAU5P,KAAvB,MACMyT,EAAI7E,EAAUnL,OACdiR,EAAUvD,EAAepD,EACzB4G,EAAUxD,EAAerD,EACzB8G,EAAO,KAAQ9G,EAAcC,GAC7B8G,EAAQ,IAAO/G,EAAcC,GA+BnC,OA9BAzL,EAAYwS,SAAS,CAAC3P,EAAOE,KAC3B,MAAMtH,EAAI6Q,EAAUxK,QAAQe,GACtBwB,EAAIiI,EAAUxK,QAAQiB,GACtB0P,EAAU,IAAMhX,EAAI0V,EACpBuB,EAAU,IAAMrO,EAAI8M,EACpBpV,EAAI4O,EAAA/L,iBAAiByF,EAAI5I,EAAG0V,GAC5BwB,EAAa,IAAYxB,EAAIyB,KAAKC,KAAK9W,GACvCQ,EAAI6V,EAAUE,EA1MxB,SAAgB7W,EAAWyB,GAQzB,OAAQzB,GAFJ,CAACqX,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAC1CpW,IAAM,GACLA,EAkMSqW,CAAO9X,EAAG0V,GAAKoB,EAAQpB,EAE5ClD,EAAO,IAAIpD,EAAAsD,eACjBF,EAAK2D,OAAO/G,EAAA4G,UAAU,CAACC,IAAKe,EAASlW,EAAG6V,KAKxCnE,EAAKuF,iBAAiB3I,EAAA4G,UAAU,CAACC,IAAKe,EAASlW,EAAGA,IAC5BsO,EAAA4G,UAAU,CAACC,IAAKe,EAAUE,EAAYpW,EAAGA,KAC3DqW,KAAKa,IAAI1X,GAAK,GAChBkS,EAAKyF,MAAM,CAACnX,EAAGA,EAAGoX,MAAO5X,EAAI,GAClB8O,EAAA4G,UAAU,CAACC,IAAKgB,EAAUC,EAAYpW,EAAGA,KAEtD0R,EAAKuF,iBAAiB3I,EAAA4G,UAAU,CAACC,IAAKgB,EAASnW,EAAGA,IAC5BsO,EAAA4G,UAAU,CAACC,IAAKgB,EAASnW,EAAG8V,KAElD/E,EAAUW,OACLD,iBAAiBnL,KACjBmL,kBAAkBnL,KAClBmL,SAAS,QACTE,KAAKD,EAAKK,WAEVhB,EAGT,SAAS4B,EAAmB5B,EAA0BuB,EAC1B7O,GAC1BsN,EAAUU,SAAS,wBACNV,EAAU5P,KAAvB,MACMyT,EAAI7E,EAAUnL,OACd0O,EAAShB,EAAetD,EACxBqI,EAAS,GAAM/D,EACrB,IAAIgE,EAAc,EAsBlB,OArBA7T,EAAYwS,SAAS,CAAC3P,EAAOE,KAC3B,MAAMtH,EAAI6Q,EAAUxK,QAAQe,GACtBwB,EAAIiI,EAAUxK,QAAQiB,GAC5B,GAAItH,GAAK4I,EAAG,CACV,MAAMyP,EAAQxH,EAAUxJ,UAAU+Q,GAC5BpB,EAAU,IAAMhX,EAAI0V,EACpBuB,EAAU,IAAMrO,EAAI8M,EACpBlD,EAAO,IAAIpD,EAAAsD,eACjBF,EAAK2D,OAAO/G,EAAA4G,UAAU,CAACC,IAAKe,EAASlW,EAAGsT,KACxC5B,EAAK8F,aAAalJ,EAAA4G,UAAU,CAACC,IAAKe,EAASlW,EAAGqX,IAC5B/I,EAAA4G,UAAU,CAACC,IAAKgB,EAASnW,EAAGqX,IAC5B/I,EAAA4G,UAAU,CAACC,IAAKgB,EAASnW,EAAGsT,KAC9CvC,EAAUW,OACLD,iBAAiBnL,KACjBmL,iBAAiBjL,KACjBiL,kBAAkB8F,KAClB9F,SAAS,QACTE,KAAKD,EAAKK,SACfuF,GAAe,KAGZvG,EAGT,SAASsB,EAAUtB,EAA0BuB,EAC1BpK,GACjB,MAAMzI,EAAOsR,EAAU5P,KACvB4P,EAAUU,SAAS,SAEnB,MAAML,EAAQL,EAAUL,QAAQvP,MAAM1B,WAAcgS,SAAS,eAC7D,IAAK,MAAM3H,KAAclK,OAAO4S,KAAKtK,EAAK3E,QAAS,CACjD,MAAMkP,EAAMvK,EAAK3E,OAAOuG,GAClB4I,EAAO,IAAIrE,EAAM1I,YAAY8M,EAAIhP,YAAasM,GACpD6F,EAAexE,EAAMV,QAAQvP,MAAM1B,WAAcqK,KAClCwI,EAAcI,GAc/B,OAVAtB,EAAMiC,OAAsB,EAAfjE,GAAkBjO,MAAM1B,SAAYgS,SAAS,YAAYH,KAAK,CACzE2B,GAAIX,EAAepD,EAAaE,EAChC8D,GAAI,IAKNN,EAAgB7B,EAAUL,QAAQvP,MAAM1B,UAAc6S,EACtCpD,GAET6B,EAwGT/R,EAAAsO,eAAA,MAKE7K,YAAYtB,EAAY+G,GACtBvF,KAAK8U,KAAO1L,EAAA7K,sBAAsBC,GAClCwB,KAAK0F,MAAQH,EACbvF,KAAK8F,cAAe,EAGpB2H,EAAezN,KAAK8U,KAAMvP,GAG1B,MAAM3D,EAAc2D,EAAK5D,SAASC,YAAYoD,MAAM,KACpDhF,KAAKuH,cAAc,IAAK3F,EAAY,IACpC5B,KAAKuH,cAAc,IAAK3F,EAAY,IACpC5B,KAAKuH,cAAc,IAAK3F,EAAY,IACpC5B,KAAK2H,kBAAkBpC,EAAK5D,SAASE,WAGrC7B,KAAK+U,mBAGCjV,mBAAqBE,KAAK8U,KAAK1K,UAAU3F,IAAI,YAE7C3E,oBAAsBE,KAAK8U,KAAK1K,UAAUC,OAAO,YAGlDvK,kBAAkB2J,GACvB2D,EAAUsB,KAAMvM,IACdnC,KAAKgV,mBAAmBvL,EAAQtH,GAChCnC,KAAKiV,mBAAmBxL,EAAQtH,KAGlCnC,KAAKkV,eAAezL,EAAQ,YAAa,GACzCzJ,KAAKkV,eAAezL,EAAQ,YAAa,GACzCzJ,KAAKkV,eAAezL,EAAQ,YAAa,GAEzCzJ,KAAKmV,4BAA4B1L,GAG3B3J,mBAAmB2J,EAAsBtH,GAC/CiH,EAAA7K,wCAAwC4D,KACnCiJ,iBAAiB,QACA,KAAQ3B,EAAOzB,qBAAqB7F,KAGpDrC,mBAAmB2J,EAAsB9F,GAC/C,MAAMyR,EACFhM,EAAAvK,gDAAgD8E,iBAC9C0R,EAAajI,EAAUxK,QAAQe,GAC/B2R,EAAS1J,EAAa0B,EAAK+H,GAC3BE,EAAgB,IAAI7J,EAAM9G,UAAUwI,GAC1C,IAAIoI,EACJ,MAAMC,EAAoBjN,IACxB,MAAMkN,EAAKlN,EAAMmN,MAAMC,QAAQzN,EAAImN,EAC7BO,EAAKrN,EAAMmN,MAAMC,QAAQhH,EAAIpG,EAAMsN,OAAO3D,MAAMvD,EAChDpK,EAncZ,SAAkCkR,GAChC,OAAOhC,KAAKqC,MAAML,EAAKzJ,GAkcJ+J,CAAyBN,GAClCO,EAAcZ,EAAa7Q,EACjC,GAAIkP,KAAKa,IAAIsB,GAAM9I,GAA+BkJ,EAAc,GAC5DA,GAAe7I,EAAUnL,OAC3B,OAAO,KAET,MAAM4B,EAASuJ,EAAUxJ,UAAUqS,GAC7BxT,EAAM,IAAIgD,MACZ9B,IAAUE,GACZpB,EAAIsD,KAAKpC,EAAQE,GAEnB,IAAK,MAAMqB,KAAQsQ,EAAqBxT,cAAcgD,MAAM,OAC7C,KAATE,GAAeA,EAAKtC,QAAQe,GAAS,GACrCuB,EAAKtC,QAAQiB,GAAU,GACzBpB,EAAIsD,KAAKb,GAIb,IAAK,IAAI3I,EAAI,EAAGA,EAAIkG,EAAIR,OAAQ1F,IAC9BkG,EAAIlG,GAAKkG,EAAIlG,GAAGyI,MAAM,IAAIkR,OAAO7Q,KAAK,IAGxC,OADA5C,EAAIyT,OACGzT,EAAI4C,KAAK,MAElBmG,EAAA2K,UAAU,CACR1X,QAAS2W,EACTgB,QAAS,KAIPpW,KAAKqW,oBACLb,EAAuB/L,EAAOf,gBAEhC4N,OAAS9N,IACP,IAAI+N,EAAsBd,EAAiBjN,GACf,OAAxB+N,IACFA,EAAsBf,GAExBD,EAAcjS,MAAMiT,GACpBvW,KAAK4H,kBAAkB2N,EAAczU,YAAayV,IAEpDC,SAAWhO,IACT,MAAM+N,EAAsBd,EAAiBjN,GACjB,OAAxB+N,EACF9M,EAAOR,aAAasN,GAEpBvW,KAAK4H,kBAAkB6B,EAAOgN,0BACPhN,EAAOf,gBAEhC1I,KAAK+U,sBAKHjV,eAAe2J,EAAsBjL,EAAYkY,GACvD,MAAM7E,EAAQzI,EAAAvK,iCAAiCL,GACzCiQ,EAAQrF,EAAAvK,oCAAoCL,WAE5CmY,GADOvN,EAAAvK,oCAAoCL,UAC7B4K,EAAAvK,oCAAoCL,oBAClDoY,EAAcxN,EAAAvK,oCAAoCL,kBAOxD,IAAId,EACAmZ,EAAqB,EACrBC,EAAqB,EACzB,MAAMC,EAAgBtY,IACpB+M,EAAA2K,UAAU,CACR1X,QAASA,EACT2X,QAAS,KACPpW,KAAKqW,oBACL3Y,EAAOsC,KAAK8F,aAAe,SACArH,IAAYkY,EAAc,QAAU,OAC/DE,EAAqB7W,KAAKgX,eAAenF,GACzCiF,EAAqB9W,KAAKgX,eAAevI,IAE3C6H,OAAS9N,IACP,MAIMyO,IAJUzO,EAAMsN,OAAO3D,MAAM+E,UAAU1O,EAAMmN,MAAMC,SACrDpN,EAAMsN,OAAO3D,MAAM+E,UAAU1O,EAAMmN,MAAMxD,QAGZ,IAAM/E,EAAUnL,OACjD,OAAQvE,GACN,IAAK,SACHsC,KAAKmX,aAAatF,EAAOgF,EAAqBI,EAC5B,qBAClB,MACF,IAAK,OACHjX,KAAKmX,aAAatF,EAAOgF,EAAqBI,EAC5B,qBAClBjX,KAAKmX,aAAa1I,EAAOqI,EAAqBG,EAC5B,aAClB,MACF,IAAK,QACHjX,KAAKmX,aAAa1I,EAAOqI,EAAqBG,EAC5B,aAClB,MACF,QACE,MAAM,IAAIxL,EAAAnL,qBAAqB5C,KAGrC8Y,SAAWhO,IAGT,SAAS4O,EAAcC,GACrB,OAAOjK,EAAUxJ,UACb6H,EAAAlM,IAAImU,KAAKqC,MAAMsB,GAAWjK,EAAUnL,SAE1C,MAAMgV,IANUzO,EAAMsN,OAAO3D,MAAM+E,UAAU1O,EAAMmN,MAAMC,SACrDpN,EAAMsN,OAAO3D,MAAM+E,UAAU1O,EAAMmN,MAAMxD,QAKZ,IAAM/E,EAAUnL,OAEjD,OADAjC,KAAK+U,mBACGrX,GACN,IAAK,SACH+L,EAAO6N,oBACHZ,EACAU,EAAcP,EAAqBI,IACvC,MACF,IAAK,OACHxN,EAAO6N,oBACHZ,EACAU,EAAcP,EAAqBI,IACvCxN,EAAO8N,sBACHb,EACAU,EAAcN,EAAqBG,IACvC,MACF,IAAK,QACHxN,EAAO8N,sBACHb,EACAU,EAAcN,EAAqBG,IACvC,MACF,QACE,MAAM,IAAIxL,EAAAnL,qBAAqB5C,QAKzCqZ,EAAaJ,GACbI,EAAaH,GAGP9W,4BAA4B2J,GAClC/K,SAAS0M,iBAAiB,UAAYjB,IAGhCA,EAAMqN,mBAAqBrN,EAAM2L,QACM,UAAtC3L,EAAM2L,OAAmB2B,UACa,aAAtCtN,EAAM2L,OAAmB2B,UAC1BtN,EAAMuN,iBAAiB,YAAcvN,EAAMuN,iBAAiB,QAC5DvN,EAAMuN,iBAAiB,UAIvBjO,EAAOkO,cAAcxN,EAAMrM,KAC7B2L,EAAOzB,qBAAqBmC,EAAMrM,KACzBqM,EAAMrM,OAKhB,GAKEgC,kBAAkBgB,EAAgC0J,GACvDxK,KAAK4X,SAGL9W,EAAYwS,SAAS,CAAC3P,EAAOE,KAC3B,MAAMW,EAAS4I,EAAUxK,QAAQiB,GAAUuJ,EAAUxK,QAAQe,GAC7DyF,EAAAtK,iBAAiBsK,EAAA7K,qCAAqCoF,KAAU,SAC/C,GAAKa,KAInB1E,kBAAkB+X,GACvB7X,KAAK4X,SACL5X,KAAK8X,UAAU,oBAAqB7a,OAAO4S,KAAK7P,KAAK0F,MAAMnE,YAC5CsW,GAGV/X,mBAAmB2K,IAEnB3K,cAAcuX,EAA+BQ,GAClD7X,KAAK4X,SACL5X,KAAK8X,qBAAqBT,UAAkBpa,OAAO4S,KAAK7P,KAAK0F,MAAM9E,QACpDiX,GACf7X,KAAK+X,uBAAuBV,gBACXrX,KAAK0F,MAAM9E,OAAOiX,GAAc9W,OAG3CjB,UAAU+Q,EAAkBmH,EAClBH,GAChB,IAAII,GAAQ,EACZ,IAAK,MAAMnb,KAAQkb,EAAU,CAC3B,MAAME,EAAK9O,EAAA7K,yBAAyBsS,KAAY/T,KAC5CA,IAAS+a,GAMXK,EAAG9N,UAAU3F,IAAI,YACjBwT,GAAQ,GAERC,EAAG9N,UAAUC,OAAO,YAGnB4N,GACHpP,QAAQ1C,iBAAiBrJ,2BAA2Bkb,KAIhDlY,YAAY+Q,EAAkB9P,GACpCqM,EAAUsB,KAAMvM,IACd,MAAM+V,EAAK9O,EAAA7K,yBAAyBsS,KAAY1O,KAC5CpB,EAAM6B,QAAQT,IAAW,EAC3B+V,EAAG9N,UAAU3F,IAAI,SAEjByT,EAAG9N,UAAUC,OAAO,WAKnBvK,oBAAoBtC,GACzBqL,QAAQsP,OAAwB,IAAjB3a,EAAMyE,OAAc,yBAA0BzE,GAC7DwC,KAAK4X,SACL5X,KAAKmX,aAAa,kBAAmB3Z,EAAM,GAAI,aAC/CwC,KAAKmX,aAAa,kBAAmB3Z,EAAM,GAAI,aAC/CwC,KAAKmX,aAAa,kBAAmB3Z,EAAM,GAAI,aAG1CsC,kBAAkBtC,GACvBqL,QAAQsP,OAAwB,IAAjB3a,EAAMyE,OAAc,yBAA0BzE,GAC7DwC,KAAK4X,SACL5X,KAAKmX,aAAa,YAAa3Z,EAAM,GAAI,qBACzCwC,KAAKmX,aAAa,YAAa3Z,EAAM,GAAI,qBACzCwC,KAAKmX,aAAa,YAAa3Z,EAAM,GAAI,qBAGpCsC,aAAatC,GAAwBwC,KAAK8F,aAAetI,EAExDsC,aAAasY,EAA6Bf,EAC7BgB,GACnB,MAAMH,EAA0B,iBAAbE,EACfhP,EAAAvK,iCAAiCuZ,GACjCA,EACJf,EAAgC,iBAAbA,EAAyBjK,EAAUxK,QAAQyU,GAClB5L,EAAAlM,IAAI8X,EAAUjK,EAAUnL,QAMpE,MAAMqW,EAAetY,KAAKgX,eAAekB,GAEnCK,EAAeD,EADP7M,EAAA/L,iBAAiB2X,EAAWiB,EAAclL,EAAUnL,QAE5DuW,EAA8C,KAAxB,cAAdH,EAA4B,GAAK,GAAWjL,EAAUnL,OACpEiW,EAAGO,QAAQpB,SAAW,GAAKkB,EAC3BL,EAAGQ,MAAM3F,oBAAsByF,EAAOD,QAGhCzY,eAAeoY,GACrB,QAASA,EAAGO,QAAQpB,UAAY,GAG3BvX,UAAU6Y,GACf,SAASC,EAAUpa,EAAY2D,EACZ0W,GACK,iBAAX1W,EACTiH,EAAAtK,iBAAiBsK,EAAA7K,sBAAsBC,GAAK,kBAAmB2D,GACtD0W,EACTzP,EAAAtK,iBAAiBsK,EAAA7K,sBAAsBC,GAAK,kBAC3B,CAAC2D,EAAOuC,QAAQtB,OAAQjB,EAAOwC,QAAQxB,QAExDiG,EAAAtK,iBAAiBsK,EAAA7K,sBAAsBC,GAAK,kBAC3B,CAAC2D,EAAOuC,QAAQvB,MAAOhB,EAAOwC,QAAQvB,SAG3DwV,EAAU,YAAaD,EAAO5Q,UAAUpD,QAAQvB,QAChDwV,EAAU,wBAAyBD,EAAO5Q,UAAUpD,QAAQvB,QAC5DwV,EAAU,aAAcD,EAAO5Q,UAAUrD,QAAQvB,OACjDyV,EAAU,0BAA2BD,EAAO5Q,WAC5C6Q,EAAU,cAAeD,EAAO5Q,WAChC6Q,EAAU,uBAAwBD,EAAO5Q,WAAW,GACpD6Q,EAAU,YAAaD,EAAO/X,OAAO,IACrCgY,EAAU,YAAaD,EAAO/X,OAAO,IACrCgY,EAAU,YAAaD,EAAO/X,OAAO,IACrCgY,EAAU,cAAeD,EAAO9W,UAAUsB,OAGpCrD,SACN,SAASgZ,EAAMta,GACb4K,EAAA9J,cAAc8J,EAAA7K,sBAAsBC,GAAK,mBAE3Csa,EAAM,aACNA,EAAM,yBACNA,EAAM,cACNA,EAAM,2BACNA,EAAM,eACNA,EAAM,wBACNA,EAAM,aACNA,EAAM,aACNA,EAAM,aACNA,EAAM,kCC/0BV,IAAAC,EAUAC;;;;;;;;;;EAAAA,EAWC,oBAAAjO,cAAA/K,UANIK,KAFD0Y,EAAA,WACJ,OAOC,SAAAhO,EAAArM,GAID,IAGA6M,QAHA,IAAAvL,UAAA+K,GAGAQ,IAAA,SAAA9M,GACA,GAAA8M,EAAA0N,UAMA,OALAxa,EAAA,IAAA8M,EAAA2N,IAAAza,GAEA8M,EAAA4N,OAAAxL,MACApC,EAAA6N,UAEA3a,GAiBA,GAZA8M,EAAA3N,GAAA,6BACA2N,EAAA8N,MAAA,gCACA9N,EAAA+N,MAAA,+BACA/N,EAAAgO,MAAA,yBAGAhO,EAAA0N,YACAva,EAAA8a,mBACA9a,EAAA8a,gBAAAjO,EAAA3N,GAAA,OAAA6b,eAIAlO,EAAA0N,UAAA,SAGA1N,EAAAmO,IAAA,IAGAnO,EAAAoO,IAAA,SAAA7c,GACA,cAAA8c,EAAA9c,GAAAyO,EAAAmO,OAIAnO,EAAA1N,OAAA,SAAAf,GAEA,IAAA2B,EAAAC,EAAA8a,gBAAAxZ,KAAApC,GAAAd,GAKA,OAFA2B,EAAAY,aAAA,KAAAW,KAAA2Z,IAAA7c,IAEA2B,GAIA8M,EAAAsO,OAAA,WACA,IAAApd,EAAAqd,EAAAhc,EAAAvB,EAQA,IALAE,EAAA,GAAAsd,MAAArd,KAAAsd,WAGAF,EAAArd,EAAAwd,MAEA1d,EAAAE,EAAAwF,OAAA,EAA8B1F,GAAA,EAAQA,IACtC,GAAAE,EAAAF,GACA,IAAAuB,KAAAgc,EACArd,EAAAF,GAAA4B,UAAAL,GAAAgc,EAAAhc,GAGAyN,EAAAtH,KAAAsH,EAAAtH,IAAAiW,SACA3O,EAAAtH,IAAAiW,WAIA3O,EAAA4O,OAAA,SAAAC,GAEA,IAAAC,EAAA,mBAAAD,EAAAvc,OACAuc,EAAAvc,OACA,WACAmC,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAAuc,EAAAvc,UAeA,OAXAuc,EAAAF,UACAG,EAAAlc,UAAA,IAAAic,EAAAF,SAGAE,EAAAP,QACAtO,EAAAsO,OAAAQ,EAAAD,EAAAP,QAGAO,EAAAG,WACAhP,EAAAsO,OAAAO,EAAAI,QAAAjP,EAAAkP,UAAAL,EAAAG,WAEAF,GAIA9O,EAAAmP,MAAA,SAAAC,GAEA,OAAAA,EAGAA,EAAAC,SAAAD,EAAAC,WAOAnc,EADA,OAAAkc,EAAAlD,SACAkD,EAAAE,sBAAA9P,EAAA+P,WAAA,IAAAvP,EAAAwP,OAAA,IAAAxP,EAAA2N,IACA,kBAAAyB,EAAAlD,SACA,IAAAlM,EAAAyP,SAAA,UACA,kBAAAL,EAAAlD,SACA,IAAAlM,EAAAyP,SAAA,UACAzP,EAAAqO,EAAAe,EAAAlD,WACA,IAAAlM,EAAAqO,EAAAe,EAAAlD,YAEA,IAAAlM,EAAA0P,QAAAN,IAGAO,KAAAP,EAAAlD,SACAhZ,EAAAkc,OACAA,EAAAC,SAAAnc,EAGAA,aAAA8M,EAAA2N,KACAza,EAAA0c,YAAAC,OAGA3c,EAAA4c,QAAAC,KAAAC,MAAAZ,EAAAzb,aAAA,oBAEAT,GAhCA,KAMA,IAAAA,GA8BA8M,EAAA6N,QAAA,WAEA,IAAAoC,EAAA9c,EAAA+c,qBAAA,WACA9N,GAAA6N,EAAA,IAAAjQ,EAAA2N,IAAAsC,GAAAjQ,EAAAmP,MAAAhc,EAAAgd,iBAAAC,UAAA/N,KAAA,KAGArC,EAAA4N,OAAA,CACAqC,QAAA9c,EAAAgd,gBACA/N,OAAA+K,MAAA,oEAAuE/J,KAAA,qBAAAgM,KACvEiB,KAAAjO,EAAAkO,WAAAlB,KACA5L,KAAApB,EAAAoB,OAAA4L,KACAmB,OAAAvQ,EAAA1N,OAAA,SAIA0N,EAAA4N,OAAA,CACA2C,OAAAvQ,EAAA1N,OAAA,QAGAa,EAAA0M,iBAAA,8BACAG,EAAA4N,OAAAxL,MACApC,EAAA6N,YACC,GAGD7N,EAAAwQ,MAAA,CAEAC,cAAA,qDAGAC,IAAA,4CAGAC,IAAA,2BAGAC,UAAA,mBAGAC,WAAA,aAGAC,WAAA,MAGAC,MAAA,oBAGAC,MAAA,SAGAC,MAAA,gBAGAC,QAAA,WAGAC,SAAA,0CAGAC,UAAA,eAGAC,QAAA,wCAGAC,UAAA,SAKAC,OAAA,aAGAC,YAAA,iBAGAC,aAAA,gBAGAC,gBAAA,0DAGAC,KAAA,OAGA3R,EAAA4R,MAAA,CAEAjZ,IAAA,SAAAkZ,EAAAC,GACA,IAAA9gB,EACA+gB,EAAAF,EAAAnb,OACAxC,EAAA,GAEA,IAAAlD,EAAA,EAAeA,EAAA+gB,EAAQ/gB,IACvBkD,EAAAsG,KAAAsX,EAAAD,EAAA7gB,KAEA,OAAAkD,GAIA8d,OAAA,SAAAH,EAAAC,GACA,IAAA9gB,EACA+gB,EAAAF,EAAAnb,OACAxC,EAAA,GAEA,IAAAlD,EAAA,EAAeA,EAAA+gB,EAAQ/gB,IACvB8gB,EAAAD,EAAA7gB,KACAkD,EAAAsG,KAAAqX,EAAA7gB,IAEA,OAAAkD,GAIA+d,QAAA,SAAA3gB,GACA,OAAAA,EAAA,IAAA6W,KAAA+J,GAAA,KAIAC,QAAA,SAAArgB,GACA,WAAAA,EAAAqW,KAAA+J,GAAA,KAGAE,kBAAA,SAAAC,GACA,OAAA5d,KAAAud,OAAAK,EAAA,SAAA1F,GAA6C,OAAAA,aAAAnN,EAAA+P,eAK7CvP,EAAA5J,SAAA,CAEAkc,MAAA,CAEAC,eAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,kBAAA,QACAC,iBAAA,OACAC,KAAA,UACAC,OAAA,UACAC,QAAA,EAEAlW,EAAA,EACAyG,EAAA,EACA0B,GAAA,EACAC,GAAA,EAEAjC,MAAA,EACAD,OAAA,EAEAhR,EAAA,EACAihB,GAAA,EACAC,GAAA,EAEA/Z,OAAA,EACAga,eAAA,EACAC,aAAA,UAEAC,YAAA,GACAC,cAAA,+BACAC,cAAA,UAKArT,EAAAsT,MAAA,SAAAjK,GACA,IAAAkK,EAm+JA7C,EAh+JAjc,KAAA3C,EAAA,EACA2C,KAAA+e,EAAA,EACA/e,KAAA2C,EAAA,EAEAiS,IAGA,iBAAAA,EACArJ,EAAAwQ,MAAAQ,MAAAyC,KAAApK,IAEAkK,EAAAvT,EAAAwQ,MAAAG,IAAA+C,KAAArK,EAAAzV,QAAAoM,EAAAwQ,MAAAM,WAAA,KAGArc,KAAA3C,EAAA6hB,SAAAJ,EAAA,IACA9e,KAAA+e,EAAAG,SAAAJ,EAAA,IACA9e,KAAA2C,EAAAuc,SAAAJ,EAAA,KAEKvT,EAAAwQ,MAAAO,MAAA0C,KAAApK,KAELkK,EAAAvT,EAAAwQ,MAAAE,IAAAgD,KA88JA,IADAhD,EA78JArH,GA88JA3S,OACA,KACAga,EAAA/Q,UAAA,KAAA+Q,EAAA/Q,UAAA,KACA+Q,EAAA/Q,UAAA,KAAA+Q,EAAA/Q,UAAA,KACA+Q,EAAA/Q,UAAA,KAAA+Q,EAAA/Q,UAAA,MACA7F,KAAA,IAAA4W,GAh9JAjc,KAAA3C,EAAA6hB,SAAAJ,EAAA,OACA9e,KAAA+e,EAAAG,SAAAJ,EAAA,OACA9e,KAAA2C,EAAAuc,SAAAJ,EAAA,QAIG,iBAAAlK,IACH5U,KAAA3C,EAAAuX,EAAAvX,EACA2C,KAAA+e,EAAAnK,EAAAmK,EACA/e,KAAA2C,EAAAiS,EAAAjS,KAMA4I,EAAAsO,OAAAtO,EAAAsT,MAAA,CAEAM,SAAA,WACA,OAAAnf,KAAAof,SAGAA,MAAA,WACA,UACAC,EAAArf,KAAA3C,GACAgiB,EAAArf,KAAA+e,GACAM,EAAArf,KAAA2C,IAGA2c,MAAA,WACA,cAAAtf,KAAA3C,EAAA2C,KAAA+e,EAAA/e,KAAA2C,GAAA0C,OAAA,KAGAka,WAAA,WACA,OAAAvf,KAAA3C,EAAA,OACA2C,KAAA+e,EAAA,QACA/e,KAAA2C,EAAA,SAGA6c,MAAA,SAAA5K,GAGA,OAFA5U,KAAAyf,YAAA,IAAAlU,EAAAsT,MAAAjK,GAEA5U,MAGA0f,GAAA,SAAAC,GAEA,OAAA3f,KAAAyf,aAGAE,IAAA,IAAAA,EAAA,IAAAA,EAGA,IAAApU,EAAAsT,MAAA,CACAxhB,KAAA2C,KAAA3C,GAAA2C,KAAAyf,YAAApiB,EAAA2C,KAAA3C,GAAAsiB,GACAZ,KAAA/e,KAAA+e,GAAA/e,KAAAyf,YAAAV,EAAA/e,KAAA+e,GAAAY,GACAhd,KAAA3C,KAAA2C,GAAA3C,KAAAyf,YAAA9c,EAAA3C,KAAA2C,GAAAgd,MATA3f,QAkBAuL,EAAAsT,MAAAG,KAAA,SAAApK,GAEA,OADAA,GAAA,GACArJ,EAAAwQ,MAAAO,MAAA0C,KAAApK,IACArJ,EAAAwQ,MAAAQ,MAAAyC,KAAApK,IAIArJ,EAAAsT,MAAAtC,MAAA,SAAA3H,GACA,OAAAA,GAAA,iBAAAA,EAAAvX,GACA,iBAAAuX,EAAAmK,GACA,iBAAAnK,EAAAjS,GAIA4I,EAAAsT,MAAAe,QAAA,SAAAhL,GACA,OAAArJ,EAAAsT,MAAAtC,MAAA3H,IAAArJ,EAAAsT,MAAAG,KAAApK,IAGArJ,EAAA9F,MAAA,SAAA2X,EAAAyC,GAIA,IAHAzC,MAAA,IAAA0C,WAGA7d,QAAA4d,IACAzC,EAAAyC,EAAAC,WAGA9f,KAAAxC,MAAAwC,KAAAub,MAAA6B,IAGA7R,EAAAsO,OAAAtO,EAAA9F,MAAA,CAEA+Z,MAAA,SAAApC,GAIA,GAHApd,KAAAyf,YAAAzf,KAAAub,MAAA6B,GAGApd,KAAAxC,MAAAyE,QAAAjC,KAAAyf,YAAAxd,OAAA,CAIA,IAHA,IAAA8d,EAAA/f,KAAAxC,MAAAwC,KAAAxC,MAAAyE,OAAA,GACA+d,EAAAhgB,KAAAyf,YAAAzf,KAAAyf,YAAAxd,OAAA,GAEAjC,KAAAxC,MAAAyE,OAAAjC,KAAAyf,YAAAxd,QACAjC,KAAAyf,YAAA1Z,KAAAia,GACA,KAAAhgB,KAAAxC,MAAAyE,OAAAjC,KAAAyf,YAAAxd,QACAjC,KAAAxC,MAAAuI,KAAAga,GAGA,OAAA/f,MAGAigB,OAAA,WAEA,QAAA1jB,EAAA,EAAA+gB,EAAAtd,KAAAxC,MAAAyE,OAAAie,EAAA,GAAsD3jB,EAAA+gB,EAAQ/gB,KAC9D,GAAA2jB,EAAAtd,QAAA5C,KAAAxC,MAAAjB,KACA2jB,EAAAna,KAAA/F,KAAAxC,MAAAjB,IAGA,OAAAyD,KAAAxC,MAAA0iB,GAGAR,GAAA,SAAAC,GAEA,IAAA3f,KAAAyf,YAAA,OAAAzf,KAGA,QAAAzD,EAAA,EAAA+gB,EAAAtd,KAAAxC,MAAAyE,OAAAmb,EAAA,GAAuD7gB,EAAA+gB,EAAQ/gB,IAC/D6gB,EAAArX,KAAA/F,KAAAxC,MAAAjB,IAAAyD,KAAAyf,YAAAljB,GAAAyD,KAAAxC,MAAAjB,IAAAojB,GAEA,WAAApU,EAAA9F,MAAA2X,IAGA+B,SAAA,WACA,OAAAnf,KAAAxC,MAAA6H,KAAA,MAGAya,QAAA,WACA,OAAA9f,KAAAxC,OAGA+d,MAAA,SAAA6B,GAIA,OAHAA,IAAA0C,UAGAra,MAAA0a,QAAA/C,KAEApd,KAAAgF,MAAAoY,IAGApY,MAAA,SAAAjD,GACA,OAAAA,EAAAqe,OAAApb,MAAAuG,EAAAwQ,MAAAc,WAAA3Y,IAAAmc,aAGAC,QAAA,WAGA,OAFAtgB,KAAAxC,MAAA8iB,UAEAtgB,MAEAugB,MAAA,WACA,IAAAA,EAAA,IAAAvgB,KAAAsa,YAEA,OADAiG,EAAA/iB,MAwwJA,SAAAgjB,EAAAC,GAEA,IADA,IAAAF,EAAAE,EAAA1G,MAAA,GACAxd,EAAAgkB,EAAAte,OAA2B1F,KAC3BkJ,MAAA0a,QAAAI,EAAAhkB,MACAgkB,EAAAhkB,GAAAikB,EAAAD,EAAAhkB,KAGA,OAAAgkB,EA/wJAC,CAAAxgB,KAAAxC,OACA+iB,KAIAhV,EAAAmV,WAAA,SAAAtD,EAAAyC,GACAtU,EAAA9F,MAAA/I,KAAAsD,KAAAod,EAAAyC,GAAA,UAIAtU,EAAAmV,WAAAviB,UAAA,IAAAoN,EAAA9F,MACA8F,EAAAmV,WAAAviB,UAAAmc,YAAA/O,EAAAmV,WAEAnV,EAAAsO,OAAAtO,EAAAmV,WAAA,CAEAvB,SAAA,WAEA,QAAA5iB,EAAA,EAAA+gB,EAAAtd,KAAAxC,MAAAyE,OAAAmb,EAAA,GAAuD7gB,EAAA+gB,EAAQ/gB,IAC/D6gB,EAAArX,KAAA/F,KAAAxC,MAAAjB,GAAA8I,KAAA,MAEA,OAAA+X,EAAA/X,KAAA,MAGAsb,OAAA,WACA,OACAC,GAAA5gB,KAAAxC,MAAA,MACAqjB,GAAA7gB,KAAAxC,MAAA,MACAuU,GAAA/R,KAAAxC,MAAA,MACA+T,GAAAvR,KAAAxC,MAAA,QAIAkiB,GAAA,SAAAC,GAEA,IAAA3f,KAAAyf,YAAA,OAAAzf,KAGA,QAAAzD,EAAA,EAAA+gB,EAAAtd,KAAAxC,MAAAyE,OAAAmb,EAAA,GAAuD7gB,EAAA+gB,EAAQ/gB,IAC/D6gB,EAAArX,KAAA,CACA/F,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAyf,YAAAljB,GAAA,GAAAyD,KAAAxC,MAAAjB,GAAA,IAAAojB,EACA3f,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAyf,YAAAljB,GAAA,GAAAyD,KAAAxC,MAAAjB,GAAA,IAAAojB,IAGA,WAAApU,EAAAmV,WAAAtD,IAGA7B,MAAA,SAAA6B,GACA,IAAA0D,EAAA,GAKA,GAHA1D,IAAA0C,UAGAra,MAAA0a,QAAA/C,GAAA,CAEA,GAAA3X,MAAA0a,QAAA/C,EAAA,IAEA,OAAAA,EAAAlZ,IAAA,SAAAgU,GAAwC,OAAAA,EAAA6B,UACjC,SAAAqD,EAAA,GAAAjV,EAEP,OAAAiV,EAAAlZ,IAAA,SAAAgU,GAAwC,OAAAA,EAAA/P,EAAA+P,EAAAtJ,UAIxCwO,IAAAgD,OAAApb,MAAAuG,EAAAwQ,MAAAc,WAAA3Y,IAAAmc,YAKAjD,EAAAnb,OAAA,MAAAmb,EAAAnD,MAGA,QAAA1d,EAAA,EAAAuG,EAAAsa,EAAAnb,OAAsC1F,EAAAuG,EAASvG,GAAA,EAC/CukB,EAAA/a,KAAA,CAAAqX,EAAA7gB,GAAA6gB,EAAA7gB,EAAA,KAEA,OAAAukB,GAGAC,KAAA,SAAA5Y,EAAAyG,GACA,IAAAoS,EAAAhhB,KAAAihB,OAOA,GAJA9Y,GAAA6Y,EAAA7Y,EACAyG,GAAAoS,EAAApS,GAGAsS,MAAA/Y,KAAA+Y,MAAAtS,GACA,QAAArS,EAAAyD,KAAAxC,MAAAyE,OAAA,EAAyC1F,GAAA,EAAQA,IACjDyD,KAAAxC,MAAAjB,GAAA,CAAAyD,KAAAxC,MAAAjB,GAAA,GAAA4L,EAAAnI,KAAAxC,MAAAjB,GAAA,GAAAqS,GAEA,OAAA5O,MAGA4N,KAAA,SAAAU,EAAAD,GACA,IAAA9R,EAAAykB,EAAAhhB,KAAAihB,OAGA,IAAA1kB,EAAAyD,KAAAxC,MAAAyE,OAAA,EAAmC1F,GAAA,EAAQA,IAC3CykB,EAAA1S,QAAAtO,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,GACA6Y,EAAA3S,SAAArO,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,GAGA,OAAA5O,MAGAihB,KAAA,WAGA,OAFA1V,EAAA4N,OAAAyC,KAAAvc,aAAA,SAAAW,KAAAmf,YAEA5T,EAAA4N,OAAAyC,KAAAuF,aA0DA,IAtDA,IAAAC,EAAA,CACAlS,EAAA,SAAAtS,EAAAyB,EAAAgjB,GAIA,OAHAhjB,EAAA8J,EAAAkZ,EAAAlZ,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAyS,EAAAzS,EAAAhS,EAAA,GAEA,KAAAyB,EAAA8J,EAAA9J,EAAAuQ,IAEAO,EAAA,SAAAvS,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,KAEA+V,EAAA,SAAA/V,EAAAyB,GAEA,OADAA,EAAA8J,EAAAvL,EAAA,GACA,KAAAA,EAAA,KAEAuE,EAAA,SAAAvE,EAAAyB,GAEA,OADAA,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,KAEA8E,EAAA,SAAA9E,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA0kB,EAAA,SAAA1kB,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA2kB,EAAA,SAAA3kB,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEA4kB,EAAA,SAAA5kB,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,KAEA6kB,EAAA,SAAA7kB,EAAAyB,EAAAgjB,GAGA,OAFAhjB,EAAA8J,EAAAkZ,EAAAlZ,EACA9J,EAAAuQ,EAAAyS,EAAAzS,EACA,OAEApN,EAAA,SAAA5E,EAAAyB,GAGA,OAFAA,EAAA8J,EAAAvL,EAAA,GACAyB,EAAAuQ,EAAAhS,EAAA,GACA,KAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAIA8kB,EAAA,aAAA1c,MAAA,IAEAzI,EAAA,EAAA+gB,EAAAoE,EAAAzf,OAAqC1F,EAAA+gB,IAAQ/gB,EAC7C6kB,EAAAM,EAAAnlB,IAAA,SAAAA,GACA,gBAAAK,EAAAyB,EAAAgjB,GACA,QAAA9kB,EAAAK,EAAA,GAAAA,EAAA,GAAAyB,EAAA8J,OACA,QAAA5L,EAAAK,EAAA,GAAAA,EAAA,GAAAyB,EAAAuQ,OACA,QAAArS,EACAK,EAAA,GAAAA,EAAA,GAAAyB,EAAA8J,EACAvL,EAAA,GAAAA,EAAA,GAAAyB,EAAAuQ,OAGA,QAAAzJ,EAAA,EAAAwc,EAAA/kB,EAAAqF,OAAqCkD,EAAAwc,IAAQxc,EAC7CvI,EAAAuI,GAAAvI,EAAAuI,MAAA,EAAA9G,EAAAuQ,EAAAvQ,EAAA8J,GAGA,OAAAiZ,EAAA7kB,GAAAK,EAAAyB,EAAAgjB,IAbA,CAeGK,EAAAnlB,GAAAyF,eAIHuJ,EAAAqW,UAAA,SAAAxE,EAAAyC,GACAtU,EAAA9F,MAAA/I,KAAAsD,KAAAod,EAAAyC,GAAA,cAIAtU,EAAAqW,UAAAzjB,UAAA,IAAAoN,EAAA9F,MACA8F,EAAAqW,UAAAzjB,UAAAmc,YAAA/O,EAAAqW,UAEArW,EAAAsO,OAAAtO,EAAAqW,UAAA,CAEAzC,SAAA,WACA,OAiqJA,SAAA3f,GACA,QAAAjD,EAAA,EAAA+gB,EAAA9d,EAAAyC,OAAA3D,EAAA,GAAwC/B,EAAA+gB,EAAQ/gB,IAChD+B,GAAAkB,EAAAjD,GAAA,GAEA,MAAAiD,EAAAjD,GAAA,KACA+B,GAAAkB,EAAAjD,GAAA,GAEA,MAAAiD,EAAAjD,GAAA,KACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,GAEA,MAAAiD,EAAAjD,GAAA,KACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,GACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,GAEA,MAAAiD,EAAAjD,GAAA,KACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,GACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,GAEA,MAAAiD,EAAAjD,GAAA,KACA+B,GAAA,IACAA,GAAAkB,EAAAjD,GAAA,QAQA,OAAA+B,EAAA,IAlsJAujB,CAAA7hB,KAAAxC,QAGAujB,KAAA,SAAA5Y,EAAAyG,GAEA,IAAAoS,EAAAhhB,KAAAihB,OAMA,GAHA9Y,GAAA6Y,EAAA7Y,EACAyG,GAAAoS,EAAApS,GAEAsS,MAAA/Y,KAAA+Y,MAAAtS,GAEA,QAAApS,EAAAD,EAAAyD,KAAAxC,MAAAyE,OAAA,EAA4C1F,GAAA,EAAQA,IAGpD,MAFAC,EAAAwD,KAAAxC,MAAAjB,GAAA,KAEA,KAAAC,GAAA,KAAAA,GACAwD,KAAAxC,MAAAjB,GAAA,IAAA4L,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAqS,GAES,KAAApS,EACTwD,KAAAxC,MAAAjB,GAAA,IAAA4L,EAES,KAAA3L,EACTwD,KAAAxC,MAAAjB,GAAA,IAAAqS,EAES,KAAApS,GAAA,KAAAA,GAAA,KAAAA,GACTwD,KAAAxC,MAAAjB,GAAA,IAAA4L,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAqS,EACA5O,KAAAxC,MAAAjB,GAAA,IAAA4L,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAqS,EAEA,KAAApS,IACAwD,KAAAxC,MAAAjB,GAAA,IAAA4L,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAqS,IAGS,KAAApS,IACTwD,KAAAxC,MAAAjB,GAAA,IAAA4L,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAqS,GAMA,OAAA5O,MAGA4N,KAAA,SAAAU,EAAAD,GAEA,IAAA9R,EAAAC,EAAAwkB,EAAAhhB,KAAAihB,OAGA,IAAA1kB,EAAAyD,KAAAxC,MAAAyE,OAAA,EAAmC1F,GAAA,EAAQA,IAG3C,MAFAC,EAAAwD,KAAAxC,MAAAjB,GAAA,KAEA,KAAAC,GAAA,KAAAA,GACAwD,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,GAEO,KAAApS,EACPwD,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EAEO,KAAA3L,EACPwD,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,EAEO,KAAApS,GAAA,KAAAA,GAAA,KAAAA,GACPwD,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,EACA5O,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,EAEA,KAAApS,IACAwD,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,IAGO,KAAApS,IAEPwD,KAAAxC,MAAAjB,GAAA,GAAAyD,KAAAxC,MAAAjB,GAAA,GAAA+R,EAAA0S,EAAA1S,MACAtO,KAAAxC,MAAAjB,GAAA,GAAAyD,KAAAxC,MAAAjB,GAAA,GAAA8R,EAAA2S,EAAA3S,OAGArO,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAA7Y,GAAAmG,EAAA0S,EAAA1S,MAAA0S,EAAA7Y,EACAnI,KAAAxC,MAAAjB,GAAA,IAAAyD,KAAAxC,MAAAjB,GAAA,GAAAykB,EAAApS,GAAAP,EAAA2S,EAAA3S,OAAA2S,EAAApS,GAKA,OAAA5O,MAGA8hB,cAAA,SAAAC,GACA,IAAAxlB,EAAA+gB,EAAAwE,EAKA,IAHAC,EAAA,IAAAxW,EAAAqW,UAAAG,GAEAD,EAAA9hB,KAAAxC,MAAAyE,SAAA8f,EAAAvkB,MAAAyE,OACA1F,EAAA,EAAA+gB,EAAAtd,KAAAxC,MAAAyE,OAAsC6f,GAAAvlB,EAAA+gB,EAAyB/gB,IAC/DulB,EAAA9hB,KAAAxC,MAAAjB,GAAA,KAAAwlB,EAAAvkB,MAAAjB,GAAA,GAGA,OAAAulB,GAGAtC,MAAA,SAAAuC,GASA,OARAA,EAAA,IAAAxW,EAAAqW,UAAAG,GAEA/hB,KAAA8hB,cAAAC,GACA/hB,KAAAyf,YAAAsC,EAEA/hB,KAAAyf,YAAA,KAGAzf,MAGA0f,GAAA,SAAAC,GAEA,IAAA3f,KAAAyf,YAAA,OAAAzf,KAEA,IAGAzD,EAAA+gB,EAAAnY,EAAAwc,EAHAK,EAAAhiB,KAAAxC,MACAykB,EAAAjiB,KAAAyf,YAAAjiB,MACA4f,EAAA,GAAA2E,EAAA,IAAAxW,EAAAqW,UAKA,IAAArlB,EAAA,EAAA+gB,EAAA0E,EAAA/f,OAAwC1F,EAAA+gB,EAAQ/gB,IAAA,CAEhD,IADA6gB,EAAA7gB,GAAA,CAAAylB,EAAAzlB,GAAA,IACA4I,EAAA,EAAAwc,EAAAK,EAAAzlB,GAAA0F,OAA4CkD,EAAAwc,EAAQxc,IACpDiY,EAAA7gB,GAAA4I,GAAA6c,EAAAzlB,GAAA4I,IAAA8c,EAAA1lB,GAAA4I,GAAA6c,EAAAzlB,GAAA4I,IAAAwa,EAOA,MAAAvC,EAAA7gB,GAAA,KACA6gB,EAAA7gB,GAAA,QAAA6gB,EAAA7gB,GAAA,IACA6gB,EAAA7gB,GAAA,QAAA6gB,EAAA7gB,GAAA,KAMA,OADAwlB,EAAAvkB,MAAA4f,EACA2E,GAGAxG,MAAA,SAAA6B,GAEA,GAAAA,aAAA7R,EAAAqW,UAAA,OAAAxE,EAAA0C,UAGA,IAAAxhB,EAGA4jB,EAAA,CAAoBhT,EAAA,EAAAC,EAAA,EAAAwD,EAAA,EAAAxR,EAAA,EAAAO,EAAA,EAAA4f,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAhgB,EAAA,EAAAigB,EAAA,GAIpBrE,EAFA,iBAAAA,EAEAA,EACAje,QAAAoM,EAAAwQ,MAAAkB,gBAAAkF,GACAhjB,QAAAoM,EAAAwQ,MAAAgB,YAAA,QACA5d,QAAAoM,EAAAwQ,MAAAe,OAAA,QACAsD,OACApb,MAAAuG,EAAAwQ,MAAAc,WAGAO,EAAAgF,OAAA,SAAAC,EAAAC,GACA,SAAAC,OAAA7lB,KAAA2lB,EAAAC,IACO,IAIP,IAAA7B,EAAA,GACApiB,EAAA,IAAAkN,EAAAiX,MACAnB,EAAA,IAAA9V,EAAAiX,MACAjgB,EAAA,EACAO,EAAAsa,EAAAnb,OAEA,GAEAsJ,EAAAwQ,MAAAiB,aAAAgC,KAAA5B,EAAA7a,KACAjE,EAAA8e,EAAA7a,KACAA,GAEO,KAAAjE,EACPA,EAAA,IACO,KAAAA,IACPA,EAAA,KAGAmiB,EAAA1a,KAAAqb,EAAA9iB,GAAA5B,KAAA,KACA0gB,EAAArD,MAAAxX,KAAA2f,EAAA5jB,EAAA0D,gBAAAkC,IAAAmc,YACAhiB,EAAAgjB,UAIKve,EAAAP,GAEL,OAAAke,GAIAQ,KAAA,WAGA,OAFA1V,EAAA4N,OAAApK,KAAA1P,aAAA,IAAAW,KAAAmf,YAEA5T,EAAA4N,OAAApK,KAAAoS,aAMA5V,EAAAkX,OAAAlX,EAAA4O,OAAA,CAEAtc,OAAA,SAAAL,EAAAklB,GAEA1iB,KAAAxC,MAAA,EACAwC,KAAA0iB,QAAA,GAGA,iBAAAllB,EAEAwC,KAAAxC,MAAA0jB,MAAA1jB,GAAA,EAAAmlB,SAAAnlB,OAAA,eAEK,iBAAAA,GACLklB,EAAAllB,EAAAshB,MAAAvT,EAAAwQ,MAAAC,kBAIAhc,KAAAxC,MAAA6iB,WAAAqC,EAAA,IAGA,KAAAA,EAAA,GACA1iB,KAAAxC,OAAA,IACA,KAAAklB,EAAA,KACA1iB,KAAAxC,OAAA,KAGAwC,KAAA0iB,OAAA,IAIAllB,aAAA+N,EAAAkX,SACAziB,KAAAxC,QAAAsiB,UACA9f,KAAA0iB,KAAAllB,EAAAklB,OAMA7I,OAAA,CAEAsF,SAAA,WACA,OACA,KAAAnf,KAAA0iB,QACA,IAAA1iB,KAAAxC,OAAA,IACA,KAAAwC,KAAA0iB,KACA1iB,KAAAxC,MAAA,IACAwC,KAAAxC,OACAwC,KAAA0iB,MAEAE,OAAA,WACA,OAAA5iB,KAAAmf,YAGAW,QAAA,WACA,OAAA9f,KAAAxC,OAGAqlB,KAAA,SAAAC,GAEA,OADAA,EAAA,IAAAvX,EAAAkX,OAAAK,GACA,IAAAvX,EAAAkX,OAAAziB,KAAA8iB,EAAA9iB,KAAA0iB,MAAAI,EAAAJ,OAGAK,MAAA,SAAAD,GAEA,OADAA,EAAA,IAAAvX,EAAAkX,OAAAK,GACA,IAAAvX,EAAAkX,OAAAziB,KAAA8iB,EAAA9iB,KAAA0iB,MAAAI,EAAAJ,OAGAM,MAAA,SAAAF,GAEA,OADAA,EAAA,IAAAvX,EAAAkX,OAAAK,GACA,IAAAvX,EAAAkX,OAAAziB,KAAA8iB,EAAA9iB,KAAA0iB,MAAAI,EAAAJ,OAGAO,OAAA,SAAAH,GAEA,OADAA,EAAA,IAAAvX,EAAAkX,OAAAK,GACA,IAAAvX,EAAAkX,OAAAziB,KAAA8iB,EAAA9iB,KAAA0iB,MAAAI,EAAAJ,OAGAQ,GAAA,SAAAR,GACA,IAAAI,EAAA,IAAAvX,EAAAkX,OAAAziB,MAKA,MAHA,iBAAA0iB,IACAI,EAAAJ,QAEAI,GAGAtD,MAAA,SAAAsD,GAOA,OANA9iB,KAAAyf,YAAA,IAAAlU,EAAAkX,OAAAK,GAEAA,EAAAK,WACAnjB,KAAAyf,YAAAjiB,OAAAwC,KAAAxC,OAGAwC,MAGA0f,GAAA,SAAAC,GAEA,OAAA3f,KAAAyf,YAGA,IAAAlU,EAAAkX,OAAAziB,KAAAyf,aACAsD,MAAA/iB,MACAgjB,MAAArD,GACAkD,KAAA7iB,MANAA,SAaAuL,EAAA0P,QAAA1P,EAAA4O,OAAA,CAEAtc,OAAA,SAAA8c,GAEA3a,KAAAojB,QAAA7X,EAAA5J,SAAAkc,MAAAO,OACApe,KAAAqjB,OAAA,KACArjB,KAAAsjB,QAAA,GAGAtjB,KAAAujB,IAAA,IAGAvjB,KAAA2a,UACA3a,KAAAkb,KAAAP,EAAAlD,SACAzX,KAAA2a,KAAAC,SAAA5a,KACAA,KAAAsjB,QAAA3I,EAAA2I,SAAA,GAGAtjB,KAAAojB,QAAAzI,EAAAzb,aAAA,WAAAc,KAAAojB,UAKAvJ,OAAA,CAEA1R,EAAA,SAAAA,GACA,OAAAnI,KAAA2O,KAAA,IAAAxG,IAGAyG,EAAA,SAAAA,GACA,OAAA5O,KAAA2O,KAAA,IAAAC,IAGA0B,GAAA,SAAAnI,GACA,aAAAA,EAAAnI,KAAAmI,IAAAnI,KAAAsO,QAAA,EAAAtO,KAAAmI,IAAAnI,KAAAsO,QAAA,IAGAiC,GAAA,SAAA3B,GACA,aAAAA,EAAA5O,KAAA4O,IAAA5O,KAAAqO,SAAA,EAAArO,KAAA4O,IAAA5O,KAAAqO,SAAA,IAGA0S,KAAA,SAAA5Y,EAAAyG,GACA,OAAA5O,KAAAmI,KAAAyG,MAGAyB,OAAA,SAAAlI,EAAAyG,GACA,OAAA5O,KAAAsQ,GAAAnI,GAAAoI,GAAA3B,IAGAN,MAAA,SAAAA,GACA,OAAAtO,KAAA2O,KAAA,QAAAL,IAGAD,OAAA,SAAAA,GACA,OAAArO,KAAA2O,KAAA,SAAAN,IAGAT,KAAA,SAAAU,EAAAD,GACA,IAAAhQ,EAAAmlB,EAAAxjB,KAAAsO,EAAAD,GAEA,OAAArO,KACAsO,MAAA,IAAA/C,EAAAkX,OAAApkB,EAAAiQ,QACAD,OAAA,IAAA9C,EAAAkX,OAAApkB,EAAAgQ,UAGAkS,MAAA,SAAA/F,GAEAxa,KAAAyjB,iBAGA,IAAAlD,EAAAmD,EAAA1jB,KAAA2a,KAAAgJ,WAAA,IAMA,OAHAnJ,IAAA/V,IAAA8b,GACAvgB,KAAA4jB,MAAArD,GAEAA,GAGAlW,OAAA,WAIA,OAHArK,KAAAwa,UACAxa,KAAAwa,SAAAqJ,cAAA7jB,MAEAA,MAGAb,QAAA,SAAAV,GAGA,OAFAuB,KAAA4jB,MAAAnlB,GAAA4L,SAEA5L,GAGAqlB,MAAA,SAAAtJ,GACA,OAAAA,EAAAuJ,IAAA/jB,OAGAgkB,MAAA,SAAAxJ,GACA,OAAAA,EAAA/V,IAAAzE,OAGAxB,GAAA,SAAAA,GACA,OAAAwB,KAAA2O,KAAA,KAAAnQ,IAGAylB,OAAA,SAAA9b,EAAAyG,GACA,IAAAoS,EAAAhhB,KAAAihB,OAEA,OAAA9Y,EAAA6Y,EAAA7Y,GACAyG,EAAAoS,EAAApS,GACAzG,EAAA6Y,EAAA7Y,EAAA6Y,EAAA1S,OACAM,EAAAoS,EAAApS,EAAAoS,EAAA3S,QAGA6V,KAAA,WACA,OAAAlkB,KAAA0Y,MAAA,eAGAyL,KAAA,WACA,OAAAnkB,KAAA0Y,MAAA,mBAGA0L,QAAA,WACA,cAAApkB,KAAA0Y,MAAA,YAGAyG,SAAA,WACA,OAAAnf,KAAA2O,KAAA,OAGA0V,QAAA,WACA,IAAA1V,EAAA3O,KAAA2O,KAAA,SAEA,aAAAA,EAAA,GAAAA,EAAAyR,OAAApb,MAAAuG,EAAAwQ,MAAAc,YAGAyH,SAAA,SAAAxnB,GACA,UAAAkD,KAAAqkB,UAAAzhB,QAAA9F,IAGAgS,SAAA,SAAAhS,GACA,IAAAkD,KAAAskB,SAAAxnB,GAAA,CACA,IAAAsgB,EAAApd,KAAAqkB,UACAjH,EAAArX,KAAAjJ,GACAkD,KAAA2O,KAAA,QAAAyO,EAAA/X,KAAA,MAGA,OAAArF,MAGAukB,YAAA,SAAAznB,GAOA,OANAkD,KAAAskB,SAAAxnB,IACAkD,KAAA2O,KAAA,QAAA3O,KAAAqkB,UAAA9G,OAAA,SAAA3gB,GACA,OAAAA,GAAAE,IACSuI,KAAA,MAGTrF,MAGAwkB,YAAA,SAAA1nB,GACA,OAAAkD,KAAAskB,SAAAxnB,GAAAkD,KAAAukB,YAAAznB,GAAAkD,KAAA8O,SAAAhS,IAGAqf,UAAA,SAAAxN,GACA,OAAApD,EAAAnO,IAAA4C,KAAA2O,UAGA6L,OAAA,SAAAU,GACA,IAAAV,EAAAxa,KAGA,IAAAwa,EAAAG,KAAAE,WAAA,YAKA,GAFAL,EAAAjP,EAAAmP,MAAAF,EAAAG,KAAAE,aAEAK,EAAA,OAAAV,EAGA,KAAAA,KAAAG,gBAAA5P,EAAA+P,YAAA,CACA,oBAAAI,EAAAV,EAAAiK,QAAAvJ,GAAAV,aAAAU,EAAA,OAAAV,EACA,IAAAA,EAAAG,KAAAE,YAAA,aAAAL,EAAAG,KAAAE,WAAApD,UAAA,sBAAA+C,EAAAG,KAAAE,WAAApD,SAAA,YACA+C,EAAAjP,EAAAmP,MAAAF,EAAAG,KAAAE,cAIA6J,IAAA,WACA,OAAA1kB,gBAAAuL,EAAA2N,IAAAlZ,UAAAwa,OAAAjP,EAAA2N,MAGAyL,QAAA,SAAAzJ,GACA,IAAAyJ,EAAA,GAAAnK,EAAAxa,KAEA,GAEA,KADAwa,WAAAU,MACAV,EAAAG,KAAA,MAEAgK,EAAA5e,KAAAyU,SACOA,UAEP,OAAAmK,GAGAF,QAAA,SAAAG,GACA,OAmkIA,SAAA1M,EAAA0M,GACA,OAAA1M,EAAAuM,SAAAvM,EAAA2M,iBAAA3M,EAAA4M,mBAAA5M,EAAA6M,oBAAA7M,EAAA8M,uBAAA9M,EAAA+M,kBAAAvoB,KAAAwb,EAAA0M,GApkIAH,CAAAzkB,KAAA2a,KAAAiK,IAGA9I,OAAA,WACA,OAAA9b,KAAA2a,MAGAjN,IAAA,SAAAA,GAEA,IAAAwX,EAAAxmB,EAAAymB,cAAA,OAGA,KAAAzX,GAAA1N,gBAAAuL,EAAA6Z,QAoBA,OATAF,EAAAG,YAAA3X,EAAAhP,EAAAymB,cAAA,QAGAnlB,KAAAyjB,iBAGA/V,EAAA2X,YAAArlB,KAAA2a,KAAAgJ,WAAA,IAGAuB,EAAAI,UAAAnmB,QAAA,aAAAA,QAAA,eAlBA+lB,EAAAI,UAAA,QAAA5X,EAAAvO,QAAA,SAAAA,QAAA,iDAGA,QAAA5C,EAAA,EAAA+gB,EAAA4H,EAAAK,WAAAC,WAAAvjB,OAA+D1F,EAAA+gB,EAAQ/gB,IACvEyD,KAAA2a,KAAA0K,YAAAH,EAAAK,uBAiBA,OAAAvlB,MAGAyjB,eAAA,WAGA,GAAAzjB,KAAA0O,MAAA1O,KAAAylB,MAAA,CACA,IAAAC,EAAA1lB,KAAA0O,KAAA1O,UAAAylB,QACAC,EAAAhX,KAAA,WACA1O,KAAAyjB,mBAUA,OALAzjB,KAAA2a,KAAAgL,gBAAA,cAEA1oB,OAAA4S,KAAA7P,KAAAujB,KAAAthB,QACAjC,KAAA2a,KAAAtb,aAAA,aAAAic,KAAAsK,UAAA5lB,KAAAujB,MAEAvjB,MAGAqb,QAAA,SAAAre,GAEA,OADAgD,KAAAujB,IAAAvmB,EACAgD,MAEA6lB,GAAA,SAAAC,GACA,OAggIA,SAAA5N,EAAA4N,GACA,OAAA5N,aAAA4N,EAjgIAD,CAAA7lB,KAAA8lB,OAKAva,EAAAwa,OAAA,CACAC,IAAA,SAAArG,GAAqB,OAAAA,GACrBsG,KAAA,SAAAtG,GAAqB,OAAAjM,KAAAwS,IAAAvG,EAAAjM,KAAA+J,IAAA,MACrB0I,IAAA,SAAAxG,GAAqB,OAAAjM,KAAA0S,IAAAzG,EAAAjM,KAAA+J,GAAA,IACrB4I,IAAA,SAAA1G,GAAqB,SAAAjM,KAAAwS,IAAAvG,EAAAjM,KAAA+J,GAAA,KAGrBlS,EAAAiU,MAAA,SAAAG,GACA,gBAAA2G,EAAApD,GACA,WAAA3X,EAAAgb,SAAAD,EAAApD,GAAAxD,GAAAC,KAIApU,EAAAib,UAAAjb,EAAA4O,OAAA,CAEAtc,OAAA,SAAAb,GACAgD,KAAAymB,MAAA,EACAzmB,KAAA0mB,UAAA,EACA1mB,KAAA2mB,WAAA,EAEA3mB,KAAA4mB,SAAA,IAAArb,EAAAkX,OAAAzlB,EAAA4pB,UAAA9G,UACA9f,KAAA6mB,MAAA,IAAAtb,EAAAkX,OAAAzlB,EAAA6pB,OAAA/G,UAEA9f,KAAAmS,OAAA,IAAA2U,KAAA9mB,KAAA6mB,MACA7mB,KAAA+mB,OAAA/mB,KAAAmS,MAAAnS,KAAA4mB,SACA5mB,KAAAgnB,KAAAhqB,EAAAgqB,KAIAhnB,KAAAinB,KAAA,EACAjnB,KAAAknB,OAAA,EAEAlnB,KAAAmnB,WAAA,GAKAnnB,KAAA6d,MAAA,GAKA7d,KAAAonB,OAAA,GAKApnB,KAAAoc,WAAA,GAKApc,KAAAqnB,KAAA,MAUA9b,EAAA+b,GAAA/b,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACAuB,KAAAunB,QAAA9oB,EACAuB,KAAAwnB,WAAA,GACAxnB,KAAAynB,QAAA,EACAznB,KAAA0nB,UAAA,KACA1nB,KAAA2nB,QAAA,EACA3nB,KAAA4nB,QAAA,EACA5nB,KAAA2f,IAAA,EAGA3f,KAAA6nB,OAAA,EACA7nB,KAAA8nB,OAAA,GAGAjO,OAAA,CASAkO,QAAA,SAAA/qB,EAAAgqB,EAAAH,GAEA,iBAAA7pB,IACAgqB,EAAAhqB,EAAAgqB,KACAH,EAAA7pB,EAAA6pB,MACA7pB,IAAA4pB,UAGA,IAAAc,EAAA,IAAAnc,EAAAib,UAAA,CACAI,SAAA5pB,GAAA,IACA6pB,SAAA,EACAG,KAAAzb,EAAAwa,OAAAiB,GAAA,MAAAA,IAKA,OAFAhnB,KAAAgoB,MAAAN,GAEA1nB,MAQA6mB,MAAA,SAAAA,GAGA,IAAAa,EAAA,IAAAnc,EAAAib,UAAA,CACAI,SAAAC,EACAA,MAAA,EACAG,KAAAzb,EAAAwa,OAAA,OAGA,OAAA/lB,KAAAgoB,MAAAN,IAQA5R,OAAA,SAAAA,GACA,OAAAA,gBAAAvK,EAAA0P,SACAjb,KAAAunB,QAAAzR,EACA9V,MAGAA,KAAAunB,SAIAU,aAAA,SAAAC,GACA,OAAAA,EAAAloB,KAAA0nB,UAAAvV,QAAAnS,KAAA0nB,UAAAd,SAAA5mB,KAAA8nB,SAIAK,aAAA,SAAAN,GACA,OAAA7nB,KAAA0nB,UAAAd,SAAA5mB,KAAA8nB,OAAAD,EAAA7nB,KAAA0nB,UAAAvV,OAIAiW,eAAA,WACApoB,KAAAqoB,gBACAroB,KAAAsoB,eAAAvd,EAAAwd,sBAAA,WAAoEvoB,KAAAiI,QAAclK,KAAAiC,QAIlFqoB,cAAA,WACAtd,EAAAyd,qBAAAxoB,KAAAsoB,iBAIAnW,MAAA,WAOA,OALAnS,KAAAynB,QAAAznB,KAAA0nB,YACA1nB,KAAAynB,QAAA,EACAznB,KAAAyoB,gBAGAzoB,MAIAyoB,aAAA,WAGA,OAFAzoB,KAAA0nB,UAAAvV,OAAA,IAAA2U,KAAA9mB,KAAA0nB,UAAAb,MAAA7mB,KAAA8nB,OACA9nB,KAAA0nB,UAAAX,OAAA/mB,KAAA0nB,UAAAvV,MAAAnS,KAAA0nB,UAAAd,SAAA5mB,KAAA8nB,OACA9nB,KAAA0oB,iBAAAzgB,QAQA+f,MAAA,SAAAtC,GAMA,OALA,mBAAAA,gBAAAna,EAAAib,YACAxmB,KAAAwnB,WAAAzhB,KAAA2f,GAEA1lB,KAAA0nB,YAAA1nB,KAAA0nB,UAAA1nB,KAAAwnB,WAAAmB,SAEA3oB,MAOA4oB,QAAA,WAgBA,OAdA5oB,KAAA6oB,OAGA7oB,KAAA0nB,UAAA1nB,KAAAwnB,WAAAmB,QAEA3oB,KAAA0nB,YACA1nB,KAAA0nB,qBAAAnc,EAAAib,UACAxmB,KAAAmS,QAGAnS,KAAA0nB,UAAAhrB,KAAAsD,OAIAA,MAKA0oB,eAAA,WACA,IAAAnsB,EAAA4I,EAAA2jB,EACAxqB,EAAA0B,KAAA0nB,UAEA,GAAAppB,EAAAmoB,KAAA,OAAAzmB,KAEA,IAAAzD,KAAA+B,EAAA6oB,WAeA,IAdA2B,EAAA9oB,KAAA8V,SAAAvZ,KAEAkJ,MAAA0a,QAAA2I,KACAA,EAAA,CAAAA,IAGArjB,MAAA0a,QAAA7hB,EAAA6oB,WAAA5qB,MACA+B,EAAA6oB,WAAA5qB,GAAA,CAAA+B,EAAA6oB,WAAA5qB,KAOA4I,EAAA2jB,EAAA7mB,OAA8BkD,KAG9B7G,EAAA6oB,WAAA5qB,GAAA4I,aAAAoG,EAAAkX,SACAqG,EAAA3jB,GAAA,IAAAoG,EAAAkX,OAAAqG,EAAA3jB,KAEA7G,EAAA6oB,WAAA5qB,GAAA4I,GAAA2jB,EAAA3jB,GAAAqa,MAAAlhB,EAAA6oB,WAAA5qB,GAAA4I,IAIA,IAAA5I,KAAA+B,EAAAuf,MACAvf,EAAAuf,MAAAthB,GAAA,IAAAgP,EAAAgb,SAAAvmB,KAAA8V,SAAAnH,KAAApS,GAAA+B,EAAAuf,MAAAthB,IAGA,IAAAA,KAAA+B,EAAA8oB,OACA9oB,EAAA8oB,OAAA7qB,GAAA,IAAAgP,EAAAgb,SAAAvmB,KAAA8V,SAAA4C,MAAAnc,GAAA+B,EAAA8oB,OAAA7qB,IAMA,OAHA+B,EAAAyqB,sBAAA/oB,KAAA8V,SAAAkT,YAEA1qB,EAAAmoB,MAAA,EACAzmB,MAEAipB,WAAA,WAEA,OADAjpB,KAAAwnB,WAAA,GACAxnB,MAEAkpB,aAAA,WAEA,OADAlpB,KAAA0nB,UAAA,KACA1nB,MAOA6oB,KAAA,SAAAM,EAAAF,GACA,IAAAxB,EAAAznB,KAAAynB,OAeA,OAdAznB,KAAAynB,QAAA,EAEAwB,GACAjpB,KAAAipB,aAGAE,GAAAnpB,KAAA0nB,aAEAD,GAAAznB,KAAAyoB,eACAzoB,KAAAopB,SAGAppB,KAAAqoB,gBAEAroB,KAAAkpB,gBAMAG,MAAA,WACA,GAAArpB,KAAA0nB,UAAA,CACA,IAAA4B,EAAAtpB,KAAA0nB,UACA1nB,KAAA6oB,OACA7oB,KAAA0nB,UAAA4B,EACAtpB,KAAAupB,UAEA,OAAAvpB,MAIA+mB,OAAA,WAIA,IAFA/mB,KAAA6oB,MAAA,MAEA7oB,KAAA4oB,UAAAlB,WAAA1nB,KAAA6oB,MAAA,QAIA,OAFA7oB,KAAAipB,aAAAC,eAEAlpB,MAIAupB,QAAA,WACA,OAAAvpB,KAAA0f,GAAA,OAIA0J,MAAA,WAMA,OALA,IAAAppB,KAAA0nB,UAAAR,QAEAlnB,KAAA0nB,UAAAR,MAAAlnB,KAAA0nB,UAAAT,KAAA,GAGA,iBAAAjnB,KAAA0nB,UAAAR,MAEAlnB,KAAA0f,GAAA1f,KAAA0nB,UAAAR,OAAA,GAGAlnB,KAAA0f,GAAA,OAMAA,GAAA,SAAAC,EAAA6J,GACA,IAAAC,EAAAzpB,KAAA0nB,UAAAd,SAAA5mB,KAAA8nB,OAYA,OAVA9nB,KAAA6nB,OAAAlI,EAEA6J,IACAxpB,KAAA0nB,UAAAhB,WAAA1mB,KAAA6nB,OAAA,EAAA7nB,KAAA6nB,QACA7nB,KAAA6nB,QAAA7nB,KAAA0nB,UAAAT,MAGAjnB,KAAA0nB,UAAAvV,OAAA,IAAA2U,KAAA9mB,KAAA6nB,OAAA4B,EACAzpB,KAAA0nB,UAAAX,OAAA/mB,KAAA0nB,UAAAvV,MAAAsX,EAEAzpB,KAAAiI,MAAA,IAQAyhB,MAAA,SAAAA,GACA,WAAAA,EAAA1pB,KAAA2pB,QAEAD,GACA1pB,KAAA8nB,OAAA4B,EAEA1pB,KAAA0f,GAAA1f,KAAA6nB,QAAA,IACO7nB,KAAA8nB,QAIPb,KAAA,SAAAjE,EAAA1C,GACA,IAAA1jB,EAAAoD,KAAA4pB,OAOA,OAJAhtB,EAAAsqB,MAAA,MAAAlE,KACApmB,EAAAqqB,KAAA,EAEA3G,IAAA1jB,EAAA+pB,WAAA,GACA3mB,MAIA2pB,MAAA,WAIA,OAHA3pB,KAAA2nB,QAAA,EACA3nB,KAAAqoB,gBAEAroB,MAIA6pB,KAAA,WACA,OAAA7pB,KAAA2nB,QACA3nB,KAAA2nB,QAAA,EAEA3nB,KAAA0f,GAAA1f,KAAA6nB,QAAA,IAHA7nB,MAYAsgB,QAAA,SAAAoG,GACA,IAAA9pB,EAAAoD,KAAA4pB,OAKA,OAHAhtB,EAAA8pB,cAAA,IAAAA,GAAA9pB,EAAA8pB,SACAA,EAEA1mB,MASA8pB,SAAA,SAAAC,GACA,OAAAA,EAAA/pB,KAAA0nB,UAAAV,KAAAhnB,KAAA2f,KAAA3f,KAAA2f,KAQAiE,MAAA,SAAA8B,GACA,IAAA9oB,EAAAoD,KAAA4pB,OAUA,OAFA5pB,KAAA8V,SAAAkU,GAAA,cAPA,SAAAC,EAAAllB,GACAA,EAAAmlB,OAAAxC,WAAA9qB,IACA8oB,EAAAhpB,KAAAsD,KAAApD,GACAoD,KAAAmqB,IAAA,cAAAF,MAMAjqB,KAAAoqB,cAIAC,OAAA,SAAA3E,GACA,IAAA9oB,EAAAoD,KAAA4pB,OACAK,EAAA,SAAAllB,GACAA,EAAAmlB,OAAAxC,WAAA9qB,GACA8oB,EAAAhpB,KAAAsD,KAAA+E,EAAAmlB,OAAAvK,IAAApU,EAAAiU,MAAAza,EAAAmlB,OAAAvK,KAAA5a,EAAAmlB,OAAAI,MAAA1tB,IAWA,OANAoD,KAAA8V,SAAAqU,IAAA,YAAAF,GAAAD,GAAA,YAAAC,GAEAjqB,KAAA4jB,MAAA,WACA5jB,KAAAmqB,IAAA,YAAAF,KAGAjqB,KAAAoqB,cAIAG,SAAA,SAAA7E,GACA,IAAAuE,EAAA,SAAAA,EAAAllB,GACA2gB,EAAAhpB,KAAAsD,MACAA,KAAAmqB,IAAA,iBAAAF,IAMA,OAFAjqB,KAAA8V,SAAAqU,IAAA,iBAAAF,GAAAD,GAAA,iBAAAC,GAEAjqB,KAAAoqB,cAIAI,UAAA,SAAA9E,GACA,IAAAuE,EAAA,SAAAllB,GACA2gB,EAAAhpB,KAAAsD,KAAA+E,EAAAmlB,OAAAvK,IAAApU,EAAAiU,MAAAza,EAAAmlB,OAAAvK,KAAA5a,EAAAmlB,OAAAI,MAAAvlB,EAAAmlB,OAAAxC,YASA,OANA1nB,KAAA8V,SAAAqU,IAAA,YAAAF,GAAAD,GAAA,YAAAC,GAEAjqB,KAAAuqB,SAAA,WACAvqB,KAAAmqB,IAAA,YAAAF,KAGAjqB,KAAAoqB,cAGAR,KAAA,WACA,OAAA5pB,KAAAwnB,WAAAvlB,OAAAjC,KAAAwnB,WAAAxnB,KAAAwnB,WAAAvlB,OAAA,GAAAjC,KAAA0nB,WAIAjjB,IAAA,SAAAgmB,EAAAC,EAAAxP,GAEA,OADAlb,KAAA4pB,OAAA1O,GAAA,cAAAuP,GAAAC,EACA1qB,KAAAoqB,cAOAniB,KAAA,SAAA0iB,GAOA,IAAA9C,EAAA+C,EAAAC,EAJAF,IAAA3qB,KAAA6nB,OAAA7nB,KAAAioB,cAAA,IAAAnB,QAGA,IAAA9mB,KAAA0nB,UAAAR,OAIAW,EAAAnU,KAAAoX,IAAA9qB,KAAA6nB,OAAA,GACA+C,EAAAlX,KAAAqX,MAAAlD,IAEA,IAAA7nB,KAAA0nB,UAAAR,OAAA0D,EAAA5qB,KAAA0nB,UAAAR,OACAlnB,KAAA2f,IAAAkI,EAAA+C,EACAC,EAAA7qB,KAAA0nB,UAAAT,KACAjnB,KAAA0nB,UAAAT,KAAA2D,IAEA5qB,KAAA6nB,OAAA7nB,KAAA0nB,UAAAR,MACAlnB,KAAA2f,IAAA,EAEAkL,EAAA7qB,KAAA0nB,UAAAT,KAAA,EACAjnB,KAAA0nB,UAAAT,KAAAjnB,KAAA0nB,UAAAR,OAGAlnB,KAAA0nB,UAAAf,YAEA3mB,KAAA0nB,UAAAhB,SAAA1mB,KAAA0nB,UAAAhB,UAAAsE,SAAAhrB,KAAA0nB,UAAAT,KAAA4D,GAAA,MAKA7qB,KAAA6nB,OAAAnU,KAAAuX,IAAAjrB,KAAA6nB,OAAA,GACA7nB,KAAA2f,IAAA3f,KAAA6nB,QAIA7nB,KAAA2f,IAAA,IAAA3f,KAAA2f,IAAA,GAEA3f,KAAA0nB,UAAAhB,WAAA1mB,KAAA2f,IAAA,EAAA3f,KAAA2f,KAIA,IAAA2K,EAAAtqB,KAAA0nB,UAAAV,KAAAhnB,KAAA2f,KAGA,QAAApjB,KAAAyD,KAAA0nB,UAAAL,KACA9qB,EAAAyD,KAAA4nB,SAAArrB,GAAA+tB,IACAtqB,KAAA0nB,UAAAL,KAAA9qB,GAAAG,KAAAsD,KAAA8V,SAAA9V,KAAA2f,IAAA2K,UACAtqB,KAAA0nB,UAAAL,KAAA9qB,IASA,OAJAyD,KAAAynB,QAAAznB,KAAA8V,SAAAoV,KAAA,UAAoDvL,IAAA3f,KAAA2f,IAAA2K,QAAAa,GAAAnrB,KAAA0nB,UAAA1nB,KAAA0nB,YAIpD1nB,KAAA0nB,WAKA1nB,KAAAorB,SAGA,GAAAprB,KAAA2f,MAAA3f,KAAA0nB,UAAAhB,UAAA1mB,KAAA0nB,UAAAhB,UAAA,GAAA1mB,KAAA2f,KAGA3f,KAAAqoB,gBAGAroB,KAAA8V,SAAAoV,KAAA,YAAwCC,GAAAnrB,KAAA0nB,UAAA1nB,KAAA0nB,YAExC1nB,KAAAwnB,WAAAvlB,SACAjC,KAAA8V,SAAAoV,KAAA,eAGAlrB,KAAAwnB,WAAAvlB,SACAjC,KAAA8V,SAAAqU,IAAA,OACAnqB,KAAAynB,QAAA,IAKAznB,KAAAynB,OAAAznB,KAAA4oB,UACA5oB,KAAAkpB,iBAEOlpB,KAAA2nB,QAAA3nB,KAAAynB,QAEPznB,KAAAooB,iBAIApoB,KAAA4nB,QAAA0C,EACAtqB,MApCAA,MAyCAorB,OAAA,WACA,IAAA7uB,EAAAuG,EAAA4c,EAAA2L,EAAArrB,KAAA8V,EAAA9V,KAAA8V,SAAAxX,EAAA0B,KAAA0nB,UAGA,IAAAnrB,KAAA+B,EAAA6oB,WAEAzH,EAAA,GAAA6C,OAAAjkB,EAAA6oB,WAAA5qB,IAAA2H,IAAA,SAAAgU,GACA,uBAAAA,KAAAwH,GAAAxH,EAAAwH,GAAAphB,EAAA0oB,KAAAqE,EAAA1L,KAAA0L,EAAA1L,KAAAzH,IAGApC,EAAAvZ,GAAA+uB,MAAAxV,EAAA4J,GAKA,IAAAnjB,KAAA+B,EAAAuf,MAEA6B,EAAA,CAAAnjB,GAAAgmB,OAAAjkB,EAAAuf,MAAAthB,IAAA2H,IAAA,SAAAgU,GACA,uBAAAA,KAAAwH,GAAAxH,EAAAwH,GAAAphB,EAAA0oB,KAAAqE,EAAA1L,KAAA0L,EAAA1L,KAAAzH,IAGApC,EAAAnH,KAAA2c,MAAAxV,EAAA4J,GAKA,IAAAnjB,KAAA+B,EAAA8oB,OAEA1H,EAAA,CAAAnjB,GAAAgmB,OAAAjkB,EAAA8oB,OAAA7qB,IAAA2H,IAAA,SAAAgU,GACA,uBAAAA,KAAAwH,GAAAxH,EAAAwH,GAAAphB,EAAA0oB,KAAAqE,EAAA1L,KAAA0L,EAAA1L,KAAAzH,IAGApC,EAAA4C,MAAA4S,MAAAxV,EAAA4J,GAKA,GAAAphB,EAAA8d,WAAAna,OAAA,CAIA,IADAyd,EAAAphB,EAAAyqB,sBACAxsB,EAAA,EAAAuG,EAAAxE,EAAA8d,WAAAna,OAA6C1F,EAAAuG,EAASvG,IAAA,CAGtD,IAAAiD,EAAAlB,EAAA8d,WAAA7f,GAGAiD,aAAA+L,EAAAggB,OAGA7L,EADAlgB,EAAA2jB,SACAzD,EAAA8L,UAAA,IAAAjgB,EAAAggB,QAAA/L,MAAAhgB,GAAAkgB,GAAAphB,EAAA0oB,KAAAhnB,KAAA2f,OAEAD,EAAAF,MAAAhgB,GAAAkgB,GAAAphB,EAAA0oB,KAAAhnB,KAAA2f,OAMAngB,EAAA2jB,UACA3jB,EAAAisB,KAAA/L,EAAAgM,WAGAhM,IAAA8L,SAAAhsB,EAAAkgB,GAAAphB,EAAA0oB,KAAAhnB,KAAA2f,QAKA7J,EAAA6V,OAAAjM,GAGA,OAAA1f,MAMAqnB,KAAA,SAAA1H,EAAA+F,EAAAkG,GACA,IAAAhvB,EAAAoD,KAAA4pB,OAKA,OAJAgC,IAAAjM,EAAA/iB,EAAAoqB,KAAArH,IAEA/iB,EAAAyqB,KAAA1H,GAAA+F,EAEA1lB,MAGAoqB,WAAA,WAEA,OADAyB,WAAA,WAA4B7rB,KAAAmS,SAAapU,KAAAiC,MAAA,GACzCA,OAKAwa,OAAAjP,EAAA0P,QAGAV,UAAA,CAEAwN,QAAA,SAAA/qB,EAAAgqB,EAAAH,GACA,OAAA7mB,KAAAmrB,KAAAnrB,KAAAmrB,GAAA,IAAA5f,EAAA+b,GAAAtnB,QAAA+nB,QAAA/qB,EAAAgqB,EAAAH,IAEAA,MAAA,SAAAA,GACA,OAAA7mB,KAAAmrB,KAAAnrB,KAAAmrB,GAAA,IAAA5f,EAAA+b,GAAAtnB,QAAA6mB,UAEAgC,KAAA,SAAAM,EAAAF,GAIA,OAHAjpB,KAAAmrB,IACAnrB,KAAAmrB,GAAAtC,KAAAM,EAAAF,GAEAjpB,MAEA+mB,OAAA,WAIA,OAHA/mB,KAAAmrB,IACAnrB,KAAAmrB,GAAApE,SAEA/mB,MAGA2pB,MAAA,WAIA,OAHA3pB,KAAAmrB,IACAnrB,KAAAmrB,GAAAxB,QAEA3pB,MAGA6pB,KAAA,WAIA,OAHA7pB,KAAAmrB,IACAnrB,KAAAmrB,GAAAtB,OAEA7pB,MAGA0pB,MAAA,SAAAA,GACA,GAAA1pB,KAAAmrB,GACA,UAAAzB,EACA,OAAA1pB,KAAAmrB,GAAAzB,QAEA1pB,KAAAmrB,GAAAzB,SAEA,OAAA1pB,SAOAuL,EAAAgb,SAAAhb,EAAA4O,OAAA,CAEAtc,OAAA,SAAAyoB,EAAApD,GAEA,OAAA3X,EAAAsT,MAAAe,QAAAsD,GAAA,IAAA3X,EAAAsT,MAAAyH,GAAA9G,MAAA0D,GAEA3X,EAAAwQ,MAAAc,UAAAmC,KAAAsH,GAEA/a,EAAAwQ,MAAAgB,YAAAiC,KAAAsH,GAAA,IAAA/a,EAAAqW,UAAA0E,GAAA9G,MAAA0D,GAEA,IAAA3X,EAAA9F,MAAA6gB,GAAA9G,MAAA0D,GAGA3X,EAAAwQ,MAAAC,cAAAgD,KAAAkE,GAAA,IAAA3X,EAAAkX,OAAA6D,GAAA9G,MAAA0D,IAGAljB,KAAAxC,MAAA8oB,OACAtmB,KAAAyf,YAAAyD,KAGArJ,OAAA,CACA6F,GAAA,SAAAC,EAAAmM,GACA,OAAAA,EAAA,EAAA9rB,KAAAxC,MAAAwC,KAAAyf,aAGAK,QAAA,WACA,OAAA9f,KAAAxC,UAMA+N,EAAAsO,OAAAtO,EAAA+b,GAAA,CAEA3Y,KAAA,SAAAnP,EAAAJ,EAAA+jB,GAEA,oBAAA3jB,EACA,QAAA1B,KAAA0B,EACAQ,KAAA2O,KAAA7Q,EAAA0B,EAAA1B,SAGAkC,KAAAyE,IAAAjF,EAAAJ,EAAA,SAGA,OAAAY,MAGA0Y,MAAA,SAAApa,EAAAc,GACA,oBAAAd,EACA,QAAAR,KAAAQ,EACA0B,KAAA0Y,MAAA5a,EAAAQ,EAAAR,SAGAkC,KAAAyE,IAAAnG,EAAAc,EAAA,UAEA,OAAAY,MAGAmI,EAAA,SAAAA,EAAAgb,GACA,GAAAnjB,KAAA8V,mBAAAvK,EAAAwgB,EAEA,OADA/rB,KAAA+S,UAAA,CAAsB5K,KAAIgb,GAC1BnjB,KAGA,IAAAgsB,EAAA,IAAAzgB,EAAAkX,OAAAta,GAEA,OADA6jB,EAAA7I,WACAnjB,KAAAyE,IAAA,IAAAunB,IAGApd,EAAA,SAAAA,EAAAuU,GACA,GAAAnjB,KAAA8V,mBAAAvK,EAAAwgB,EAEA,OADA/rB,KAAA+S,UAAA,CAAsBnE,KAAIuU,GAC1BnjB,KAGA,IAAAgsB,EAAA,IAAAzgB,EAAAkX,OAAA7T,GAEA,OADAod,EAAA7I,WACAnjB,KAAAyE,IAAA,IAAAunB,IAGA1b,GAAA,SAAAnI,GACA,OAAAnI,KAAAyE,IAAA,SAAA8G,EAAAkX,OAAAta,KAGAoI,GAAA,SAAA3B,GACA,OAAA5O,KAAAyE,IAAA,SAAA8G,EAAAkX,OAAA7T,KAGAmS,KAAA,SAAA5Y,EAAAyG,GACA,OAAA5O,KAAAmI,KAAAyG,MAGAyB,OAAA,SAAAlI,EAAAyG,GACA,OAAA5O,KAAAsQ,GAAAnI,GAAAoI,GAAA3B,IAGAhB,KAAA,SAAAU,EAAAD,GAOA,IAAA2S,EAmBA,OAzBAhhB,KAAA8V,mBAAAvK,EAAA0gB,KAEAjsB,KAAA2O,KAAA,YAAAL,IAMAA,GAAAD,IACA2S,EAAAhhB,KAAA8V,SAAAmL,QAGA3S,IACAA,EAAA0S,EAAA1S,MAAA0S,EAAA3S,UAGAA,IACAA,EAAA2S,EAAA3S,OAAA2S,EAAA1S,SAGAtO,KAAAyE,IAAA,YAAA8G,EAAAkX,OAAAnU,IACA7J,IAAA,aAAA8G,EAAAkX,OAAApU,KAIArO,MAGAsO,MAAA,SAAAA,GACA,OAAAtO,KAAAyE,IAAA,YAAA8G,EAAAkX,OAAAnU,KAGAD,OAAA,SAAAA,GACA,OAAArO,KAAAyE,IAAA,aAAA8G,EAAAkX,OAAApU,KAGAW,KAAA,SAAAxP,EAAAmD,EAAA/F,EAAAC,GAEA,UAAAmd,UAAA/X,OACAjC,KAAAgP,KAAA,CAAAxP,EAAAmD,EAAA/F,EAAAC,IAGAmD,KAAAyE,IAAA,WAAAzE,KAAA8V,SAAA,YAAAtW,KAGA0sB,QAAA,SAAA1uB,GACA,OAAAwC,KAAA8V,SAAAoW,QACAlsB,KAAAyE,IAAA,cAAA8G,EAAAkX,OAAAjlB,IACAwC,MAGA6N,QAAA,SAAA1F,EAAAyG,EAAAN,EAAAD,GAKA,OAJArO,KAAA8V,mBAAAvK,EAAAkP,WACAza,KAAAyE,IAAA,cAAA8G,EAAA4gB,QAAAhkB,EAAAyG,EAAAN,EAAAD,IAGArO,MAEAosB,OAAA,SAAApvB,GACA,GAAAgD,KAAA8V,mBAAAvK,EAAA8gB,KAAA,CACA,oBAAArvB,gBAAAuO,EAAAkX,OACA,OAAAziB,KAAAosB,OAAA,CACA5nB,OAAAwV,UAAA,GACApF,MAAAoF,UAAA,GACAqE,QAAArE,UAAA,KAIA,MAAAhd,EAAAqhB,SAAAre,KAAA2O,KAAA,eAAA3R,EAAAqhB,SACA,MAAArhB,EAAA4X,OAAA5U,KAAA2O,KAAA,aAAA3R,EAAA4X,OACA,MAAA5X,EAAAwH,QAAAxE,KAAA2O,KAAA,SAAA3R,EAAAwH,QAGA,OAAAxE,QAIAuL,EAAA+gB,IAAA/gB,EAAA4O,OAAA,CACAtc,OAAA,SAAAsK,EAAAyG,EAAAN,EAAAD,GACA,sBAAAlG,gBAAAoD,EAAA0P,SAEA,OAAA1P,EAAA+gB,IAAA5vB,KAAAsD,KAAA,MAAAmI,EAAAokB,KAAApkB,EAAAokB,KAAApkB,IAAA,MAAAA,EAAAqkB,IAAArkB,EAAAqkB,IAAArkB,EAAAyG,EAAAzG,EAAAmG,MAAAnG,EAAAkG,QACK,GAAA2L,UAAA/X,SACLjC,KAAAmI,IACAnI,KAAA4O,IACA5O,KAAAsO,QACAtO,KAAAqO,UAIAoe,EAAAzsB,OAEA6Z,OAAA,CAEA6S,MAAA,SAAA1L,GACA,IAAAre,EAAA,IAAA3C,KAAAsa,YAQA,OALA3X,EAAAwF,EAAAuL,KAAAuX,IAAAjrB,KAAAmI,EAAA6Y,EAAA7Y,GACAxF,EAAAiM,EAAA8E,KAAAuX,IAAAjrB,KAAA4O,EAAAoS,EAAApS,GACAjM,EAAA2L,MAAAoF,KAAAoX,IAAA9qB,KAAAmI,EAAAnI,KAAAsO,MAAA0S,EAAA7Y,EAAA6Y,EAAA1S,OAAA3L,EAAAwF,EACAxF,EAAA0L,OAAAqF,KAAAoX,IAAA9qB,KAAA4O,EAAA5O,KAAAqO,OAAA2S,EAAApS,EAAAoS,EAAA3S,QAAA1L,EAAAiM,EAEA6d,EAAA9pB,IAGAoQ,UAAA,SAAApW,GACA,IAAAskB,EAAA0L,EAAAC,IAAAC,GAAA,IAAAC,EAAAF,IAAAG,GAAA,IAEAC,EAAA,CACA,IAAAzhB,EAAAiX,MAAAxiB,KAAAmI,EAAAnI,KAAA4O,GACA,IAAArD,EAAAiX,MAAAxiB,KAAA+R,GAAA/R,KAAA4O,GACA,IAAArD,EAAAiX,MAAAxiB,KAAAmI,EAAAnI,KAAAuR,IACA,IAAAhG,EAAAiX,MAAAxiB,KAAA+R,GAAA/R,KAAAuR,KAmBA,OAhBAyb,EAAAxmB,QAAA,SAAAnI,GACAA,IAAA0U,UAAApW,GACAgwB,EAAAjZ,KAAAuX,IAAA0B,EAAAtuB,EAAA8J,GACA0kB,EAAAnZ,KAAAoX,IAAA+B,EAAAxuB,EAAA8J,GACA2kB,EAAApZ,KAAAuX,IAAA6B,EAAAzuB,EAAAuQ,GACAme,EAAArZ,KAAAoX,IAAAiC,EAAA1uB,EAAAuQ,MAGAqS,EAAA,IAAAjhB,KAAAsa,aACAnS,EAAAwkB,EACA1L,EAAA3S,MAAAue,EAAAF,EACA1L,EAAArS,EAAAke,EACA7L,EAAA5S,OAAA0e,EAAAD,EAEAL,EAAAxL,GAEAA,MAKA1V,EAAA0hB,KAAA1hB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GAIA,GAHA8M,EAAA+gB,IAAAhB,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,YAGAvb,aAAA8M,EAAA0P,QAAA,CACA,IAAA+F,EAGA,IAEA,GAAAtiB,EAAAgd,gBAAAwR,UASA,IAAAxuB,EAAAgd,gBAAAwR,SAAAzuB,EAAAkc,MAAA,UAAAwS,UAAA,8BATA,CAGA,IADA,IAAAC,EAAA3uB,EAAAkc,KACAyS,EAAAvS,YACAuS,IAAAvS,WAEA,GAAAuS,GAAA1uB,EAAA,UAAAyuB,UAAA,0BAOAnM,EAAAviB,EAAAkc,KAAAwG,UACO,MAAApc,GACP,GAAAtG,aAAA8M,EAAA8hB,MAAA,CACA,IAAA9M,EAAA9hB,EAAA8hB,MAAAhV,EAAA4N,OAAAxL,KAAAiN,UAAAsJ,OACAlD,EAAAT,EAAA5F,KAAAwG,UACAZ,EAAAlW,cAEA2W,EAAA,CACA7Y,EAAA1J,EAAAkc,KAAA2S,WACA1e,EAAAnQ,EAAAkc,KAAA4S,UACAjf,MAAA7P,EAAAkc,KAAA6S,YACAnf,OAAA5P,EAAAkc,KAAA8S,cAKAliB,EAAA+gB,IAAA5vB,KAAAsD,KAAAghB,KAMA9G,QAAA3O,EAAA+gB,IAGA9R,OAAAjP,EAAA0P,QAGAV,UAAA,CAEA0G,KAAA,WACA,WAAA1V,EAAA0hB,KAAAjtB,UAMAuL,EAAA0hB,KAAA9uB,UAAAmc,YAAA/O,EAAA0hB,KAGA1hB,EAAAsO,OAAAtO,EAAA0P,QAAA,CACAyS,KAAA,WAEA,OADA7kB,QAAAC,KAAA,sEACA9I,KAAAqR,KAAArR,KAAA0kB,UAIAnZ,EAAAoiB,KAAApiB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACA8M,EAAA+gB,IAAAhB,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,YAEAvb,aAAA8M,EAAA0P,SACA1P,EAAA+gB,IAAA5vB,KAAAsD,KAAAvB,EAAAkc,KAAAiT,0BAIA1T,QAAA3O,EAAA+gB,IAGA9R,OAAAjP,EAAA0P,QAEApB,OAAA,CACAgU,UAAA,WAIA,OAFA7tB,KAAAmI,GAAA4C,EAAA+iB,YACA9tB,KAAA4O,GAAA7D,EAAAgjB,YACA/tB,OAKAua,UAAA,CAEAlJ,KAAA,SAAA6G,GACA,OAAAA,EAAA,IAAA3M,EAAAoiB,KAAA3tB,MAAA+S,UAAAmF,EAAA8V,YAAArpB,WACA,IAAA4G,EAAAoiB,KAAA3tB,MAAA6tB,gBAMAtiB,EAAAoiB,KAAAxvB,UAAAmc,YAAA/O,EAAAoiB,KAEApiB,EAAAggB,OAAAhgB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAirB,GACA,IAAAvsB,EAAA0xB,EAAAC,EAAA,eAeA,IAZApF,eAAAvd,EAAA0P,QACA6N,EAAAE,YACA,iBAAAF,EACAoF,EAAApF,EAAA9jB,MAAAuG,EAAAwQ,MAAAc,WAAA3Y,IAAAmc,aACA,GAAArG,UAAA/X,OACAisB,EAAA,GAAAnU,MAAArd,KAAAsd,YACAvU,MAAA0a,QAAA2I,GACAoF,EAAApF,GACA,iBAAAA,EACAA,EAAAmF,EAGA1xB,EAAA4xB,EAAAlsB,OAAA,EAA+B1F,GAAA,IAAQA,EACvCyD,KAAAmuB,EAAA5xB,IAAA,MAAAusB,EAAAqF,EAAA5xB,IACAusB,EAAAqF,EAAA5xB,IAAA0xB,EAAAE,EAAA5xB,KAIAsd,OAAA,CAEA6R,QAAA,WAEA,IAAA0C,EAAAC,EAAAruB,KAAA,KACAsuB,EAAAD,EAAAruB,KAAA,KACAuuB,EAAA,IAAA7a,KAAA+J,GAAA/J,KAAA8a,MAAAJ,EAAAxf,EAAAwf,EAAAjmB,GAAA,GAEA,OAEAA,EAAAnI,KAAA+E,EACA6J,EAAA5O,KAAAyuB,EACAC,cAAA1uB,KAAA+E,EAAA2O,KAAAwS,IAAAqI,EAAA7a,KAAA+J,GAAA,KAAAzd,KAAAyuB,EAAA/a,KAAA0S,IAAAmI,EAAA7a,KAAA+J,GAAA,MAAA/J,KAAAib,KAAA3uB,KAAAR,EAAAQ,KAAAR,EAAAQ,KAAA2C,EAAA3C,KAAA2C,GACAisB,cAAA5uB,KAAAyuB,EAAA/a,KAAAwS,IAAAqI,EAAA7a,KAAA+J,GAAA,KAAAzd,KAAA+E,EAAA2O,KAAA0S,KAAAmI,EAAA7a,KAAA+J,GAAA,MAAA/J,KAAAib,KAAA3uB,KAAApD,EAAAoD,KAAApD,EAAAoD,KAAAnD,EAAAmD,KAAAnD,GAEA0xB,SACAM,MAAA,IAAAnb,KAAA+J,GAAA/J,KAAA8a,MAAAF,EAAA1f,EAAA0f,EAAAnmB,GAEA2mB,OAAApb,KAAAib,KAAA3uB,KAAAR,EAAAQ,KAAAR,EAAAQ,KAAA2C,EAAA3C,KAAA2C,GACAosB,OAAArb,KAAAib,KAAA3uB,KAAApD,EAAAoD,KAAApD,EAAAoD,KAAAnD,EAAAmD,KAAAnD,GAEAmW,SAAAub,EACA/uB,EAAAQ,KAAAR,EACAmD,EAAA3C,KAAA2C,EACA/F,EAAAoD,KAAApD,EACAC,EAAAmD,KAAAnD,EACAkI,EAAA/E,KAAA+E,EACA0pB,EAAAzuB,KAAAyuB,EACA9C,OAAA,IAAApgB,EAAAggB,OAAAvrB,QAIAugB,MAAA,WACA,WAAAhV,EAAAggB,OAAAvrB,OAGAwf,MAAA,SAAAmM,GAIA,OAFA3rB,KAAAyf,YAAA,IAAAlU,EAAAggB,OAAAI,GAEA3rB,MAGA0f,GAAA,SAAAC,GAEA,IAAA3f,KAAAyf,YAAA,OAAAzf,KAGA,IAAA2rB,EAAA,IAAApgB,EAAAggB,OAAA,CACA/rB,EAAAQ,KAAAR,GAAAQ,KAAAyf,YAAAjgB,EAAAQ,KAAAR,GAAAmgB,EACAhd,EAAA3C,KAAA2C,GAAA3C,KAAAyf,YAAA9c,EAAA3C,KAAA2C,GAAAgd,EACA/iB,EAAAoD,KAAApD,GAAAoD,KAAAyf,YAAA7iB,EAAAoD,KAAApD,GAAA+iB,EACA9iB,EAAAmD,KAAAnD,GAAAmD,KAAAyf,YAAA5iB,EAAAmD,KAAAnD,GAAA8iB,EACA5a,EAAA/E,KAAA+E,GAAA/E,KAAAyf,YAAA1a,EAAA/E,KAAA+E,GAAA4a,EACA8O,EAAAzuB,KAAAyuB,GAAAzuB,KAAAyf,YAAAgP,EAAAzuB,KAAAyuB,GAAA9O,IAGA,OAAAgM,GAGAH,SAAA,SAAAG,GACA,WAAApgB,EAAAggB,OAAAvrB,KAAA8b,SAAA0P,SAw6FA,SAAAG,GAIA,OAHAA,aAAApgB,EAAAggB,SACAI,EAAA,IAAApgB,EAAAggB,OAAAI,IAEAA,EA56FAqD,CAAArD,GAAA7P,YAGAnX,QAAA,WACA,WAAA4G,EAAAggB,OAAAvrB,KAAA8b,SAAAnX,YAGAqJ,UAAA,SAAA7F,EAAAyG,GACA,WAAArD,EAAAggB,OAAAvrB,KAAA8b,SAAA9N,UAAA7F,GAAA,EAAAyG,GAAA,KAGAqgB,MAAA,SAAA9mB,EAAAyG,EAAA0B,EAAAC,GAUA,OARA,GAAAyJ,UAAA/X,OACA2M,EAAAzG,EACO,GAAA6R,UAAA/X,SACPsO,EAAAD,EACAA,EAAA1B,EACAA,EAAAzG,GAGAnI,KAAAkvB,OAAA5e,EAAAC,EAAA,IAAAhF,EAAAggB,OAAApjB,EAAA,IAAAyG,EAAA,OAGAugB,OAAA,SAAA9xB,EAAAiT,EAAAC,GAIA,OAFAlT,EAAAkO,EAAA4R,MAAAK,QAAAngB,GAEA2C,KAAAkvB,OAAA5e,EAAAC,EAAA,IAAAhF,EAAAggB,OAAA7X,KAAAwS,IAAA7oB,GAAAqW,KAAA0S,IAAA/oB,IAAAqW,KAAA0S,IAAA/oB,GAAAqW,KAAAwS,IAAA7oB,GAAA,OAGA+xB,KAAA,SAAA5vB,EAAAxC,GACA,WAAAwC,EACAQ,KAAAivB,OAAA,IAAAjyB,EAAA,GACA,KAAAwC,EACAQ,KAAAivB,MAAA,OAAAjyB,GACAgD,KAAAivB,OAAA,KAAAzvB,EAAA,MAAAxC,IAAAwC,IAGA6vB,KAAA,SAAAlnB,EAAAyG,EAAA0B,EAAAC,GAcA,OAZA,GAAAyJ,UAAA/X,OACA2M,EAAAzG,EACO,GAAA6R,UAAA/X,SACPsO,EAAAD,EACAA,EAAA1B,EACAA,EAAAzG,GAIAA,EAAAoD,EAAA4R,MAAAK,QAAArV,GACAyG,EAAArD,EAAA4R,MAAAK,QAAA5O,GAEA5O,KAAAkvB,OAAA5e,EAAAC,EAAA,IAAAhF,EAAAggB,OAAA,EAAA7X,KAAA4b,IAAA1gB,GAAA8E,KAAA4b,IAAAnnB,GAAA,SAGAomB,MAAA,SAAApmB,EAAAmI,EAAAC,GACA,OAAAvQ,KAAAqvB,KAAAlnB,EAAA,EAAAmI,EAAAC,IAGAse,MAAA,SAAAjgB,EAAA0B,EAAAC,GACA,OAAAvQ,KAAAqvB,KAAA,EAAAzgB,EAAA0B,EAAAC,IAGA2e,OAAA,SAAA5e,EAAAC,EAAAob,GACA,OAAA3rB,KACAwrB,SAAA,IAAAjgB,EAAAggB,OAAA,QAAAjb,GAAA,EAAAC,GAAA,IACAib,SAAAG,GACAH,SAAA,IAAAjgB,EAAAggB,OAAA,SAAAjb,GAAA,GAAAC,GAAA,KAGAuL,OAAA,WAKA,IAHA,IAAA6P,EAAApgB,EAAA4N,OAAA2C,OAAAyT,kBAGAhzB,EAAA4xB,EAAAlsB,OAAA,EAAqC1F,GAAA,EAAQA,IAC7CovB,EAAAwC,EAAA5xB,IAAAyD,KAAAmuB,EAAA5xB,IAEA,OAAAovB,GAGAxM,SAAA,WAEA,gBAAAqQ,EAAAxvB,KAAAR,GAAA,IAAAgwB,EAAAxvB,KAAA2C,GACA,IAAA6sB,EAAAxvB,KAAApD,GAAA,IAAA4yB,EAAAxvB,KAAAnD,GACA,IAAA2yB,EAAAxvB,KAAA+E,GAAA,IAAAyqB,EAAAxvB,KAAAyuB,GACA,MAKAjU,OAAAjP,EAAA0P,QAGAV,UAAA,CAEAkV,IAAA,WACA,WAAAlkB,EAAAggB,OAAAvrB,KAAA2a,KAAA+U,WAGA1B,UAAA,WAKA,GAAAhuB,gBAAAuL,EAAAwP,OAAA,CACA,IAAA1L,EAAArP,KAAAqP,KAAA,KACA1S,EAAA0S,EAAAsL,KAAAgV,eAEA,OADAtgB,EAAAhF,SACA,IAAAkB,EAAAggB,OAAA5uB,GAEA,WAAA4O,EAAAggB,OAAAvrB,KAAA2a,KAAAgV,oBAOApkB,EAAAiX,MAAAjX,EAAA4O,OAAA,CAEAtc,OAAA,SAAAsK,EAAAyG,GACA,IAAAka,EAGAA,EAAArjB,MAAA0a,QAAAhY,GACA,CAAOA,IAAA,GAAAyG,EAAAzG,EAAA,IACP,iBAAAA,EACA,CAAOA,MAAAyG,EAAAzG,EAAAyG,GACP,MAAAzG,EACA,CAAOA,IAAAyG,EAAA,MAAAA,IAAAzG,GARP,CAA2BA,EAAA,EAAAyG,EAAA,GAW3B5O,KAAAmI,EAAA2gB,EAAA3gB,EACAnI,KAAA4O,EAAAka,EAAAla,GAIAiL,OAAA,CAEA0G,MAAA,WACA,WAAAhV,EAAAiX,MAAAxiB,OAGAwf,MAAA,SAAArX,EAAAyG,GAIA,OAFA5O,KAAAyf,YAAA,IAAAlU,EAAAiX,MAAAra,EAAAyG,GAEA5O,MAGA0f,GAAA,SAAAC,GAEA,IAAA3f,KAAAyf,YAAA,OAAAzf,KAGA,IAAA4vB,EAAA,IAAArkB,EAAAiX,MAAA,CACAra,EAAAnI,KAAAmI,GAAAnI,KAAAyf,YAAAtX,EAAAnI,KAAAmI,GAAAwX,EACA/Q,EAAA5O,KAAA4O,GAAA5O,KAAAyf,YAAA7Q,EAAA5O,KAAA4O,GAAA+Q,IAGA,OAAAiQ,GAGA9T,OAAA,WAEA,IAAA8T,EAAArkB,EAAA4N,OAAA2C,OAAA+T,iBAMA,OAHAD,EAAAznB,EAAAnI,KAAAmI,EACAynB,EAAAhhB,EAAA5O,KAAA4O,EAEAghB,GAGA7c,UAAA,SAAA4Y,GACA,WAAApgB,EAAAiX,MAAAxiB,KAAA8b,SAAAgU,gBAAAnE,EAAA7P,eAOAvQ,EAAAsO,OAAAtO,EAAA0P,QAAA,CAGA2U,MAAA,SAAAznB,EAAAyG,GACA,WAAArD,EAAAiX,MAAAra,EAAAyG,GAAAmE,UAAA/S,KAAAguB,YAAArpB,cAKA4G,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEAtM,KAAA,SAAAnP,EAAAJ,EAAApB,GAEA,SAAAwB,EAAA,CAIA,IAFAA,EAAA,GACAJ,EAAAY,KAAA2a,KAAAoV,WACA/xB,EAAAoB,EAAA6C,OAAA,EAA4BjE,GAAA,EAAQA,IACpCwB,EAAAJ,EAAApB,GAAAyZ,UAAAlM,EAAAwQ,MAAAW,SAAAsC,KAAA5f,EAAApB,GAAAgyB,WAAA3P,WAAAjhB,EAAApB,GAAAgyB,WAAA5wB,EAAApB,GAAAgyB,UAEA,OAAAxwB,EAEK,oBAAAA,EAEL,IAAAJ,KAAAI,EAAAQ,KAAA2O,KAAAvP,EAAAI,EAAAJ,SAEK,UAAAA,EAELY,KAAA2a,KAAAgL,gBAAAnmB,OAEK,UAAAJ,EAGL,cADAA,EAAAY,KAAA2a,KAAAzb,aAAAM,IAEA+L,EAAA5J,SAAAkc,MAAAre,GACA+L,EAAAwQ,MAAAW,SAAAsC,KAAA5f,GACAihB,WAAAjhB,KAIA,gBAAAI,EACAQ,KAAA2O,KAAA,SAAA0R,WAAAjhB,GAAA,EAAAY,KAAAojB,QAAA,MACA,UAAA5jB,IACAQ,KAAAojB,QAAAhkB,GAGA,QAAAI,GAAA,UAAAA,IACA+L,EAAAwQ,MAAAa,QAAAoC,KAAA5f,KACAA,EAAAY,KAAA0kB,MAAAtJ,OAAA6U,MAAA7wB,EAAA,MAEAA,aAAAmM,EAAA2kB,QACA9wB,EAAAY,KAAA0kB,MAAAtJ,OAAA+U,QAAA,eACAnwB,KAAAyE,IAAArF,OAKA,iBAAAA,EACAA,EAAA,IAAAmM,EAAAkX,OAAArjB,GAGAmM,EAAAsT,MAAAe,QAAAxgB,GACAA,EAAA,IAAAmM,EAAAsT,MAAAzf,GAGAqG,MAAA0a,QAAA/gB,KACAA,EAAA,IAAAmM,EAAA9F,MAAArG,IAGA,WAAAI,EAEAQ,KAAAksB,SACAlsB,KAAAksB,QAAA9sB,GAGA,iBAAApB,EACAgC,KAAA2a,KAAAyV,eAAApyB,EAAAwB,EAAAJ,EAAA+f,YACAnf,KAAA2a,KAAAtb,aAAAG,EAAAJ,EAAA+f,aAIAnf,KAAAqwB,SAAA,aAAA7wB,GAAA,KAAAA,GACAQ,KAAAqwB,QAAA7wB,EAAAJ,GAGA,OAAAY,QAGAuL,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEAlI,UAAA,SAAA/V,EAAAmmB,GAEA,IACAwI,EAAA1K,EAGA,oBAAAjkB,EAIA,OAFA2uB,EAAA,IAAApgB,EAAAggB,OANAvrB,MAMA0rB,UAEA,iBAAA1uB,EAAA2uB,EAAA3uB,GAAA2uB,EAUA,GANAA,EAAA,IAAApgB,EAAAggB,OAZAvrB,MAeAmjB,SAAAnmB,EAAAmmB,SAGA,MAAAnmB,EAAAwC,EACAmsB,EAAAxI,EAEAwI,EAAAH,SAAA,IAAAjgB,EAAAggB,OAAAvuB,IAEA,IAAAuO,EAAAggB,OAAAvuB,QAGK,SAAAA,EAAAgW,SAELsd,EAAAtzB,EA5BAgD,MA+BA2rB,EAAAxI,EAEAwI,EAAAwD,OAAAnyB,EAAAgW,SAAAhW,EAAAsT,GAAAtT,EAAAuT,IAEAob,EAAAwD,OAAAnyB,EAAAgW,SAAA2Y,EAAAD,UAAA1Y,SAAAhW,EAAAsT,GAAAtT,EAAAuT,SAGK,SAAAvT,EAAAiyB,OAAA,MAAAjyB,EAAA8xB,QAAA,MAAA9xB,EAAA+xB,OAAA,CAQL,GANAuB,EAAAtzB,EAxCAgD,MA2CAhD,EAAA8xB,OAAA,MAAA9xB,EAAAiyB,MAAAjyB,EAAAiyB,MAAA,MAAAjyB,EAAA8xB,OAAA9xB,EAAA8xB,OAAA,EACA9xB,EAAA+xB,OAAA,MAAA/xB,EAAAiyB,MAAAjyB,EAAAiyB,MAAA,MAAAjyB,EAAA+xB,OAAA/xB,EAAA+xB,OAAA,GAEA5L,EAAA,CAEA,IAAApe,EAAA4mB,EAAAD,UACA1uB,EAAA8xB,OAAA,EAAA9xB,EAAA8xB,OAAA/pB,EAAA+pB,OACA9xB,EAAA+xB,OAAA,EAAA/xB,EAAA+xB,OAAAhqB,EAAAgqB,OAGApD,IAAAsD,MAAAjyB,EAAA8xB,OAAA9xB,EAAA+xB,OAAA/xB,EAAAsT,GAAAtT,EAAAuT,SAGK,SAAAvT,EAAAqyB,MAAA,MAAAryB,EAAAuxB,OAAA,MAAAvxB,EAAA6xB,MAAA,CAQL,GANAyB,EAAAtzB,EA1DAgD,MA6DAhD,EAAAuxB,MAAA,MAAAvxB,EAAAqyB,KAAAryB,EAAAqyB,KAAA,MAAAryB,EAAAuxB,MAAAvxB,EAAAuxB,MAAA,EACAvxB,EAAA6xB,MAAA,MAAA7xB,EAAAqyB,KAAAryB,EAAAqyB,KAAA,MAAAryB,EAAA6xB,MAAA7xB,EAAA6xB,MAAA,GAEA1L,EAAA,CAEA,IAAApe,EAAA4mB,EAAAD,UACAC,IAAAH,UAAA,IAAAjgB,EAAAggB,QAAA8D,KAAAtqB,EAAAwpB,MAAAxpB,EAAA8pB,MAAA7xB,EAAAsT,GAAAtT,EAAAuT,IAAA5L,WAGAgnB,IAAA0D,KAAAryB,EAAAuxB,MAAAvxB,EAAA6xB,MAAA7xB,EAAAsT,GAAAtT,EAAAuT,SAGKvT,EAAAoyB,MACL,KAAApyB,EAAAoyB,MAAA,KAAApyB,EAAAoyB,KACApyB,EAAAwH,OAAA,MAAAxH,EAAAwH,OA3EAxE,KA2EAihB,OAAA,IAAAjkB,EAAAoyB,MAAApyB,EAAAwH,OAEA,MAAAxH,EAAAwH,QACAyc,EA9EAjhB,KA8EAihB,OACAjkB,EAAAoyB,KAAAnO,EAAA3Q,GACAtT,EAAAwH,OAAAyc,EAAA1Q,IAEAvT,EAAAoyB,KAAApyB,EAAAwH,OAIAmnB,GAAA,IAAApgB,EAAAggB,QAAA6D,KAAApyB,EAAAoyB,KAAApyB,EAAAwH,SAGK,MAAAxH,EAAAmL,GAAA,MAAAnL,EAAA4R,IACLuU,EAEAwI,IAAA3d,UAAAhR,EAAAmL,EAAAnL,EAAA4R,IAGA,MAAA5R,EAAAmL,IAAAwjB,EAAA5mB,EAAA/H,EAAAmL,GACA,MAAAnL,EAAA4R,IAAA+c,EAAA8C,EAAAzxB,EAAA4R,KAIA,OAAA5O,KAAA2O,KAAA,YAAAgd,MAIApgB,EAAAsO,OAAAtO,EAAA+b,GAAA,CACAvU,UAAA,SAAA/V,EAAAmmB,GAEA,IACAwI,EAAA1K,EADAnL,EAAA9V,KAAA8V,SAIA,uBAAA9Y,GAEA2uB,EAAA,IAAApgB,EAAAggB,OAAAzV,GAAA4V,UAEA,iBAAA1uB,EAAA2uB,EAAA3uB,GAAA2uB,IAIAxI,SAAAnmB,EAAAmmB,SAGA,MAAAnmB,EAAAwC,EACAmsB,EAAA,IAAApgB,EAAAggB,OAAAvuB,GAGK,MAAAA,EAAAgW,UAELsd,EAAAtzB,EAAA8Y,GAGA6V,EAAA,IAAApgB,EAAAglB,OAAAvzB,EAAAgW,SAAAhW,EAAAsT,GAAAtT,EAAAuT,KAGK,MAAAvT,EAAAiyB,OAAA,MAAAjyB,EAAA8xB,QAAA,MAAA9xB,EAAA+xB,QAELuB,EAAAtzB,EAAA8Y,GAGA9Y,EAAA8xB,OAAA,MAAA9xB,EAAAiyB,MAAAjyB,EAAAiyB,MAAA,MAAAjyB,EAAA8xB,OAAA9xB,EAAA8xB,OAAA,EACA9xB,EAAA+xB,OAAA,MAAA/xB,EAAAiyB,MAAAjyB,EAAAiyB,MAAA,MAAAjyB,EAAA+xB,OAAA/xB,EAAA+xB,OAAA,EAEApD,EAAA,IAAApgB,EAAAilB,MAAAxzB,EAAA8xB,OAAA9xB,EAAA+xB,OAAA/xB,EAAAsT,GAAAtT,EAAAuT,KAGK,MAAAvT,EAAAuxB,OAAA,MAAAvxB,EAAA6xB,OAELyB,EAAAtzB,EAAA8Y,GAGA9Y,EAAAuxB,MAAA,MAAAvxB,EAAAuxB,MAAAvxB,EAAAuxB,MAAA,EACAvxB,EAAA6xB,MAAA,MAAA7xB,EAAA6xB,MAAA7xB,EAAA6xB,MAAA,EAEAlD,EAAA,IAAApgB,EAAAklB,KAAAzzB,EAAAuxB,MAAAvxB,EAAA6xB,MAAA7xB,EAAAsT,GAAAtT,EAAAuT,KAGKvT,EAAAoyB,MACL,KAAApyB,EAAAoyB,MAAA,KAAApyB,EAAAoyB,KACApyB,EAAAwH,OAAA,MAAAxH,EAAAwH,OAAAsR,EAAAmL,OAAA,IAAAjkB,EAAAoyB,MAAApyB,EAAAwH,OAEA,MAAAxH,EAAAwH,QACAyc,EAAAnL,EAAAmL,OACAjkB,EAAAoyB,KAAAnO,EAAA3Q,GACAtT,EAAAwH,OAAAyc,EAAA1Q,IAEAvT,EAAAoyB,KAAApyB,EAAAwH,OAIAmnB,GAAA,IAAApgB,EAAAggB,QAAA6D,KAAApyB,EAAAoyB,KAAApyB,EAAAwH,SAGK,MAAAxH,EAAAmL,GAAA,MAAAnL,EAAA4R,IACL+c,EAAA,IAAApgB,EAAAmlB,UAAA1zB,EAAAmL,EAAAnL,EAAA4R,IAGA+c,GAEAA,EAAAxI,WAEAnjB,KAAA4pB,OAAAxN,WAAArW,KAAA4lB,GAEA3rB,KAAAoqB,cANApqB,SAUAuL,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA0V,YAAA,WACA,OAAA3wB,KAAA2O,KAAA,mBAGAqa,UAAA,WAEA,IAAA2C,GAAA3rB,KAAA2O,KAAA,kBAEA3J,MAAAuG,EAAAwQ,MAAAK,YAAArC,MAAA,MAAA7V,IAAA,SAAA0sB,GAEA,IAAAC,EAAAD,EAAAxQ,OAAApb,MAAA,KACA,OAAA6rB,EAAA,GAAAA,EAAA,GAAA7rB,MAAAuG,EAAAwQ,MAAAc,WAAA3Y,IAAA,SAAA0sB,GAA0E,OAAAvQ,WAAAuQ,QAG1ExO,OAAA,SAAAuJ,EAAA5Y,GAEA,gBAAAA,EAAA,GAAA4Y,EAAAH,SAAA0C,EAAAnb,EAAA,KACA4Y,EAAA5Y,EAAA,IAAAuY,MAAAK,EAAA5Y,EAAA,KAEO,IAAAxH,EAAAggB,QAEP,OAAAI,GAGAmF,SAAA,SAAAtW,GACA,GAAAxa,MAAAwa,EAAA,OAAAxa,KACA,IAAAyvB,EAAAzvB,KAAAguB,YACA+C,EAAAvW,EAAAwT,YAAArpB,UAIA,OAFA3E,KAAA8jB,MAAAtJ,GAAAmW,cAAA5d,UAAAge,EAAAvF,SAAAiE,IAEAzvB,MAGAgxB,MAAA,WACA,OAAAhxB,KAAA8wB,SAAA9wB,KAAA0kB,UAKAnZ,EAAA0lB,eAAA1lB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAirB,EAAAoI,GAEA,GAAAlX,UAAA/X,OAAA,qBAAAivB,EACA,OAAAlxB,KAAAsa,YAAA5d,KAAAsD,KAAA,GAAA+Z,MAAArd,KAAAsd,YAGA,GAAAvU,MAAA0a,QAAA2I,GACA,QAAAvsB,EAAA,EAAAuG,EAAA9C,KAAAga,UAAA/X,OAAiD1F,EAAAuG,IAASvG,EAC1DyD,UAAAga,UAAAzd,IAAAusB,EAAAvsB,QAEK,oBAAAusB,EACL,QAAAvsB,EAAA,EAAAuG,EAAA9C,KAAAga,UAAA/X,OAAiD1F,EAAAuG,IAASvG,EAC1DyD,UAAAga,UAAAzd,IAAAusB,EAAA9oB,KAAAga,UAAAzd,IAIAyD,KAAAkxB,UAAA,GAEA,IAAAA,IACAlxB,KAAAkxB,UAAA,IAKArX,OAAA,CAEAG,UAAA,GACAyQ,OAAA,GAEA/K,GAAA,SAAAC,GAIA,IAFA,IAAAwR,EAAA,GAEA50B,EAAA,EAAAuG,EAAA9C,KAAAga,UAAA/X,OAAiD1F,EAAAuG,IAASvG,EAC1D40B,EAAAprB,KAAA/F,UAAAga,UAAAzd,KAGA,IAAAI,EAAAqD,KAAAoxB,OAAA,IAAA7lB,EAAAggB,OAIA,OAFA5uB,GAAA,IAAA4O,EAAAggB,QAAA/L,MAAAjU,EAAAggB,OAAAptB,UAAA6B,KAAAyqB,QAAAa,MAAA3uB,EAAAw0B,IAAAzR,GAAAC,GAEA3f,KAAAkxB,SAAAv0B,EAAAgI,UAAAhI,GAIA8uB,KAAA,SAAAzuB,GACA,QAAAT,EAAA,EAAAuG,EAAA9C,KAAAga,UAAA/X,OAAiD1F,EAAAuG,IAASvG,EAC1DS,EAAAgD,KAAAga,UAAAzd,SAAA,IAAAyD,UAAAga,UAAAzd,IAAA,EAAAS,EAAAgD,KAAAga,UAAAzd,IAWA,OALAS,EAAAsT,GAAAtQ,KAAAsQ,GACAtT,EAAAuT,GAAAvQ,KAAAuQ,GAEAvQ,KAAAoxB,MAAA,IAAA7lB,EAAAqO,EAAA5Z,KAAAyqB,UAAAztB,GAAA,GAAA0iB,GAAA,GAEA1f,SAOAuL,EAAAmlB,UAAAnlB,EAAA4O,OAAA,CAEAK,OAAAjP,EAAAggB,OACArR,QAAA3O,EAAA0lB,eAEApzB,OAAA,SAAAirB,EAAAoI,GACAlxB,KAAAsa,YAAAgR,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,aAGAH,OAAA,CACAG,UAAA,gCACAyQ,OAAA,eAKAlf,EAAAglB,OAAAhlB,EAAA4O,OAAA,CAEAK,OAAAjP,EAAAggB,OACArR,QAAA3O,EAAA0lB,eAEApzB,OAAA,SAAAirB,EAAAoI,GACAlxB,KAAAsa,YAAAgR,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,aAGAH,OAAA,CACAG,UAAA,uBACAyQ,OAAA,SACA/K,GAAA,SAAAC,GACA,IAAAhjB,GAAA,IAAA4O,EAAAggB,QAAA4D,QAAA,IAAA5jB,EAAAkX,QAAAjD,MAAAxf,KAAAgT,UAAAhT,KAAAoxB,MAAApxB,KAAAoxB,MAAApe,SAAA,IAAA0M,GAAAC,GAAA3f,KAAAsQ,GAAAtQ,KAAAuQ,IACA,OAAAvQ,KAAAkxB,SAAAv0B,EAAAgI,UAAAhI,GAEA8uB,KAAA,SAAAzuB,GAEA,OADAgD,KAAAoxB,MAAAp0B,EACAgD,SAMAuL,EAAAilB,MAAAjlB,EAAA4O,OAAA,CAEAK,OAAAjP,EAAAggB,OACArR,QAAA3O,EAAA0lB,eAEApzB,OAAA,SAAAirB,EAAAoI,GACAlxB,KAAAsa,YAAAgR,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,aAGAH,OAAA,CACAG,UAAA,8BACAyQ,OAAA,WAKAlf,EAAAklB,KAAAllB,EAAA4O,OAAA,CAEAK,OAAAjP,EAAAggB,OACArR,QAAA3O,EAAA0lB,eAEApzB,OAAA,SAAAirB,EAAAoI,GACAlxB,KAAAsa,YAAAgR,MAAAtrB,KAAA,GAAA+Z,MAAArd,KAAAsd,aAGAH,OAAA,CACAG,UAAA,4BACAyQ,OAAA,UAKAlf,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEAvC,MAAA,SAAApa,EAAAc,GACA,MAAA4a,UAAA/X,OAEA,OAAAjC,KAAA2a,KAAAjC,MAAA2Y,SAAA,GAEK,GAAArX,UAAA/X,OAAA,EAEL,oBAAA3D,EACA,IAAAc,KAAAd,EAAA0B,KAAA0Y,MAAAtZ,EAAAd,EAAAc,QAEO,KAAAmM,EAAAwQ,MAAAS,MAAAwC,KAAA1gB,GAaP,OAAA0B,KAAA2a,KAAAjC,MAAA4Y,EAAAhzB,IALA,IANAA,IAAA0G,MAAA,WAEAuY,OAAA,SAAAxY,GAA+B,QAAAA,IAC/Bb,IAAA,SAAAa,GAA2B,OAAAA,EAAAC,MAAA,aAG3B5F,EAAAd,EAAA2b,OACAja,KAAA0Y,MAAAtZ,EAAA,GAAAA,EAAA,SAQAY,KAAA2a,KAAAjC,MAAA4Y,EAAAhzB,IAAA,OAAAc,GAAAmM,EAAAwQ,MAAAU,QAAAuC,KAAA5f,GAAA,GAAAA,EAGA,OAAAY,QAGAuL,EAAA6Z,OAAA7Z,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACAuB,KAAAsa,YAAA5d,KAAAsD,KAAAvB,IAIAyb,QAAA3O,EAAA0P,QAGApB,OAAA,CAEA0X,SAAA,WACA,OAAAhmB,EAAA4R,MAAAjZ,IAAAqH,EAAA4R,MAAAQ,kBAAA3d,KAAA2a,KAAA6K,YAAA,SAAA7K,GACA,OAAApP,EAAAmP,MAAAC,MAIAlW,IAAA,SAAAhG,EAAAlC,GAMA,OALA,MAAAA,EACAyD,KAAA2a,KAAA0K,YAAA5mB,EAAAkc,MACAlc,EAAAkc,MAAA3a,KAAA2a,KAAA6K,WAAAjpB,IACAyD,KAAA2a,KAAA6W,aAAA/yB,EAAAkc,KAAA3a,KAAA2a,KAAA6K,WAAAjpB,IAEAyD,MAGA+jB,IAAA,SAAAtlB,EAAAlC,GAEA,OADAyD,KAAAyE,IAAAhG,EAAAlC,GACAkC,GAGA2B,IAAA,SAAA3B,GACA,OAAAuB,KAAAuC,MAAA9D,IAAA,GAGA8D,MAAA,SAAA9D,GACA,SAAAsb,MAAArd,KAAAsD,KAAA2a,KAAA6K,YAAA5iB,QAAAnE,EAAAkc,OAGAvd,IAAA,SAAAb,GACA,OAAAgP,EAAAmP,MAAA1a,KAAA2a,KAAA6K,WAAAjpB,KAGAk1B,MAAA,WACA,OAAAzxB,KAAA5C,IAAA,IAGAwsB,KAAA,WACA,OAAA5pB,KAAA5C,IAAA4C,KAAA2a,KAAA6K,WAAAvjB,OAAA,IAGAyM,KAAA,SAAA2O,EAAAqU,GACA,IAAAn1B,EAAA+gB,EACAiU,EAAAvxB,KAAAuxB,WAEA,IAAAh1B,EAAA,EAAA+gB,EAAAiU,EAAAtvB,OAAuC1F,EAAA+gB,EAAQ/gB,IAC/Cg1B,EAAAh1B,aAAAgP,EAAA0P,SACAoC,EAAAiO,MAAAiG,EAAAh1B,GAAA,CAAAA,EAAAg1B,IAEAG,GAAAH,EAAAh1B,aAAAgP,EAAAkP,WACA8W,EAAAh1B,GAAAmS,KAAA2O,EAAAqU,GAGA,OAAA1xB,MAGA6jB,cAAA,SAAAplB,GAGA,OAFAuB,KAAA2a,KAAAgX,YAAAlzB,EAAAkc,MAEA3a,MAGA8Y,MAAA,WAEA,KAAA9Y,KAAA2a,KAAAiX,iBACA5xB,KAAA2a,KAAAgX,YAAA3xB,KAAA2a,KAAAkX,WAKA,cAFA7xB,KAAA8xB,MAEA9xB,MAGAob,KAAA,WACA,OAAApb,KAAA0kB,MAAAtJ,WAMA7P,EAAAsO,OAAAtO,EAAA6Z,OAAA,CAEA2M,QAAA,SAAAvX,EAAAwX,GACA,WAAAA,GAAAhyB,gBAAAuL,EAAA0mB,MAAAjyB,KAAA2a,MAAApP,EAAA4N,OAAAxL,KAAA3N,MAEAwa,MAAAxa,gBAAAuL,EAAA2N,IAAAlZ,UAAAwa,OAAAjP,EAAA6Z,SACA4M,KAAApF,IAEA5sB,KAAA0O,KAAA,WACA,OAAA1O,gBAAAuL,EAAA0mB,KAAAjyB,KACAA,gBAAAuL,EAAA6Z,OAAAplB,KAAA+xB,QAAAvX,EAAAwX,EAAA,GACAhyB,KAAA8wB,SAAAtW,KAGAxa,KAAA2a,KAAA4K,YAAAvlB,KAAAqK,SAEArK,OAGAkyB,QAAA,SAAA1X,EAAAwX,GACA,OAAAhyB,KAAA+xB,QAAAvX,EAAAwX,MAIAzmB,EAAAkP,UAAAlP,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACAuB,KAAAsa,YAAA5d,KAAAsD,KAAAvB,IAIAyb,QAAA3O,EAAA6Z,SAIA7Z,EAAA4gB,QAAA5gB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAirB,GACA,IAEA3gB,EAAAyG,EAAAN,EAAAD,EAAA8jB,EAAAC,EAAAC,EAFApE,EAAA,UAGAqE,EAAA,EACAC,EAAA,EACAC,EAAA,+CAEA,GAAA1J,aAAAvd,EAAA0P,QAAA,CAYA,IAVAmX,EAAAtJ,EACAuJ,EAAAvJ,EACAqJ,GAAArJ,EAAAna,KAAA,gBAAAmQ,MAAA0T,GACA1J,EAAA7H,KAGA3S,EAAA,IAAA/C,EAAAkX,OAAAqG,EAAAxa,SACAD,EAAA,IAAA9C,EAAAkX,OAAAqG,EAAAza,UAGA,KAAAC,EAAAoU,MACA4P,GAAAhkB,EAAA9Q,MACA8Q,EAAA,IAAA/C,EAAAkX,OAAA2P,aAAA7mB,EAAA2N,IAAAkZ,EAAA5X,SAAAiY,YAAAL,EAAA5X,SAAAlM,SACA8jB,IAAA5X,SAEA,UAAAnM,EAAAqU,MACA6P,GAAAlkB,EAAA7Q,MACA6Q,EAAA,IAAA9C,EAAAkX,OAAA4P,aAAA9mB,EAAA2N,IAAAmZ,EAAA7X,SAAAkY,aAAAL,EAAA7X,SAAAnM,UACAgkB,IAAA7X,SAIAxa,KAAAmI,EAAA,EACAnI,KAAA4O,EAAA,EACA5O,KAAAsO,QAAAgkB,EACAtyB,KAAAqO,SAAAkkB,EACAvyB,KAAA2yB,KAAA,EAEAR,IAEAhqB,EAAAkY,WAAA8R,EAAA,IACAvjB,EAAAyR,WAAA8R,EAAA,IACA7jB,EAAA+R,WAAA8R,EAAA,IACA9jB,EAAAgS,WAAA8R,EAAA,IAGAnyB,KAAA2yB,KAAA3yB,KAAAsO,MAAAtO,KAAAqO,OAAAC,EAAAD,EACArO,KAAAqO,SACArO,KAAAsO,QAGAtO,KAAAmI,IACAnI,KAAA4O,IACA5O,KAAAsO,QACAtO,KAAAqO,eAOAya,EAAA,iBAAAA,EACAA,EAAAhK,MAAA0T,GAAAtuB,IAAA,SAAAgU,GAA2C,OAAAmI,WAAAnI,KAC3CzS,MAAA0a,QAAA2I,GACAA,EACA,iBAAAA,EACA,CAAAA,EAAA3gB,EAAA2gB,EAAAla,EAAAka,EAAAxa,MAAAwa,EAAAza,QACA,GAAA2L,UAAA/X,OACA,GAAA8X,MAAArd,KAAAsd,WACAiU,EAEAjuB,KAAAmI,EAAA2gB,EAAA,GACA9oB,KAAA4O,EAAAka,EAAA,GACA9oB,KAAAsO,MAAAwa,EAAA,GACA9oB,KAAAqO,OAAAya,EAAA,IAMAjP,OAAA,CAEAsF,SAAA,WACA,OAAAnf,KAAAmI,EAAA,IAAAnI,KAAA4O,EAAA,IAAA5O,KAAAsO,MAAA,IAAAtO,KAAAqO,QAEAmR,MAAA,SAAArX,EAAAyG,EAAAN,EAAAD,GAEA,OADArO,KAAAyf,YAAA,IAAAlU,EAAA4gB,QAAAhkB,EAAAyG,EAAAN,EAAAD,GACArO,MAGA0f,GAAA,SAAAC,GAEA,OAAA3f,KAAAyf,YAEA,IAAAlU,EAAA4gB,QAAA,CACAnsB,KAAAmI,GAAAnI,KAAAyf,YAAAtX,EAAAnI,KAAAmI,GAAAwX,EACA3f,KAAA4O,GAAA5O,KAAAyf,YAAA7Q,EAAA5O,KAAA4O,GAAA+Q,EACA3f,KAAAsO,OAAAtO,KAAAyf,YAAAnR,MAAAtO,KAAAsO,OAAAqR,EACA3f,KAAAqO,QAAArO,KAAAyf,YAAApR,OAAArO,KAAAqO,QAAAsR,IANA3f,OAcAwa,OAAAjP,EAAAkP,UAGAF,UAAA,CAGA1M,QAAA,SAAA1F,EAAAyG,EAAAN,EAAAD,GACA,UAAA2L,UAAA/X,OAEA,IAAAsJ,EAAA4gB,QAAAnsB,MAGAA,KAAA2O,KAAA,cAAApD,EAAA4gB,QAAAhkB,EAAAyG,EAAAN,EAAAD,QAQC,SACD,WACA,YACA,UACA,YACA,WACA,YACA,aACA,aACA,aACA,YACA,aACA,WACA,eAAA7H,QAAA,SAAA2D,GAEAoB,EAAA0P,QAAA9c,UAAAgM,GAAA,SAAAskB,GAOA,OALA,MAAAA,EACAljB,EAAA4e,IAAAnqB,KAAAmK,GAEAoB,EAAAye,GAAAhqB,KAAAmK,EAAAskB,GAEAzuB,QAIAuL,EAAAqnB,WAAA,EAGArnB,EAAAye,GAAA,SAAArP,EAAAkY,EAAAC,EAAAC,EAAAC,GACA,IAAAx2B,EAAAs2B,EAAA/0B,KAAAg1B,GAAApY,GACA3c,EAAA2c,aAAApP,EAAA0P,QAAAN,SAGA3c,EAAA4c,SAAA5c,EAAA4c,UAAA,CAA8B0I,QAAA,IAE9B,IAAA2P,EAAAj1B,EAAA4c,SAAA0I,QAGAwP,EAAAI,mBAAmCJ,EAAAI,mBAAA3nB,EAAAqnB,YAEnCC,EAAA7tB,MAAAuG,EAAAwQ,MAAAc,WAAArW,QAAA,SAAA2D,GACA,IAAAgpB,EAAAhpB,EAAAnF,MAAA,QACApH,EAAAuM,EAAAnF,MAAA,aAGAiuB,EAAAE,GAAAF,EAAAE,IAAA,GACAF,EAAAE,GAAAv1B,GAAAq1B,EAAAE,GAAAv1B,IAAA,GAGAq1B,EAAAE,GAAAv1B,GAAAk1B,EAAAI,kBAAA12B,EAGAwB,EAAAoN,iBAAA+nB,EAAA32B,EAAAw2B,IAAA,MAKAznB,EAAA4e,IAAA,SAAAxP,EAAAkY,EAAAC,EAAAE,GACA,IAAAh1B,EAAA2c,aAAApP,EAAA0P,QAAAN,SACA,GAAA3c,EAAA4c,WAGA,mBAAAkY,IACAA,IAAAI,mBADA,CAKA,IAAAD,EAAAj1B,EAAA4c,SAAA0I,SAEGuP,GAAA,IAAA7tB,MAAAuG,EAAAwQ,MAAAc,WAAArW,QAAA,SAAA2D,GACH,IAEAgR,EAAA3e,EAFA22B,EAAAhpB,KAAAnF,MAAA,QACApH,EAAAuM,KAAAnF,MAAA,QAGA,GAAA8tB,EAEAG,EAAAE,IAAAF,EAAAE,GAAAv1B,GAAA,OAEAI,EAAAo1B,oBAAAD,EAAAF,EAAAE,GAAAv1B,GAAA,KAAAk1B,GAAAE,IAAA,UAEAC,EAAAE,GAAAv1B,GAAA,KAAAk1B,SAEK,GAAAK,GAAAv1B,GAEL,GAAAq1B,EAAAE,IAAAF,EAAAE,GAAAv1B,GAAA,CACA,IAAApB,KAAAy2B,EAAAE,GAAAv1B,GAAgC2N,EAAA4e,IAAAnsB,EAAA,CAAAm1B,EAAAv1B,GAAAyH,KAAA,KAAA7I,UAEhCy2B,EAAAE,GAAAv1B,SAEK,GAAAA,EAEL,IAAAuM,KAAA8oB,EACA,IAAA9X,KAAA8X,EAAA9oB,GACAvM,IAAAud,GAAiC5P,EAAA4e,IAAAnsB,EAAA,CAAAmM,EAAAvM,GAAAyH,KAAA,WAG5B,GAAA8tB,GAEL,GAAAF,EAAAE,GAAA,CACA,IAAAhY,KAAA8X,EAAAE,GAAoC5nB,EAAA4e,IAAAnsB,EAAA,CAAAm1B,EAAAhY,GAAA9V,KAAA,aAEpC4tB,EAAAE,QAEK,CAEL,IAAAhpB,KAAA8oB,EAA0B1nB,EAAA4e,IAAAnsB,EAAAmM,GAE1BnM,EAAA4c,SAAA0I,QAAA,QAKA/X,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA+O,GAAA,SAAA7f,EAAA2oB,EAAAC,EAAAC,GAEA,OADAznB,EAAAye,GAAAhqB,KAAAmK,EAAA2oB,EAAAC,EAAAC,GACAhzB,MAGAmqB,IAAA,SAAAhgB,EAAA2oB,GAEA,OADAvnB,EAAA4e,IAAAnqB,KAAA2a,KAAAxQ,EAAA2oB,GACA9yB,MAEAkrB,KAAA,SAAA/gB,EAAAkpB,GAQA,OANAlpB,aAAAY,EAAAuoB,MACAtzB,KAAA2a,KAAA4Y,cAAAppB,GAEAnK,KAAA2a,KAAA4Y,cAAAppB,EAAA,IAAAoB,EAAAioB,YAAArpB,EAAA,CAAkE+f,OAAAmJ,EAAAI,YAAA,KAElEzzB,KAAAqjB,OAAAlZ,EACAnK,MAEAmK,MAAA,WACA,OAAAnK,KAAAqjB,UAKA9X,EAAA0mB,KAAA1mB,EAAA4O,OAAA,CAEAtc,OAAA,OAGAqc,QAAA3O,EAAAkP,YAGAlP,EAAAwgB,EAAAxgB,EAAA4O,OAAA,CAEAtc,OAAA,IAGAqc,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEA1R,EAAA,SAAAA,GACA,aAAAA,EAAAnI,KAAA+S,UAAA,KAAA/S,KAAA+S,UAAA,CAA+D5K,IAAAnI,KAAAmI,MAAkB,IAGjFyG,EAAA,SAAAA,GACA,aAAAA,EAAA5O,KAAA+S,UAAA,KAAA/S,KAAA+S,UAAA,CAA+DnE,IAAA5O,KAAA4O,MAAkB,IAGjF0B,GAAA,SAAAnI,GACA,aAAAA,EAAAnI,KAAA0zB,OAAApjB,GAAAtQ,KAAAmI,IAAAnI,KAAA0zB,OAAAplB,MAAA,IAGAiC,GAAA,SAAA3B,GACA,aAAAA,EAAA5O,KAAA0zB,OAAAnjB,GAAAvQ,KAAA4O,IAAA5O,KAAA0zB,OAAArlB,OAAA,IAEAqlB,KAAA,WAEA,IAAAzS,EAAAjhB,KAAAihB,OACA0S,EAAA3zB,KAAA+S,YAUA,OARAkO,EAAA9Y,GAAAwrB,EAAAxrB,EACA8Y,EAAAlP,IAAA4hB,EAAAxrB,EACA8Y,EAAA3Q,IAAAqjB,EAAAxrB,EAEA8Y,EAAArS,GAAA+kB,EAAA/kB,EACAqS,EAAA1P,IAAAoiB,EAAA/kB,EACAqS,EAAA1Q,IAAAojB,EAAA/kB,EAEAqS,IAKA1G,UAAA,CAEAxM,MAAA,WACA,OAAA/N,KAAA+jB,IAAA,IAAAxY,EAAAwgB,OAKAxgB,EAAA2N,IAAA3N,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACAA,IAQA,QANAA,EAAA,iBAAAA,EACAC,EAAAC,eAAAF,GACAA,GAIAgZ,SACAzX,KAAAsa,YAAA5d,KAAAsD,KAAAvB,IAEAuB,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAA,QACAY,EAAA4mB,YAAArlB,KAAA2a,MACA3a,KAAA4N,KAAA,gBAIA5N,KAAAmb,YAAAC,SAKAlB,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAsB,UAAA,WACA,OAAAnb,KACA2O,KAAA,CAAe0K,MAAA9N,EAAA3N,GAAAg2B,QAAA,QACfjlB,KAAA,cAAApD,EAAA+N,MAAA/N,EAAA8N,OACA1K,KAAA,cAAApD,EAAAgO,MAAAhO,EAAA8N,QAGA+B,KAAA,WAEA,IAAAA,EAYA,OAbApb,KAAA8xB,SAIA1W,EAAApb,KAAA2a,KAAAc,qBAAA,YACAzb,KAAA8xB,MAAAvmB,EAAAmP,MAAAU,GAEApb,KAAA8xB,MAAA,IAAAvmB,EAAA0mB,KAGAjyB,KAAA2a,KAAA0K,YAAArlB,KAAA8xB,MAAAnX,OAGA3a,KAAA8xB,OAGAtX,OAAA,WACA,OAAAxa,KAAA2a,KAAAE,YAAA,aAAA7a,KAAA2a,KAAAE,WAAApD,UAAA,sBAAAzX,KAAA2a,KAAAE,WAAApD,SACAzX,KAAA2a,KAAAE,WADA,MAKAgZ,KAAA,WACA,IAAAlU,EAAA3f,KAAA2a,KAAAgV,eAOA,OALAhQ,GACA3f,KACA0Y,MAAA,QAAAiH,EAAA5a,EAAA,QACA2T,MAAA,OAAAiH,EAAA8O,EAAA,QAEAzuB,MAIAqK,OAAA,WAKA,OAJArK,KAAAwa,UACAxa,KAAAwa,SAAAmX,YAAA3xB,KAAA2a,MAGA3a,MAEA8Y,MAAA,WAEA,KAAA9Y,KAAA2a,KAAAiX,iBACA5xB,KAAA2a,KAAAgX,YAAA3xB,KAAA2a,KAAAkX,WASA,cANA7xB,KAAA8xB,MAGAvmB,EAAA4N,OAAAxL,KAAAkN,YACA7a,KAAA2a,KAAA0K,YAAA9Z,EAAA4N,OAAAxL,MAEA3N,MAEAugB,MAAA,SAAA/F,GAEAxa,KAAAyjB,iBAGA,IAAA9I,EAAA3a,KAAA2a,KAGA4F,EAAAmD,EAAA/I,EAAAgJ,WAAA,IASA,OANAnJ,GACAA,EAAAG,MAAAH,GAAA6K,YAAA9E,EAAA5F,MAEAA,EAAAE,WAAA2W,aAAAjR,EAAA5F,OAAAmZ,aAGAvT,MASAhV,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA8Y,SAAA,WACA,OAAA/zB,KAAAwa,SAAA+W,YAGAla,SAAA,WACA,OAAArX,KAAAwa,SAAAjY,MAAAvC,OAGAg0B,KAAA,WACA,OAAAh0B,KAAA+zB,WAAA/zB,KAAAqX,WAAA,IAGA4c,SAAA,WACA,OAAAj0B,KAAA+zB,WAAA/zB,KAAAqX,WAAA,IAGA3S,QAAA,WACA,IAAAnI,EAAAyD,KAAAqX,WAAA,EACAhZ,EAAA2B,KAAAwa,SASA,OANAnc,EAAAwlB,cAAA7jB,MAAAyE,IAAAzE,KAAAzD,GAGA8B,aAAAkN,EAAA2N,KACA7a,EAAAsc,KAAA0K,YAAAhnB,EAAA+c,OAAAT,MAEA3a,MAGAk0B,SAAA,WACA,IAAA33B,EAAAyD,KAAAqX,WAKA,OAHA9a,EAAA,GACAyD,KAAAwa,SAAAqJ,cAAA7jB,MAAAyE,IAAAzE,KAAAzD,EAAA,GAEAyD,MAGAm0B,MAAA,WACA,IAAA91B,EAAA2B,KAAAwa,SASA,OANAnc,EAAAsc,KAAA0K,YAAArlB,KAAA2a,MAGAtc,aAAAkN,EAAA2N,KACA7a,EAAAsc,KAAA0K,YAAAhnB,EAAA+c,OAAAT,MAEA3a,MAGA8S,KAAA,WAIA,OAHA9S,KAAAqX,WAAA,GACArX,KAAAwa,SAAAqJ,cAAA7jB,MAAAyE,IAAAzE,KAAA,GAEAA,MAGAo0B,OAAA,SAAA31B,GACAA,EAAA4L,SAEA,IAAA9N,EAAAyD,KAAAqX,WAIA,OAFArX,KAAAwa,SAAA/V,IAAAhG,EAAAlC,GAEAyD,MAGA4jB,MAAA,SAAAnlB,GACAA,EAAA4L,SAEA,IAAA9N,EAAAyD,KAAAqX,WAIA,OAFArX,KAAAwa,SAAA/V,IAAAhG,EAAAlC,EAAA,GAEAyD,QAIAuL,EAAA8oB,KAAA9oB,EAAA4O,OAAA,CAEAtc,OAAA,WACAmC,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAA,SAGAmC,KAAAs0B,QAAA,IAIApa,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAxP,OAAA,WAEA,QAAA9N,EAAAyD,KAAAs0B,QAAAryB,OAAA,EAA2C1F,GAAA,EAAQA,IACnDyD,KAAAs0B,QAAA/3B,IACAyD,KAAAs0B,QAAA/3B,GAAAg4B,SAMA,OALAv0B,KAAAs0B,QAAA,GAGA/oB,EAAA0P,QAAA9c,UAAAkM,OAAA3N,KAAAsD,MAEAA,OAKAua,UAAA,CAEAia,KAAA,WACA,OAAAx0B,KAAAob,OAAA2I,IAAA,IAAAxY,EAAA8oB,UAMA9oB,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEAwZ,SAAA,SAAAh2B,GAQA,OANAuB,KAAA00B,OAAAj2B,aAAA8M,EAAA8oB,KAAA51B,EAAAuB,KAAAwa,SAAAga,OAAA/vB,IAAAhG,GAGAuB,KAAA00B,OAAAJ,QAAAvuB,KAAA/F,MAGAA,KAAA2O,KAAA,gBAAA3O,KAAA00B,OAAA/lB,KAAA,aAGA4lB,OAAA,WAEA,cADAv0B,KAAA00B,OACA10B,KAAA2O,KAAA,gBAKApD,EAAAopB,SAAAppB,EAAA4O,OAAA,CAEAtc,OAAA,WACAmC,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAA,aAGAmC,KAAAs0B,QAAA,IAIApa,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAxP,OAAA,WAEA,QAAA9N,EAAAyD,KAAAs0B,QAAAryB,OAAA,EAA2C1F,GAAA,EAAQA,IACnDyD,KAAAs0B,QAAA/3B,IACAyD,KAAAs0B,QAAA/3B,GAAAq4B,SAMA,OALA50B,KAAAs0B,QAAA,GAGAt0B,KAAAwa,SAAAqJ,cAAA7jB,MAEAA,OAKAua,UAAA,CAEAsa,KAAA,WACA,OAAA70B,KAAAob,OAAA2I,IAAA,IAAAxY,EAAAopB,cAMAppB,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA6Z,SAAA,SAAAr2B,GAQA,OANAuB,KAAA+0B,QAAAt2B,aAAA8M,EAAAopB,SAAAl2B,EAAAuB,KAAAwa,SAAAqa,OAAApwB,IAAAhG,GAGAuB,KAAA+0B,QAAAT,QAAAvuB,KAAA/F,MAGAA,KAAA2O,KAAA,qBAAA3O,KAAA+0B,QAAApmB,KAAA,aAGAimB,OAAA,WAEA,cADA50B,KAAA+0B,QACA/0B,KAAA2O,KAAA,qBAIApD,EAAAyP,SAAAzP,EAAA4O,OAAA,CAEAtc,OAAA,SAAAqd,GACAlb,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAAqd,EAAA,aAGAlb,KAAAkb,QAIAhB,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEA6F,GAAA,SAAAlb,EAAAoQ,EAAAyJ,GACA,OAAAre,KAAA+jB,IAAA,IAAAxY,EAAA8gB,MAAAD,OAAA5nB,EAAAoQ,EAAAyJ,IAGA+N,OAAA,SAAA/O,GAQA,OANArd,KAAA8Y,QAGA,mBAAAuE,GACAA,EAAA3gB,KAAAsD,WAEAA,MAGAme,KAAA,WACA,cAAAne,KAAAxB,KAAA,KAGA2gB,SAAA,WACA,OAAAnf,KAAAme,QAGAxP,KAAA,SAAAnP,EAAAmD,EAAA/F,GAEA,MADA,aAAA4C,MAAA,qBACA+L,EAAAkP,UAAAtc,UAAAwQ,KAAAjS,KAAAsD,KAAAR,EAAAmD,EAAA/F,KAKA2d,UAAA,CAEAya,SAAA,SAAA9Z,EAAAmC,GACA,OAAArd,KAAAob,OAAA4Z,SAAA9Z,EAAAmC,OAMA9R,EAAAsO,OAAAtO,EAAAyP,SAAAzP,EAAA+b,GAAA,CAEAhB,KAAA,SAAAne,EAAAyG,GACA,iBAAA5O,KAAAunB,SAAAvnB,MAAAkb,KACAlb,KAAA2O,KAAA,CAAiBwc,GAAA,IAAA5f,EAAAkX,OAAAta,GAAA8sB,GAAA,IAAA1pB,EAAAkX,OAAA7T,KACjB5O,KAAA2O,KAAA,CAAiBiS,GAAA,IAAArV,EAAAkX,OAAAta,GAAA0Y,GAAA,IAAAtV,EAAAkX,OAAA7T,MAGjBsU,GAAA,SAAA/a,EAAAyG,GACA,iBAAA5O,KAAAunB,SAAAvnB,MAAAkb,KACAlb,KAAA2O,KAAA,CAAiB2B,GAAA,IAAA/E,EAAAkX,OAAAta,GAAAoI,GAAA,IAAAhF,EAAAkX,OAAA7T,KACjB5O,KAAA2O,KAAA,CAAiBoD,GAAA,IAAAxG,EAAAkX,OAAAta,GAAAoJ,GAAA,IAAAhG,EAAAkX,OAAA7T,QAKjBrD,EAAAsO,OAAAtO,EAAA0mB,KAAA,CAEA+C,SAAA,SAAA9Z,EAAAmC,GACA,OAAArd,KAAA+jB,IAAA,IAAAxY,EAAAyP,SAAAE,IAAAkR,OAAA/O,MAKA9R,EAAA8gB,KAAA9gB,EAAA4O,OAAA,CAEAtc,OAAA,OAGAqc,QAAA3O,EAAA0P,QAGApB,OAAA,CAEAuS,OAAA,SAAApvB,GAcA,OAbA,iBAAAA,gBAAAuO,EAAAkX,UACAzlB,EAAA,CACAwH,OAAAwV,UAAA,GACApF,MAAAoF,UAAA,GACAqE,QAAArE,UAAA,KAKA,MAAAhd,EAAAqhB,SAAAre,KAAA2O,KAAA,eAAA3R,EAAAqhB,SACA,MAAArhB,EAAA4X,OAAA5U,KAAA2O,KAAA,aAAA3R,EAAA4X,OACA,MAAA5X,EAAAwH,QAAAxE,KAAA2O,KAAA,aAAApD,EAAAkX,OAAAzlB,EAAAwH,SAEAxE,SAMAuL,EAAA2pB,QAAA3pB,EAAA4O,OAAA,CAEAtc,OAAA,UAGAqc,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAsE,KAAA,WACA,cAAAne,KAAAxB,KAAA,KAGA4tB,OAAA,SAAA/O,GAQA,OANArd,KAAA8Y,QAGA,mBAAAuE,GACAA,EAAA3gB,KAAAsD,WAEAA,MAGAmf,SAAA,WACA,OAAAnf,KAAAme,QAGAxP,KAAA,SAAAnP,EAAAmD,EAAA/F,GAEA,MADA,aAAA4C,MAAA,oBACA+L,EAAAkP,UAAAtc,UAAAwQ,KAAAjS,KAAAsD,KAAAR,EAAAmD,EAAA/F,KAMA2d,UAAA,CAEA4V,QAAA,SAAA7hB,EAAAD,EAAAgP,GACA,OAAArd,KAAAob,OAAA+U,QAAA7hB,EAAAD,EAAAgP,OAKA9R,EAAAsO,OAAAtO,EAAA0mB,KAAA,CAEA9B,QAAA,SAAA7hB,EAAAD,EAAAgP,GACA,OAAArd,KAAA+jB,IAAA,IAAAxY,EAAA2pB,SAAA9I,OAAA/O,GAAA1O,KAAA,CACAxG,EAAA,EACAyG,EAAA,EACAN,QACAD,SACA8mB,aAAA,sBAKA5pB,EAAA8hB,MAAA9hB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,GACAuB,KAAAsa,YAAA5d,KAAAsD,KAAAvB,IAIAyb,QAAA3O,EAAA0P,UAIA1P,EAAA6pB,KAAA7pB,EAAA4O,OAAA,CAEAtc,OAAA,SAAAY,EAAAyb,GAKA,GAHAla,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAAY,IAGAyb,EACA,QAAAuQ,KAAAvQ,EAAA/b,UACA,mBAAA+b,EAAA/b,UAAAssB,KACAzqB,KAAAyqB,GAAAvQ,EAAA/b,UAAAssB,KAIAvQ,QAAA3O,EAAA0P,QAGApB,OAAA,CAEAwb,MAAA,SAAAC,GAEA,KAAAt1B,KAAA2a,KAAAiX,iBACA5xB,KAAA2a,KAAAgX,YAAA3xB,KAAA2a,KAAAkX,WAKA,OAFA7xB,KAAA2a,KAAA0K,YAAA3mB,EAAA62B,eAAAD,IAEAt1B,SAMAuL,EAAAsO,OAAAtO,EAAA6Z,OAAA,CAEA3mB,QAAA,SAAAA,EAAAyb,GACA,OAAAla,KAAA+jB,IAAA,IAAAxY,EAAA6pB,KAAA32B,EAAAyb,OAIA3O,EAAAjO,OAAAiO,EAAA4O,OAAA,CAEAtc,OAAA,SAGAqc,QAAA3O,EAAAkP,UAEAF,UAAA,CAEAib,OAAA,WACA,OAAAx1B,KAAA+jB,IAAA,IAAAxY,EAAAjO,YAKAiO,EAAAkqB,IAAAlqB,EAAA4O,OAAA,CAEAtc,OAAA,MAGAqc,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEApb,QAAA,SAAAA,EAAAi3B,GAEA,OAAA11B,KAAA2O,KAAA,QAAA+mB,GAAA,QAAAj3B,EAAA8M,EAAA+N,SAKAiB,UAAA,CAEAob,IAAA,SAAAl3B,EAAAi3B,GACA,OAAA11B,KAAA+jB,IAAA,IAAAxY,EAAAkqB,KAAAh3B,UAAAi3B,OAIAnqB,EAAAqqB,KAAArqB,EAAA4O,OAAA,CAEAtc,OAAA,OAGAqc,QAAA3O,EAAA8hB,MAGA9S,UAAA,CAEAlL,KAAA,SAAAf,EAAAD,GACA,OAAArO,KAAA+jB,IAAA,IAAAxY,EAAAqqB,MAAAhoB,KAAAU,EAAAD,OAIA9C,EAAAsqB,OAAAtqB,EAAA4O,OAAA,CAEAtc,OAAA,SAGAqc,QAAA3O,EAAA8hB,MAGA9S,UAAA,CAEA7J,OAAA,SAAA9C,GACA,OAAA5N,KAAA+jB,IAAA,IAAAxY,EAAAsqB,QAAAvX,GAAA,IAAA/S,EAAAkX,OAAA7U,GAAAqV,OAAA,IAAAlC,KAAA,SAKAxV,EAAAsO,OAAAtO,EAAAsqB,OAAAtqB,EAAA+b,GAAA,CAEAhJ,GAAA,SAAAA,GACA,OAAAte,KAAA2O,KAAA,IAAA2P,IAGAC,GAAA,SAAAA,GACA,OAAAve,KAAAse,GAAAC,MAIAhT,EAAAuqB,QAAAvqB,EAAA4O,OAAA,CAEAtc,OAAA,UAGAqc,QAAA3O,EAAA8hB,MAGA9S,UAAA,CAEAwb,QAAA,SAAAznB,EAAAD,GACA,OAAArO,KAAA+jB,IAAA,IAAAxY,EAAAuqB,SAAAloB,KAAAU,EAAAD,GAAA0S,KAAA,SAKAxV,EAAAsO,OAAAtO,EAAAuqB,QAAAvqB,EAAAqqB,KAAArqB,EAAA+b,GAAA,CAEAhJ,GAAA,SAAAA,GACA,OAAAte,KAAA2O,KAAA,KAAA2P,IAGAC,GAAA,SAAAA,GACA,OAAAve,KAAA2O,KAAA,KAAA4P,MAKAhT,EAAAsO,OAAAtO,EAAAsqB,OAAAtqB,EAAAuqB,QAAA,CAEA3tB,EAAA,SAAAA,GACA,aAAAA,EAAAnI,KAAAsQ,KAAAtQ,KAAAse,KAAAte,KAAAsQ,GAAAnI,EAAAnI,KAAAse,OAGA1P,EAAA,SAAAA,GACA,aAAAA,EAAA5O,KAAAuQ,KAAAvQ,KAAAue,KAAAve,KAAAuQ,GAAA3B,EAAA5O,KAAAue,OAGAjO,GAAA,SAAAnI,GACA,aAAAA,EAAAnI,KAAA2O,KAAA,MAAA3O,KAAA2O,KAAA,KAAAxG,IAGAoI,GAAA,SAAA3B,GACA,aAAAA,EAAA5O,KAAA2O,KAAA,MAAA3O,KAAA2O,KAAA,KAAAC,IAGAN,MAAA,SAAAA,GACA,aAAAA,EAAA,EAAAtO,KAAAse,KAAAte,KAAAse,GAAA,IAAA/S,EAAAkX,OAAAnU,GAAA2U,OAAA,KAGA5U,OAAA,SAAAA,GACA,aAAAA,EAAA,EAAArO,KAAAue,KAAAve,KAAAue,GAAA,IAAAhT,EAAAkX,OAAApU,GAAA4U,OAAA,KAGArV,KAAA,SAAAU,EAAAD,GACA,IAAAhQ,EAAAmlB,EAAAxjB,KAAAsO,EAAAD,GAEA,OAAArO,KACAse,GAAA,IAAA/S,EAAAkX,OAAApkB,EAAAiQ,OAAA2U,OAAA,IACA1E,GAAA,IAAAhT,EAAAkX,OAAApkB,EAAAgQ,QAAA4U,OAAA,OAGA1X,EAAAyqB,KAAAzqB,EAAA4O,OAAA,CAEAtc,OAAA,OAGAqc,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEAuD,MAAA,WACA,WAAA7R,EAAAmV,WAAA,CACA,CAAA1gB,KAAA2O,KAAA,MAAA3O,KAAA2O,KAAA,OACA,CAAA3O,KAAA2O,KAAA,MAAA3O,KAAA2O,KAAA,UAIAK,KAAA,SAAA4R,EAAAC,EAAA9O,EAAAR,GACA,aAAAqP,EACA5gB,KAAAod,SAEAwD,OADA,IAAAC,EACA,CAAcD,KAAAC,KAAA9O,KAAAR,MAEd,IAAAhG,EAAAmV,WAAAE,GAAAD,SAEA3gB,KAAA2O,KAAAiS,KAGAG,KAAA,SAAA5Y,EAAAyG,GACA,OAAA5O,KAAA2O,KAAA3O,KAAAod,QAAA2D,KAAA5Y,EAAAyG,GAAA+R,WAGA/S,KAAA,SAAAU,EAAAD,GACA,IAAAhQ,EAAAmlB,EAAAxjB,KAAAsO,EAAAD,GAEA,OAAArO,KAAA2O,KAAA3O,KAAAod,QAAAxP,KAAAvP,EAAAiQ,MAAAjQ,EAAAgQ,QAAAsS,YAKApG,UAAA,CAEApJ,KAAA,SAAAyP,EAAAC,EAAA9O,EAAAR,GAGA,OAAAhG,EAAAyqB,KAAA73B,UAAA6Q,KAAAsc,MACAtrB,KAAA+jB,IAAA,IAAAxY,EAAAyqB,MACA,MAAApV,EAAA,CAAAA,EAAAC,EAAA9O,EAAAR,GAAA,eAMAhG,EAAA0qB,SAAA1qB,EAAA4O,OAAA,CAEAtc,OAAA,WAGAqc,QAAA3O,EAAA8hB,MAGA9S,UAAA,CAEAsB,SAAA,SAAAxd,GAEA,OAAA2B,KAAA+jB,IAAA,IAAAxY,EAAA0qB,UAAAjnB,KAAA3Q,GAAA,IAAAkN,EAAAmV,gBAKAnV,EAAA2qB,QAAA3qB,EAAA4O,OAAA,CAEAtc,OAAA,UAGAqc,QAAA3O,EAAA8hB,MAGA9S,UAAA,CAEA4b,QAAA,SAAA93B,GAEA,OAAA2B,KAAA+jB,IAAA,IAAAxY,EAAA2qB,SAAAlnB,KAAA3Q,GAAA,IAAAkN,EAAAmV,gBAMAnV,EAAAsO,OAAAtO,EAAA0qB,SAAA1qB,EAAA2qB,QAAA,CAEA9Y,MAAA,WACA,OAAApd,KAAAo2B,SAAAp2B,KAAAo2B,OAAA,IAAA7qB,EAAAmV,WAAA1gB,KAAA2O,KAAA,aAGAK,KAAA,SAAA3Q,GACA,aAAAA,EACA2B,KAAAod,QACApd,KAAA8Y,QAAAnK,KAAA,0BAAAtQ,IAAA2B,KAAAo2B,OAAA,IAAA7qB,EAAAmV,WAAAriB,KAGAya,MAAA,WAEA,cADA9Y,KAAAo2B,OACAp2B,MAGA+gB,KAAA,SAAA5Y,EAAAyG,GACA,OAAA5O,KAAA2O,KAAA,SAAA3O,KAAAod,QAAA2D,KAAA5Y,EAAAyG,KAGAhB,KAAA,SAAAU,EAAAD,GACA,IAAAhQ,EAAAmlB,EAAAxjB,KAAAsO,EAAAD,GAEA,OAAArO,KAAA2O,KAAA,SAAA3O,KAAAod,QAAAxP,KAAAvP,EAAAiQ,MAAAjQ,EAAAgQ,YAMA9C,EAAAsO,OAAAtO,EAAAyqB,KAAAzqB,EAAA0qB,SAAA1qB,EAAA2qB,QAAA,CAEAG,WAAA9qB,EAAAmV,WAEAvY,EAAA,SAAAA,GACA,aAAAA,EAAAnI,KAAAihB,OAAA9Y,EAAAnI,KAAA+gB,KAAA5Y,EAAAnI,KAAAihB,OAAArS,IAGAA,EAAA,SAAAA,GACA,aAAAA,EAAA5O,KAAAihB,OAAArS,EAAA5O,KAAA+gB,KAAA/gB,KAAAihB,OAAA9Y,EAAAyG,IAGAN,MAAA,SAAAA,GACA,IAAA3L,EAAA3C,KAAAihB,OAEA,aAAA3S,EAAA3L,EAAA2L,MAAAtO,KAAA4N,KAAAU,EAAA3L,EAAA0L,SAGAA,OAAA,SAAAA,GACA,IAAA1L,EAAA3C,KAAAihB,OAEA,aAAA5S,EAAA1L,EAAA0L,OAAArO,KAAA4N,KAAAjL,EAAA2L,MAAAD,MAGA9C,EAAA+qB,KAAA/qB,EAAA4O,OAAA,CAEAtc,OAAA,OAGAqc,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEAwc,WAAA9qB,EAAAqW,UAEAxE,MAAA,WACA,OAAApd,KAAAo2B,SAAAp2B,KAAAo2B,OAAA,IAAA7qB,EAAAqW,UAAA5hB,KAAA2O,KAAA,QAGAK,KAAA,SAAAnS,GACA,aAAAA,EACAmD,KAAAod,QACApd,KAAA8Y,QAAAnK,KAAA,qBAAA9R,IAAAmD,KAAAo2B,OAAA,IAAA7qB,EAAAqW,UAAA/kB,KAGAic,MAAA,WAEA,cADA9Y,KAAAo2B,OACAp2B,MAGA+gB,KAAA,SAAA5Y,EAAAyG,GACA,OAAA5O,KAAA2O,KAAA,IAAA3O,KAAAod,QAAA2D,KAAA5Y,EAAAyG,KAGAzG,EAAA,SAAAA,GACA,aAAAA,EAAAnI,KAAAihB,OAAA9Y,EAAAnI,KAAA+gB,KAAA5Y,EAAAnI,KAAAihB,OAAArS,IAGAA,EAAA,SAAAA,GACA,aAAAA,EAAA5O,KAAAihB,OAAArS,EAAA5O,KAAA+gB,KAAA/gB,KAAAihB,OAAA9Y,EAAAyG,IAGAhB,KAAA,SAAAU,EAAAD,GACA,IAAAhQ,EAAAmlB,EAAAxjB,KAAAsO,EAAAD,GAEA,OAAArO,KAAA2O,KAAA,IAAA3O,KAAAod,QAAAxP,KAAAvP,EAAAiQ,MAAAjQ,EAAAgQ,UAGAC,MAAA,SAAAA,GACA,aAAAA,EAAAtO,KAAAihB,OAAA3S,MAAAtO,KAAA4N,KAAAU,EAAAtO,KAAAihB,OAAA5S,SAGAA,OAAA,SAAAA,GACA,aAAAA,EAAArO,KAAAihB,OAAA5S,OAAArO,KAAA4N,KAAA5N,KAAAihB,OAAA3S,MAAAD,KAMAkM,UAAA,CAEAxL,KAAA,SAAAlS,GAEA,OAAAmD,KAAA+jB,IAAA,IAAAxY,EAAA+qB,MAAAtnB,KAAAnS,GAAA,IAAA0O,EAAAqW,eAKArW,EAAA2kB,MAAA3kB,EAAA4O,OAAA,CAEAtc,OAAA,QAGAqc,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEA0c,KAAA,SAAAC,GACA,IAAAA,EAAA,OAAAx2B,KAEA,IAAAqrB,EAAArrB,KACAy2B,EAAA,IAAA1rB,EAAAmlB,MAoCA,OAjCA3kB,EAAAye,GAAAyM,EAAA,kBACAlrB,EAAA4e,IAAAsM,GAEA,IAAAp4B,EAAAgtB,EAAA7Q,OAAAjP,EAAA2pB,SAEA,OAAA72B,IAGA,GAAAgtB,EAAA/c,SAAA,GAAA+c,EAAAhd,UACAgd,EAAAzd,KAAA6oB,EAAAnoB,MAAAmoB,EAAApoB,QAGAhQ,GAAA,GAAAA,EAAAiQ,SAAA,GAAAjQ,EAAAgQ,UACAhQ,EAAAuP,KAAAyd,EAAA/c,QAAA+c,EAAAhd,UAGA,mBAAAgd,EAAAqL,SACArL,EAAAqL,QAAAh6B,KAAA2uB,EAAA,CACA/c,MAAAmoB,EAAAnoB,MACAD,OAAAooB,EAAApoB,OACAsoB,MAAAF,EAAAnoB,MAAAmoB,EAAApoB,OACAmoB,WAIAjrB,EAAAye,GAAAyM,EAAA,iBAAA1xB,GACAwG,EAAA4e,IAAAsM,GAEA,mBAAApL,EAAAuL,QACAvL,EAAAuL,OAAAl6B,KAAA2uB,EAAAtmB,KAIA/E,KAAA2O,KAAA,OAAA8nB,EAAAI,IAAA72B,KAAA62B,IAAAL,EAAAjrB,EAAA+N,QAGAwd,OAAA,SAAAA,GAEA,OADA92B,KAAA02B,QAAAI,EACA92B,MAGAmG,MAAA,SAAAA,GAEA,OADAnG,KAAA42B,OAAAzwB,EACAnG,OAKAua,UAAA,CAEA0V,MAAA,SAAAnH,EAAAxa,EAAAD,GACA,OAAArO,KAAA+jB,IAAA,IAAAxY,EAAA2kB,OAAAqG,KAAAzN,GAAAlb,KAAAU,GAAA,EAAAD,GAAAC,GAAA,OAKA/C,EAAA0gB,KAAA1gB,EAAA4O,OAAA,CAEAtc,OAAA,WACAmC,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAA,SAEAmC,KAAAujB,IAAA2I,QAAA,IAAA3gB,EAAAkX,OAAA,KACAziB,KAAA+2B,UAAA,EACA/2B,KAAAg3B,QAAA,EAGAh3B,KAAA2O,KAAA,cAAApD,EAAA5J,SAAAkc,MAAA,iBAIA3D,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEA1R,EAAA,SAAAA,GAEA,aAAAA,EACAnI,KAAA2O,KAAA,KAEA3O,KAAA2O,KAAA,IAAAxG,IAGAyG,EAAA,SAAAA,GACA,IAAAqoB,EAAAj3B,KAAA2O,KAAA,KACA3R,EAAA,iBAAAi6B,IAAAj3B,KAAAihB,OAAArS,EAAA,EAGA,aAAAA,EACA,iBAAAqoB,IAAAj6B,EAAAi6B,EAEAj3B,KAAA2O,KAAA,qBAAAC,EAAAkR,UAAAlR,EAAA5R,EAAA4R,IAGA0B,GAAA,SAAAnI,GACA,aAAAA,EAAAnI,KAAAihB,OAAA3Q,GAAAtQ,KAAAmI,IAAAnI,KAAAihB,OAAA3S,MAAA,IAGAiC,GAAA,SAAA3B,GACA,aAAAA,EAAA5O,KAAAihB,OAAA1Q,GAAAvQ,KAAA4O,IAAA5O,KAAAihB,OAAA5S,OAAA,IAGAinB,KAAA,SAAAA,GAEA,YAAAA,EAAA,CAGA,IAFA,IAAAA,EAAA,GACA/D,EAAAvxB,KAAA2a,KAAA6K,WACAjpB,EAAA,EAAAuG,EAAAyuB,EAAAtvB,OAA6C1F,EAAAuG,IAASvG,EAGtD,GAAAA,GAAA,GAAAg1B,EAAAh1B,GAAA26B,UAAA,GAAA3rB,EAAAmP,MAAA6W,EAAAh1B,IAAAgnB,IAAA4T,WACA7B,GAAA,MAIAA,GAAA/D,EAAAh1B,GAAA66B,YAGA,OAAA9B,EAMA,GAFAt1B,KAAA8Y,QAAA1J,OAAA,GAEA,mBAAAkmB,EAEAA,EAAA54B,KAAAsD,eAEO,CAEPs1B,IAAAtwB,MAAA,MAGA,QAAAzI,EAAA,EAAA+gB,EAAAgY,EAAArzB,OAAyC1F,EAAA+gB,EAAQ/gB,IACjDyD,KAAAq3B,MAAA/B,EAAA/4B,IAAA+6B,UAIA,OAAAt3B,KAAAoP,OAAA,GAAAihB,WAGAziB,KAAA,SAAAA,GACA,OAAA5N,KAAA2O,KAAA,YAAAf,GAAAyiB,WAGAnE,QAAA,SAAA1uB,GAEA,aAAAA,EACAwC,KAAAujB,IAAA2I,SAGAlsB,KAAAujB,IAAA2I,QAAA,IAAA3gB,EAAAkX,OAAAjlB,GAEAwC,KAAAqwB,YAGA5K,MAAA,WACA,IAAA9K,GAAA3a,KAAAu3B,UAAAv3B,KAAAu3B,YAAAv3B,MAAA2a,KAGA8K,EAAAla,EAAA4R,MAAAjZ,IAAAqH,EAAA4R,MAAAQ,kBAAAhD,EAAA6K,YAAA,SAAAtN,GACA,OAAA3M,EAAAmP,MAAAxC,KAIA,WAAA3M,EAAAtH,IAAAwhB,IAGA4K,QAAA,SAAAA,GAMA,GAJA,kBAAAA,IACArwB,KAAA+2B,SAAA1G,GAGArwB,KAAA+2B,SAAA,CACA,IAAA1L,EAAArrB,KACAw3B,EAAA,EACA3hB,EAAA7V,KAAAujB,IAAA2I,QAAA,IAAA3gB,EAAAkX,OAAAziB,KAAA2O,KAAA,cAEA3O,KAAAylB,QAAA/W,KAAA,WACA1O,KAAAujB,IAAA4T,WACA9L,EAAAkM,YACAv3B,KAAA2O,KAAA,IAAA0c,EAAA1c,KAAA,MACA,MAAA3O,KAAAs1B,OACAkC,GAAA3hB,GAEA7V,KAAA2O,KAAA,KAAAkH,EAAA2hB,GACAA,EAAA,MAKAx3B,KAAAkrB,KAAA,WAGA,OAAAlrB,MAGAoP,MAAA,SAAAA,GAEA,OADApP,KAAAg3B,SAAA5nB,EACApP,MAGAqb,QAAA,SAAAre,GAGA,OAFAgD,KAAAujB,IAAAvmB,EACAgD,KAAAujB,IAAA2I,QAAA,IAAA3gB,EAAAkX,OAAAzlB,EAAAkvB,SAAA,KACAlsB,OAKAua,UAAA,CAEA+a,KAAA,SAAAA,GACA,OAAAt1B,KAAA+jB,IAAA,IAAAxY,EAAA0gB,MAAAqJ,SAGA3xB,MAAA,SAAA2xB,GACA,OAAAt1B,KAAA+jB,IAAA,IAAAxY,EAAA0gB,MAAAtoB,MAAA2xB,OAMA/pB,EAAAksB,MAAAlsB,EAAA4O,OAAA,CAEAtc,OAAA,QAGAqc,QAAA3O,EAAA8hB,MAGAxT,OAAA,CAEAyb,KAAA,SAAAA,GACA,aAAAA,EAAAt1B,KAAA2a,KAAAyc,aAAAp3B,KAAAujB,IAAA4T,SAAA,UAEA,mBAAA7B,IAAA54B,KAAAsD,gBAAA2D,MAAA2xB,GAEAt1B,OAGA0V,GAAA,SAAAA,GACA,OAAA1V,KAAA2O,KAAA,KAAA+G,IAGAG,GAAA,SAAAA,GACA,OAAA7V,KAAA2O,KAAA,KAAAkH,IAGAyhB,QAAA,WAEA,IAAA75B,EAAAuC,KAAAwa,OAAAjP,EAAA0gB,MAMA,OAHAjsB,KAAAujB,IAAA4T,UAAA,EAGAn3B,KAAA6V,GAAApY,EAAA8lB,IAAA2I,QAAAzuB,EAAAkR,KAAA,cAAAA,KAAA,IAAAlR,EAAA0K,SAMAoD,EAAAsO,OAAAtO,EAAA0gB,KAAA1gB,EAAAksB,MAAA,CAEA9zB,MAAA,SAAA2xB,GAQA,OANA,IAAAt1B,KAAAg3B,QACAh3B,KAAA8Y,QAGA9Y,KAAA2a,KAAA0K,YAAA3mB,EAAA62B,eAAAD,IAEAt1B,MAGAq3B,MAAA,SAAA/B,GACA,IAAA3a,GAAA3a,KAAAu3B,UAAAv3B,KAAAu3B,YAAAv3B,MAAA2a,KACA0c,EAAA,IAAA9rB,EAAAksB,MASA,OANA,IAAAz3B,KAAAg3B,QACAh3B,KAAA8Y,QAGA6B,EAAA0K,YAAAgS,EAAA1c,MAEA0c,EAAA/B,SAGAxc,MAAA,WAIA,IAHA,IAAA6B,GAAA3a,KAAAu3B,UAAAv3B,KAAAu3B,YAAAv3B,MAAA2a,KAGAA,EAAAiX,iBACAjX,EAAAgX,YAAAhX,EAAAkX,WAEA,OAAA7xB,MAGAiC,OAAA,WACA,OAAAjC,KAAA2a,KAAA+c,2BAIAnsB,EAAAosB,SAAApsB,EAAA4O,OAAA,CAEAtc,OAAA,WAGAqc,QAAA3O,EAAA6Z,OAGA5K,OAAAjP,EAAA0gB,KAGA1R,UAAA,CACA8b,WAAA9qB,EAAAqW,UAEA7S,KAAA,SAAAlS,GAMA,IAJA,IAAAkS,EAAA,IAAAxD,EAAAosB,SACAC,EAAA53B,KAAA0kB,MAAAtJ,OAAArM,KAAAlS,GAGAmD,KAAA2a,KAAAiX,iBACA7iB,EAAA4L,KAAA0K,YAAArlB,KAAA2a,KAAA4K,YAQA,OALAvlB,KAAA2a,KAAA0K,YAAAtW,EAAA4L,MAGA5L,EAAAJ,KAAA,WAAAipB,EAAArsB,EAAA+N,OAEAtZ,MAGAod,MAAA,WACA,IAAAwa,EAAA53B,KAAA43B,QAEA,OAAAA,IAAAxa,QAAA,MAGApO,KAAA,SAAAnS,GACA,IAAA+6B,EAAA53B,KAAA43B,QACA7V,EAAA,KAMA,OAJA6V,IACA7V,EAAA6V,EAAA5oB,KAAAnS,IAGA,MAAAA,EAAAklB,EAAA/hB,MAGA43B,MAAA,WACA,IAAA7oB,EAAA/O,KAAAu3B,WAEA,GAAAxoB,EACA,OAAAA,EAAAoN,UAAA,SAGAob,SAAA,WACA,GAAAv3B,KAAA2a,KAAA4K,YAAA,YAAAvlB,KAAA2a,KAAA4K,WAAA9N,SACA,OAAAlM,EAAAmP,MAAA1a,KAAA2a,KAAA4K,gBAKAha,EAAAwP,OAAAxP,EAAA4O,OAAA,CAEAtc,OAAA,WACAmC,KAAAsa,YAAA5d,KAAAsD,KAAAuL,EAAA1N,OAAA,QAEAmC,KAAA0Y,MAAA,uBAIAwB,QAAA3O,EAAAkP,UAGAF,UAAA,CAEAoB,OAAA,WACA,OAAA3b,KAAA+jB,IAAA,IAAAxY,EAAAwP,YAIAxP,EAAA/J,EAAA+J,EAAA4O,OAAA,CAEAtc,OAAA,IAGAqc,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAqJ,GAAA,SAAAsT,GACA,OAAAx2B,KAAA2O,KAAA,OAAA6nB,EAAAjrB,EAAA+N,QAGA4K,KAAA,SAAApO,GACA,OAAA9V,KAAA2O,KAAA,OAAAmH,EAAAvK,EAAA+N,QAGAxD,OAAA,SAAAA,GACA,OAAA9V,KAAA2O,KAAA,SAAAmH,KAKAyE,UAAA,CAEAsd,KAAA,SAAArB,GACA,OAAAx2B,KAAA+jB,IAAA,IAAAxY,EAAA/J,GAAA0hB,GAAAsT,OAKAjrB,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA6c,OAAA,SAAAtB,GACA,IAAAqB,EAAA,IAAAtsB,EAAA/J,EAOA,MALA,mBAAAg1B,EACAA,EAAA95B,KAAAm7B,KAEAA,EAAA3U,GAAAsT,GAEAx2B,KAAAwa,SAAAuJ,IAAA8T,GAAA9T,IAAA/jB,SAIAuL,EAAAwsB,OAAAxsB,EAAA4O,OAAA,CAEAtc,OAAA,SAGAqc,QAAA3O,EAAAkP,UAGAZ,OAAA,CAEAvL,MAAA,SAAAA,GACA,OAAAtO,KAAA2O,KAAA,cAAAL,IAGAD,OAAA,SAAAA,GACA,OAAArO,KAAA2O,KAAA,eAAAN,IAGA2pB,IAAA,SAAA7vB,EAAAyG,GACA,OAAA5O,KAAA2O,KAAA,OAAAxG,GAAAwG,KAAA,OAAAC,IAGAwd,OAAA,SAAA/O,GAQA,OANArd,KAAA8Y,QAGA,mBAAAuE,GACAA,EAAA3gB,KAAAsD,WAEAA,MAGAmf,SAAA,WACA,cAAAnf,KAAAxB,KAAA,MAKA+b,UAAA,CACA0d,OAAA,SAAA3pB,EAAAD,EAAAgP,GAEA,OAAArd,KAAAob,OAAA6c,OAAA3pB,EAAAD,EAAAgP,OAMA9R,EAAAsO,OAAAtO,EAAA0mB,KAAA,CAEAgG,OAAA,SAAA3pB,EAAAD,EAAAgP,GAEA,OAAArd,KAAA+jB,IAAA,IAAAxY,EAAAwsB,QACAnqB,KAAAU,EAAAD,GACA2pB,IAAA1pB,EAAA,EAAAD,EAAA,GACAR,QAAA,IAAAS,EAAAD,GACAM,KAAA,iBACAyd,OAAA/O,MAKA9R,EAAAsO,OAAAtO,EAAAyqB,KAAAzqB,EAAA0qB,SAAA1qB,EAAA2qB,QAAA3qB,EAAA+qB,KAAA,CAEA2B,OAAA,SAAAA,EAAA3pB,EAAAD,EAAAgP,GACA,IAAA1O,EAAA,WAWA,MARA,OAAAspB,GAAAtpB,EAAA5I,KAAAkyB,GACAtpB,IAAAtJ,KAAA,KAGA4yB,EAAAje,UAAA,aAAAzO,EAAAwsB,OACA/d,UAAA,GACAha,KAAA0kB,MAAAuT,OAAA3pB,EAAAD,EAAAgP,GAEArd,KAAA2O,OAAAspB,MAKA,IAAAC,EAAA,CACA9Z,OAAA,uFACAD,KAAA,2BACAga,OAAA,SAAA16B,EAAA+B,GACA,eAAAA,EAAA/B,IAAA,IAAA+B,IA6VA,SAAA2iB,EAAA3iB,EAAAmD,EAAA/F,EAAAC,GACA,OAAAD,EAAAC,EAAAsC,QAAAoM,EAAAwQ,MAAAmB,KAAA,MAyBA,SAAAoU,EAAAhzB,GACA,OAAAA,EAAA+D,cAAAlD,QAAA,iBAAAxC,EAAAoiB,GACA,OAAAA,EAAA/c,gBAKA,SAAA4X,EAAAtb,GACA,OAAAA,EAAAyE,OAAA,GAAAf,cAAA1D,EAAAyb,MAAA,GAcA,SAAAsF,EAAA+Y,GACA,IAAAnc,EAAAmc,EAAAjZ,SAAA,IACA,UAAAlD,EAAAha,OAAA,IAAAga,IAIA,SAAAuH,EAAA/kB,EAAA6P,EAAAD,GACA,SAAAC,GAAA,MAAAD,EAAA,CACA,IAAA2S,EAAAviB,EAAAwiB,OAEA,MAAA3S,EACAA,EAAA0S,EAAA1S,MAAA0S,EAAA3S,SACA,MAAAA,IACAA,EAAA2S,EAAA3S,OAAA2S,EAAA1S,SAGA,OACAA,QACAD,UAKA,SAAAggB,EAAA1C,EAAAxjB,EAAAyG,GACA,OACAzG,IAAAwjB,EAAAnsB,EAAAoP,EAAA+c,EAAA/uB,EAAA,EACAgS,EAAAzG,EAAAwjB,EAAAhpB,EAAAiM,EAAA+c,EAAA9uB,EAAA,GAKA,SAAAqxB,EAAA1uB,GACA,OAAUA,IAAA,GAAAmD,EAAAnD,EAAA,GAAA5C,EAAA4C,EAAA,GAAA3C,EAAA2C,EAAA,GAAAuF,EAAAvF,EAAA,GAAAivB,EAAAjvB,EAAA,IAYV,SAAA8wB,EAAAtzB,EAAA8Y,GACA9Y,EAAAsT,GAAA,MAAAtT,EAAAsT,GAAAwF,EAAAmL,OAAA3Q,GAAAtT,EAAAsT,GACAtT,EAAAuT,GAAA,MAAAvT,EAAAuT,GAAAuF,EAAAmL,OAAA1Q,GAAAvT,EAAAuT,GAyCA,SAAAmT,EAAA/I,GAEA,QAAApe,EAAAoe,EAAA6K,WAAAvjB,OAAA,EAA0C1F,GAAA,EAAQA,IAClDoe,EAAA6K,WAAAjpB,aAAAwO,EAAA+P,YACA4I,EAAA/I,EAAA6K,WAAAjpB,IAEA,OAAAgP,EAAAmP,MAAAC,GAAAnc,GAAA+M,EAAAoO,IAAAgB,EAAAlD,WAIA,SAAAgV,EAAA9pB,GAeA,OAdA,MAAAA,EAAAwF,IACAxF,EAAAwF,EAAA,EACAxF,EAAAiM,EAAA,EACAjM,EAAA2L,MAAA,EACA3L,EAAA0L,OAAA,GAGA1L,EAAA01B,EAAA11B,EAAA2L,MACA3L,EAAA2M,EAAA3M,EAAA0L,OACA1L,EAAAoP,GAAApP,EAAAwF,EAAAxF,EAAA2L,MACA3L,EAAA4O,GAAA5O,EAAAiM,EAAAjM,EAAA0L,OACA1L,EAAA2N,GAAA3N,EAAAwF,EAAAxF,EAAA2L,MAAA,EACA3L,EAAA4N,GAAA5N,EAAAiM,EAAAjM,EAAA0L,OAAA,EAEA1L,EAYA,SAAA6sB,EAAApwB,GACA,OAAAsU,KAAAa,IAAAnV,GAAA,MAAAA,EAAA,EArgBC,kBAAAoH,QAAA,SAAA7J,GACD,IAAAJ,EAAA+7B,EAAA,GAEAA,EAAA37B,GAAA,SAAAK,GACA,YAAAA,EACA,OAAAgD,KACA,oBAAAhD,GAAAuO,EAAAsT,MAAAtC,MAAAvf,OAAA,mBAAAA,EAAAmhB,KACAne,KAAA2O,KAAAhS,EAAAK,QAIA,IAAAT,EAAA27B,EAAAv7B,GAAAsF,OAAA,EAAmC1F,GAAA,EAAQA,IAC3C,MAAAS,EAAAk7B,EAAAv7B,GAAAJ,KACAyD,KAAA2O,KAAAupB,EAAAC,OAAAx7B,EAAAu7B,EAAAv7B,GAAAJ,IAAAS,EAAAk7B,EAAAv7B,GAAAJ,KAEA,OAAAyD,MAGAuL,EAAAsO,OAAAtO,EAAA0P,QAAA1P,EAAA+b,GAAAgR,KAIA/sB,EAAAsO,OAAAtO,EAAA0P,QAAA1P,EAAA+b,GAAA,CAEA6H,OAAA,SAAAtyB,EAAAyT,EAAAC,GACA,OAAAvQ,KAAA+S,UAAA,CAA2BC,SAAAnW,EAAAyT,KAAAC,QAG3B8e,KAAA,SAAAlnB,EAAAyG,EAAA0B,EAAAC,GACA,UAAAyJ,UAAA/X,QAAA,GAAA+X,UAAA/X,OACAjC,KAAA+S,UAAA,CAAsBsc,KAAAlnB,EAAAmI,GAAA1B,EAAA2B,GAAAD,IACtBtQ,KAAA+S,UAAA,CAAsBwb,MAAApmB,EAAA0mB,MAAAjgB,EAAA0B,KAAAC,QAGtB0e,MAAA,SAAA9mB,EAAAyG,EAAA0B,EAAAC,GACA,UAAAyJ,UAAA/X,QAAA,GAAA+X,UAAA/X,OACAjC,KAAA+S,UAAA,CAAsBkc,MAAA9mB,EAAAmI,GAAA1B,EAAA2B,GAAAD,IACtBtQ,KAAA+S,UAAA,CAAsB+b,OAAA3mB,EAAA4mB,OAAAngB,EAAA0B,KAAAC,QAGtBvC,UAAA,SAAA7F,EAAAyG,GACA,OAAA5O,KAAA+S,UAAA,CAA2B5K,IAAAyG,OAG3BwgB,KAAA,SAAA5vB,EAAAxC,GAEA,OADAA,EAAA,iBAAAwC,IAAAxC,EACAgD,KAAA+S,UAAA,CAA2Bqc,KAAA5vB,GAAA,OAAAgF,OAAAxH,KAG3B2uB,OAAA,SAAAhvB,GACA,OAAAqD,KAAA2O,KAAA,gBAAApD,EAAAggB,OAAA,GAAAvR,UAAA/X,OAAA,GAAA8X,MAAArd,KAAAsd,WAAArd,KAGA0hB,QAAA,SAAA7gB,GACA,OAAAwC,KAAA2O,KAAA,UAAAnR,IAGAkY,GAAA,SAAAvN,GACA,OAAAnI,KAAAmI,EAAA,IAAAoD,EAAAkX,OAAAta,GAAA0a,KAAA7iB,gBAAAuL,EAAA+b,GAAA,EAAAtnB,KAAAmI,MAAA,IAGA0N,GAAA,SAAAjH,GACA,OAAA5O,KAAA4O,EAAA,IAAArD,EAAAkX,OAAA7T,GAAAiU,KAAA7iB,gBAAAuL,EAAA+b,GAAA,EAAAtnB,KAAA4O,MAAA,IAGA2pB,MAAA,SAAApwB,EAAAyG,GACA,OAAA5O,KAAA0V,GAAAvN,GAAA0N,GAAAjH,MAIArD,EAAAsO,OAAAtO,EAAAqqB,KAAArqB,EAAAuqB,QAAAvqB,EAAAsqB,OAAAtqB,EAAAyP,SAAAzP,EAAA+b,GAAA,CAEA3W,OAAA,SAAAxI,EAAAyG,GACA,IAAAsM,GAAAlb,KAAAunB,SAAAvnB,MAAAkb,KACA,gBAAAA,GAAA,UAAAA,EACAlb,KAAA2O,KAAA,QAAApD,EAAAkX,OAAAta,IACAnI,KAAAse,GAAAnW,GAAAoW,GAAA,MAAA3P,EAAAzG,EAAAyG,MAIArD,EAAAsO,OAAAtO,EAAA+qB,KAAA,CAEAr0B,OAAA,WACA,OAAAjC,KAAA2a,KAAA6d,kBAGAC,QAAA,SAAAx2B,GACA,OAAAjC,KAAA2a,KAAA+d,iBAAAz2B,MAIAsJ,EAAAsO,OAAAtO,EAAA6Z,OAAA7Z,EAAA0gB,KAAA1gB,EAAAksB,MAAAlsB,EAAA+b,GAAA,CAEAqR,KAAA,SAAAn5B,EAAAJ,GACA,oBAAAI,EACA,IAAAJ,KAAAI,EAAAQ,KAAA24B,KAAAv5B,EAAAI,EAAAJ,IAGA,iBAAAI,EACAQ,KAAAksB,QAAA9sB,GACA,UAAAI,EACAQ,KAAA2O,KAAA,cAAAvP,GACA,QAAAI,GAAA,UAAAA,GAAA,UAAAA,GAAA,WAAAA,GAAA,WAAAA,GAAA,SAAAA,EACAQ,KAAA2O,KAAA,QAAAnP,EAAAJ,GACAY,KAAA2O,KAAAnP,EAAAJ,MAIAmM,EAAAtH,IAAAsH,EAAA4O,OAAA,CAEAtc,OAAA,SAAA+6B,GACAA,aAAArtB,EAAAtH,IACAjE,KAAA44B,kBAAA7e,QAEAtU,MAAA0a,QAAAyY,GAAA54B,KAAA44B,UAAA54B,KAAA8Y,SAKAe,OAAA,CAEApV,IAAA,WACA,IAAAlI,EAAA+gB,EAAAub,EAAA,GAAA9e,MAAArd,KAAAsd,WAEA,IAAAzd,EAAA,EAAA+gB,EAAAub,EAAA52B,OAAuC1F,EAAA+gB,EAAQ/gB,IAC/CyD,KAAA44B,QAAA7yB,KAAA8yB,EAAAt8B,IAEA,OAAAyD,MAGAqK,OAAA,SAAA5L,GACA,IAAAlC,EAAAyD,KAAAuC,MAAA9D,GAMA,OAHAlC,GAAA,GACAyD,KAAA44B,QAAAE,OAAAv8B,EAAA,GAEAyD,MAGA0O,KAAA,SAAA2O,GACA,QAAA9gB,EAAA,EAAA+gB,EAAAtd,KAAA44B,QAAA32B,OAA+C1F,EAAA+gB,EAAQ/gB,IACvD8gB,EAAAiO,MAAAtrB,KAAA44B,QAAAr8B,GAAA,CAAAA,EAAAyD,KAAA44B,UAEA,OAAA54B,MAGA8Y,MAAA,WAIA,OAFA9Y,KAAA44B,QAAA,GAEA54B,MAGAiC,OAAA,WACA,OAAAjC,KAAA44B,QAAA32B,QAGA7B,IAAA,SAAA3B,GACA,OAAAuB,KAAAuC,MAAA9D,IAAA,GAGA8D,MAAA,SAAA9D,GACA,OAAAuB,KAAA44B,QAAAh2B,QAAAnE,IAGArB,IAAA,SAAAb,GACA,OAAAyD,KAAA44B,QAAAr8B,IAGAk1B,MAAA,WACA,OAAAzxB,KAAA5C,IAAA,IAGAwsB,KAAA,WACA,OAAA5pB,KAAA5C,IAAA4C,KAAA44B,QAAA32B,OAAA,IAGA6d,QAAA,WACA,OAAA9f,KAAA44B,SAGA3X,KAAA,WAEA,MAAAjhB,KAAA44B,QAAA32B,OACA,WAAAsJ,EAAAoiB,KAGA,IAAAtc,EAAArR,KAAA44B,QAAA,GAAAvnB,KAAArR,KAAA44B,QAAA,GAAAlU,OAOA,OALA1kB,KAAA0O,KAAA,WAEA2C,IAAAqb,MAAA1sB,KAAAqR,KAAArR,KAAA0kB,UAGArT,IAKAkJ,UAAA,CAEAnY,IAAA,SAAAw2B,GACA,WAAArtB,EAAAtH,IAAA20B,OAKArtB,EAAA+b,GAAArjB,IAAAsH,EAAA4O,OAAA,CAEAtc,OAAA,SAAAuE,GAEApC,KAAAoC,SAMAmJ,EAAAtH,IAAAiW,QAAA,WACA,IACAJ,EAAA,GAGA,QAAAnd,KAAA4O,EAAA8hB,MAAAlvB,UACA,mBAAAoN,EAAA8hB,MAAAlvB,UAAAxB,IAAA,mBAAA4O,EAAAtH,IAAA9F,UAAAxB,IACAmd,EAAA/T,KAAApJ,GAiBA,QAAAA,KAdAmd,EAAAtT,QAAA,SAAAikB,GACAlf,EAAAtH,IAAA9F,UAAAssB,GAAA,WACA,QAAAluB,EAAA,EAAA+gB,EAAAtd,KAAA44B,QAAA32B,OAA+C1F,EAAA+gB,EAAQ/gB,IACvDyD,KAAA44B,QAAAr8B,IAAA,mBAAAyD,KAAA44B,QAAAr8B,GAAAkuB,IACAzqB,KAAA44B,QAAAr8B,GAAAkuB,GAAAa,MAAAtrB,KAAA44B,QAAAr8B,GAAAyd,WAEA,iBAAAyQ,EAAAzqB,KAAAmrB,KAAAnrB,KAAAmrB,GAAA,IAAA5f,EAAA+b,GAAArjB,IAAAjE,eAKA8Z,EAAA,GAGAvO,EAAA+b,GAAAnpB,UACA,mBAAAoN,EAAA+b,GAAAnpB,UAAAxB,IAAA,mBAAA4O,EAAA+b,GAAArjB,IAAA9F,UAAAxB,IACAmd,EAAA/T,KAAApJ,GAGAmd,EAAAtT,QAAA,SAAAikB,GACAlf,EAAA+b,GAAArjB,IAAA9F,UAAAssB,GAAA,WACA,QAAAluB,EAAA,EAAA+gB,EAAAtd,KAAAoC,IAAAw2B,QAAA32B,OAAmD1F,EAAA+gB,EAAQ/gB,IAC3DyD,KAAAoC,IAAAw2B,QAAAr8B,GAAA4uB,GAAAV,GAAAa,MAAAtrB,KAAAoC,IAAAw2B,QAAAr8B,GAAA4uB,GAAAnR,WAEA,OAAAha,SAMAuL,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEAoY,KAAA,SAAA7zB,EAAAJ,EAAA/B,GACA,oBAAAmC,EACA,IAAAJ,KAAAI,EACAQ,KAAAqzB,KAAAj0B,EAAAI,EAAAJ,SAEK,GAAA4a,UAAA/X,OAAA,EACL,IACA,OAAAqZ,KAAAC,MAAAvb,KAAA2O,KAAA,QAAAnP,IACO,MAAAuF,GACP,OAAA/E,KAAA2O,KAAA,QAAAnP,QAIAQ,KAAA2O,KACA,QAAAnP,EACA,OAAAJ,EACA,MACA,IAAA/B,GAAA,iBAAA+B,GAAA,iBAAAA,EACAA,EACAkc,KAAAsK,UAAAxmB,IAIA,OAAAY,QAGAuL,EAAAsO,OAAAtO,EAAA0P,QAAA,CAEA8d,SAAA,SAAAC,EAAA55B,GAEA,oBAAA4a,UAAA,GACA,QAAA5a,KAAA45B,EACAh5B,KAAA+4B,SAAA35B,EAAA45B,EAAA55B,QAGA,OAAA4a,UAAA/X,OACA,OAAAjC,KAAAi5B,SAAAD,GAIAh5B,KAAAi5B,SAAAD,GAAA55B,EAEA,OAAAY,MAIAk5B,OAAA,WACA,MAAAlf,UAAA/X,OACAjC,KAAAm5B,QAAA,QAEA,QAAA58B,EAAAyd,UAAA/X,OAAA,EAAwC1F,GAAA,EAAQA,WAChDyD,KAAAi5B,SAAAjf,UAAAzd,IAEA,OAAAyD,MAIAi5B,OAAA,WACA,OAAAj5B,KAAAm5B,UAAAn5B,KAAAm5B,QAAA,OAKA5tB,EAAAnO,IAAA,SAAAoB,GACA,IAAAmc,EAAAjc,EAAAC,eAwLA,SAAA63B,GACA,IAAA75B,GAAA65B,GAAA,IAAArX,WAAAL,MAAAvT,EAAAwQ,MAAAI,WAEA,GAAAxf,EAAA,OAAAA,EAAA,GA3LAy8B,CAAA56B,OACA,OAAA+M,EAAAmP,MAAAC,IAIApP,EAAA8tB,OAAA,SAAAC,EAAA9e,GACA,WAAAjP,EAAAtH,IACAsH,EAAA4R,MAAAjZ,KAAAsW,GAAA9b,GAAA66B,iBAAAD,GAAA,SAAA3e,GACA,OAAApP,EAAAmP,MAAAC,OAKApP,EAAAsO,OAAAtO,EAAA6Z,OAAA,CAEAiU,OAAA,SAAAC,GACA,OAAA/tB,EAAA8tB,OAAAC,EAAAt5B,KAAA2a,SAqLA,IAAAwT,EAAA,SAAAnpB,MAAA,IAGA,sBAAA+F,EAAAyoB,YAAA,CAEA,IAAAgG,EAAA,SAAArvB,EAAA6oB,GACAA,KAAA,CAA0ByG,SAAA,EAAAhG,YAAA,EAAAvJ,YAAA7pB,GAC1B,IAAA0E,EAAArG,EAAAg7B,YAAA,eAEA,OADA30B,EAAA40B,gBAAAxvB,EAAA6oB,EAAAyG,QAAAzG,EAAAS,WAAAT,EAAA9I,QACAnlB,GAGAy0B,EAAAr7B,UAAA4M,EAAAuoB,MAAAn1B,UAEAoN,EAAAioB,YAAAgG,OAEAjuB,EAAAioB,YAAAzoB,EAAAyoB,YA+BA,OA3BA,SAAA6E,GAIA,IAHA,IAAAuB,EAAA,EACAC,EAAA,iBAEA1xB,EAAA,EAAgBA,EAAA0xB,EAAA53B,SAAA8I,EAAAwd,wBAAqDpgB,EACrEkwB,EAAA9P,sBAAA8P,EAAAwB,EAAA1xB,GAAA,yBACAkwB,EAAA7P,qBAAA6P,EAAAwB,EAAA1xB,GAAA,yBACAkwB,EAAAwB,EAAA1xB,GAAA,+BAGAkwB,EAAA9P,sBAAA8P,EAAA9P,uBACA,SAAA1lB,GACA,IAAAi3B,GAAA,IAAAhT,MAAAiT,UACAC,EAAAtmB,KAAAoX,IAAA,MAAAgP,EAAAF,IAEAp7B,EAAA65B,EAAAxM,WAAA,WACAhpB,EAAAi3B,EAAAE,IACOA,GAGP,OADAJ,EAAAE,EAAAE,EACAx7B,GAGA65B,EAAA7P,qBAAA6P,EAAA7P,sBAAA6P,EAAA4B,aAvBA,CAyBClvB,GAEDQ,EAh9KA2uB,CAAAlhB,IAAAta,WACKhC,KAAAL,EAAAF,EAAAE,EAAAC,QAAAD,QAAA0c,kFCbL,MAAayJ,EACX1iB,YAAqBqI,EAAoByG,GAApB5O,KAAAmI,IAAoBnI,KAAA4O,IAGlC9O,UAAUq6B,GAEf,OAAiB,IADDzmB,KAAK8a,MAAM2L,EAAMvrB,EAAI5O,KAAK4O,EAAGurB,EAAMhyB,EAAInI,KAAKmI,GACrCuL,KAAK+J,IANhCphB,EAAAmmB,QA0BAnmB,EAAA8Z,UAAA,SAA0Bgb,GACxB,IAAI3oB,EAAwB,KAC5B,MAAMkF,EACFyjB,EAAO1yB,QAAQ27B,iBAAmBjJ,EAAO1yB,QAGvC47B,EAAiB57B,IACrB,MAAM4Q,EAAO5Q,EAAQmvB,wBACftd,EAAKjB,EAAKkd,KAAOld,EAAKf,MAAQ,EAAIvD,OAAOuvB,QACzC/pB,EAAKlB,EAAKmd,IAAMnd,EAAKhB,OAAS,EAAItD,OAAOwvB,QAC/C,OAAO,IAAI/X,EAAMlS,EAAIC,IAIjBiqB,EAAkBrwB,IACtB,MAAMylB,EAAQliB,EAAImiB,iBAClBD,EAAMznB,EAAIgC,EAAMswB,QAChB7K,EAAMhhB,EAAIzE,EAAMuwB,QAChB,MAAMr8B,EAAIuxB,EAAME,gBAAgBpiB,EAAIiiB,eAAgBhrB,WACpD,OAAO,IAAI6d,EAAMnkB,EAAE8J,EAAG9J,EAAEuQ,IAuBpB+rB,EAAoBxwB,IACV,OAAV3B,IAIJA,EAAMsN,OAAOF,QAAUykB,EAAclJ,EAAO1yB,SAC5C+J,EAAMmN,MAAMC,QAAU4kB,EAAerwB,GACjCgnB,EAAO7a,QACT6a,EAAO7a,OAAO9N,KAkBlBuC,OAAOK,iBAAiB,UAdAjB,IACR,OAAV3B,IAIJuC,OAAOqoB,oBAAoB,YAAauH,GAAkB,GAC1DnyB,EAAMsN,OAAOF,QAAUykB,EAAclJ,EAAO1yB,SAC5C+J,EAAMmN,MAAMC,QAAU4kB,EAAerwB,GACjCgnB,EAAO3a,UACT2a,EAAO3a,SAAShO,GAElBA,EAAQ,QAGyC,GACnD2oB,EAAO1yB,QAAQ2M,iBAAiB,YA/CNjB,IACxB,MAAMkG,EAASgqB,EAAclJ,EAAO1yB,SAC9BkX,EAAQ6kB,EAAerwB,GAC7B3B,EAAQ,CACNmN,MAAO,CACLxD,MAAOwD,EACPC,QAASD,GAEXG,OAAQ,CACN3D,MAAO9B,EACPuF,QAASvF,EACT5R,QAAS0yB,EAAO1yB,UAGhB0yB,EAAO/a,SACT+a,EAAO/a,QAAQ5N,GAEjBuC,OAAOK,iBAAiB,YAAauvB,GAAkB,KA8BM,mFCpEjEt+B,EAAAkW,UAAA,UAA0BlV,EAACA,EAADmV,IAAIA,IAC5B,MAAMgL,EAAUhL,EAAMkB,KAAK+J,GAAK,IAChC,MAAO,CAACtV,EAAG9K,EAAIqW,KAAKwS,IAAI1I,GAAU5O,EAAGvR,EAAIqW,KAAK0S,IAAI5I,KAGpDnhB,EAAAiW,UAAA,SAA0B9S,EAAOmD,GAC/B,MAAO,CAACwF,EAAG3I,EAAE2I,EAAIxF,EAAEwF,EAAGyG,EAAGpP,EAAEoP,EAAIjM,EAAEiM,IAMnC,MAAaK,EAGXnP,cAAgBE,KAAK64B,SAAW,GAEzB/4B,QAAkB,OAAOE,KAAK64B,SAASxzB,KAAK,KAE5CvF,QAAU,OAAOE,KAAKyhB,IACtB3hB,OAAOzB,GAAS,OAAO2B,KAAKkP,EAAE7Q,EAAE8J,EAAG9J,EAAEuQ,GACrC9O,OAAOzB,GAAS,OAAO2B,KAAKmP,EAAE9Q,EAAE8J,EAAG9J,EAAEuQ,GACrC9O,iBAAiBlD,EAAOyB,GAAS,OAAO2B,KAAKuhB,EAAE3kB,EAAEuL,EAAGvL,EAAEgS,EAAGvQ,EAAE8J,EAAG9J,EAAEuQ,GAChE9O,aAAa86B,EAAQC,EAAQx8B,GAClC,OAAO2B,KAAK0B,EAAEk5B,EAAGzyB,EAAGyyB,EAAGhsB,EAAGisB,EAAG1yB,EAAG0yB,EAAGjsB,EAAGvQ,EAAE8J,EAAG9J,EAAEuQ,GAExC9O,MAAM9C,EAAeqB,GAC1B,OA/BJ,SAAuBrB,GACrB,MAAO,MAAOA,EA8BR89B,CAAc99B,GACTgD,KAAKwB,EAAExE,EAAEK,EAAGL,EAAEK,EAAG,EAAGL,EAAE+9B,WAAY,EAAO/9B,EAAEyX,QAAS,EAAOpW,EAAE8J,EACtD9J,EAAEuQ,GAET5O,KAAKwB,EAAExE,EAAEshB,GAAIthB,EAAEuhB,GAAIvhB,EAAEgW,UAAY,EAAGhW,EAAE+9B,WAAY,EAC3C/9B,EAAEyX,QAAS,EAAOpW,EAAE8J,EAAG9J,EAAEuQ,GAIpC9O,EAAEqI,EAAWyG,GAAa,OAAO5O,KAAK+F,SAASoC,KAAKyG,KACpD9O,EAAE4V,EAAYG,GAAc,OAAO7V,KAAK+F,SAAS2P,KAAMG,KACvD/V,IAAM,OAAOE,KAAK+F,KAAK,KACvBjG,IAAM,OAAOE,KAAK+F,KAAK,KACvBjG,EAAEqI,EAAWyG,GAAa,OAAO5O,KAAK+F,SAASoC,KAAKyG,KACpD9O,EAAE4V,EAAYG,GAAc,OAAO7V,KAAK+F,SAAS2P,KAAMG,KACvD/V,EAAEqI,GAAa,OAAOnI,KAAK+F,SAASoC,KACpCrI,EAAE4V,GAAc,OAAO1V,KAAK+F,SAAS2P,KACrC5V,EAAE8O,GAAa,OAAO5O,KAAK+F,SAAS6I,KACpC9O,EAAE+V,GAAc,OAAO7V,KAAK+F,SAAS8P,KACrC/V,EAAEk7B,EAAaC,EAAaC,EAAaC,EAAahzB,EACpDyG,GACP,OAAO5O,KAAK+F,SAASi1B,KAAOC,KAAOC,KAAOC,KAAOhzB,KAAKyG,KAEjD9O,EAAEs7B,EAAcC,EAAcC,EAAcC,EAAc7lB,EACxDG,GACP,OAAO7V,KAAK+F,SAASq1B,KAAQC,KAAQC,KAAQC,KAAQ7lB,KAAMG,KAEtD/V,EAAEo7B,EAAaC,EAAahzB,EAAWyG,GAC5C,OAAO5O,KAAK+F,SAASm1B,KAAOC,KAAOhzB,KAAKyG,KAEnC9O,EAAEw7B,EAAcC,EAAc7lB,EAAYG,GAC/C,OAAO7V,KAAK+F,SAASu1B,KAAQC,KAAQ7lB,KAAMG,KAEtC/V,EAAEwQ,EAAYC,EAAYpI,EAAWyG,GAC1C,OAAO5O,KAAK+F,SAASuK,KAAMC,KAAMpI,KAAKyG,KAEjC9O,EAAE07B,EAAaC,EAAa/lB,EAAYG,GAC7C,OAAO7V,KAAK+F,SAASy1B,KAAOC,KAAO/lB,KAAMG,KAEpC/V,EAAEqI,EAAWyG,GAAa,OAAO5O,KAAK+F,SAASoC,KAAKyG,KACpD9O,EAAE4V,EAAYG,GAAc,OAAO7V,KAAK+F,SAAS2P,KAAMG,KACvD/V,EAAEwe,EAAYC,EAAYmd,EACxBX,EAA0BtmB,EAAuBtM,EACjDyG,GACP,MAAM+sB,EAAMZ,EAAW,EAAI,EACrBa,EAAKnnB,EAAQ,EAAI,EACvB,OAAOzU,KAAK+F,SAASuY,KAAMC,KAAMmd,KAAeC,KAAOC,KAAMzzB,KAAKyG,KAE7D9O,EAAE+7B,EAAaC,EAAaJ,EAC1BX,EAA0BtmB,EAAuBiB,EACjDG,GACP,MAAM8lB,EAAMZ,EAAW,EAAI,EACrBa,EAAKnnB,EAAQ,EAAI,EACvB,OAAOzU,KAAK+F,SAAS81B,KAAOC,KAAOJ,KAAeC,KAAOC,KAAMlmB,KAAMG,KAG/D/V,KAAKxB,GAEX,OADA0B,KAAK64B,SAAS9yB,KAAKzH,GACZ0B,MAzEX3D,EAAA4S,iBA8EA5S,EAAAyU,MAAA,SAAsBnB,EAAsBrB,GAC1C,MAAMmC,EAAed,EAAerB,EACpC,OAAO,IAAIW,GACNyD,OAAO,CAACvK,EAAG,EAAGyG,EAAGe,IACjB6E,MAAM,CAACnX,EAAGsS,EAAcorB,UAAU,EAAMtmB,OAAO,GACzC,CAACtM,EAAG,EAAGyG,GAAIe,IACjB6E,MAAM,CAACnX,EAAGsS,EAAcorB,UAAU,EAAMtmB,OAAO,GACzC,CAACtM,EAAG,EAAGyG,EAAGe,IAChBosB,QACArpB,OAAO,CAACvK,EAAG,EAAGyG,EAAG6B,IACjB+D,MAAM,CAACnX,EAAGoT,EAAcsqB,UAAU,EAAMtmB,OAAO,GACzC,CAACtM,EAAG,EAAGyG,GAAI6B,IACjB+D,MAAM,CAACnX,EAAGoT,EAAcsqB,UAAU,EAAMtmB,OAAO,GACzC,CAACtM,EAAG,EAAGyG,EAAG6B,IAChBsrB,QACA3sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","'use strict';\n\n// Returns the given HTML or SVG element by id, throwing an error if not found.\nexport function getElementByIdOrThrow(id: string): HTMLElement {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw Error('no such DOM element: ' + id);\n  }\n  return element;\n}\n\n// Same as getElementByIdOrThrow, but doing the type casting for you to SVG.\nexport function getSVGGraphicsElementByIdOrThrow(id: string):\n    SVGGraphicsElement {\n  return (getElementByIdOrThrow(id) as unknown) as SVGGraphicsElement;\n}\n\n// Adds class \"{key}-{value}\" and removes any other \"{key}-*\". If `value` is an\n// array, adds one class for each value.\nexport function setClassKeyValue(element: HTMLElement, key: string,\n                                 value: string|string[]) {\n  const regexp = new RegExp('(?:^|\\\\s)' + key + '-\\\\S*', 'g');\n  // Note: We can't use .className because SVGElement.className does not return\n  // a string.\n  let klass = (element.getAttribute('class') || '').replace(regexp, '');\n  if (typeof value === 'string') {\n    klass += ` ${key}-${value}`;\n  } else {\n    for (const v of value) {\n      klass += ` ${key}-${v}`;\n    }\n  }\n  element.setAttribute('class', klass);\n}\n\n// Removes any class \"{key}-*\".\nexport function clearClassKey(element: HTMLElement, key: string) {\n  const regexp = new RegExp('(?:^|\\\\s)' + key + '-\\\\S*', 'g');\n  // Note: We can't use .className because SVGElement.className does not return\n  // a string.\n  const klass = (element.getAttribute('class') || '').replace(regexp, '');\n  element.setAttribute('class', klass);\n}\n","// Miscellaneous helper functions.\n\n'use strict';\n\n// ----------------------------------------------------------------------------\n//                                 Functions\n// ----------------------------------------------------------------------------\n\n// Given the difference between two points on a circle, returns the shortest\n// distance between them, either positive or negative.\nexport function circularDistance(difference: number, divisor: number): number {\n  let d = mod(difference, divisor);\n  if (d > divisor / 2) {\n    d -= divisor;\n  }\n  return d;\n}\n\n// Returns a % n, ensuring the result is always positive.\nexport function mod(a: number, n: number): number {\n  let result = a % n;\n  if (result < 0) {\n    result += n;\n  }\n  return result;\n}\n\n// ----------------------------------------------------------------------------\n//                                 Dictionary\n// ----------------------------------------------------------------------------\n\n// An Object that throws an error if a key does not exist.\nexport class Dictionary<T> {\n  private _map: {[key: string]: T};\n  private _message: string;\n\n  constructor(message: string = 'Key not found') {\n    this._map = {};\n    this._message = message;\n  }\n\n  public set(key: string, value: T): void { this._map[key] = value; }\n  public has(key: string): boolean { return this._map.hasOwnProperty(key); }\n  public get(key: string, default_value?: T): T {\n    if (this.has(key)) return this._map[key];\n    if (default_value !== undefined) return default_value;\n    throw Error(this._message + ': ' + key);\n  }\n}\n\n// ----------------------------------------------------------------------------\n//                            UnreachableCaseError\n// ----------------------------------------------------------------------------\n\nexport class UnreachableCaseError extends Error {\n  constructor(val: never) { super(`Unreachable case: ${val}`); }\n}\n\n// vim: set sw=2:\n","// Logic of the Enigma Machine (no graphics).\n\n'use strict';\n\nimport helpers = require('./helpers');\n\nconst mod = helpers.mod;\nconst Dictionary = helpers.Dictionary;\n\n// ----------------------------------------------------------------------------\n//                                 Interfaces\n// ----------------------------------------------------------------------------\n\nexport interface Spec {\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  rotors: {[name: string]: {permutation: string, notch: string}};\n  reflectors: {[name: string]: string};\n  defaults: {rotor_order: string, reflector: string};\n}\n\nexport interface LastValue {\n  input: string;\n  output: string;\n}\n\nexport interface LastValueBidi {\n  forward: LastValue;\n  inverse: LastValue;\n}\n\nexport interface LastValueFullEnigma {\n  plugboard: LastValueBidi;\n  rotors: LastValueBidi[];\n  reflector: LastValue;\n}\n\nexport type RotorPosition = 'l'|'m'|'r';\n\nexport interface EnigmaOnUpdateCallback {\n  onPlugboardChange(permutation: Permutation, setting: string): void;\n  onReflectorChange(name: string): void;\n  onRotorOrderChange(order: string): void;\n  onRotorChange(position: RotorPosition, name: string): void;\n  onRingSettingChange(value: string): void;\n  onIndicatorChange(value: string): void;\n  onRingLocked(value: boolean): void;\n  onEncrypt(values: LastValueFullEnigma): void;\n}\n\n// ----------------------------------------------------------------------------\n//                           Standard Enigma Specs\n// ----------------------------------------------------------------------------\n\n// Source: http://www.cryptomuseum.com/crypto/enigma/wiring.htm\nexport let M3_DEF: Spec = {\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  rotors: {\n    'I': {permutation: 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', notch: 'Q'},\n    'II': {permutation: 'AJDKSIRUXBLHWTMCQGZNPYFVOE', notch: 'E'},\n    'III': {permutation: 'BDFHJLCPRTXVZNYEIWGAKMUSQO', notch: 'V'},\n    'IV': {permutation: 'ESOVPZJAYQUIRHXLNFTGKDCMWB', notch: 'J'},\n    'V': {permutation: 'VZBRGITYUPSDNHLXAWMJQOFECK', notch: 'Z'},\n    'VI': {permutation: 'JPGVOUMFYQBENHZRDKASXLICTW', notch: 'ZM'},\n    'VII': {permutation: 'NZJHGRCXMYSWBOUFAIVLPEKQDT', notch: 'ZM'},\n    'VIII': {permutation: 'FKQHTLXOCBJSPDZRAMEWNIUYGV', notch: 'ZM'},\n  },\n  reflectors: {\n    'A': 'EJMZALYXVBWFCRQUONTSPIKHGD',\n    'B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT',\n    'C': 'FVPJIAOYEDRZXWGCTKUQSBNMHL',\n  },\n  defaults: {\n    rotor_order: 'I-II-III',\n    reflector: 'B',\n  },\n};\n\n// ----------------------------------------------------------------------------\n//                                  Alphabet\n// ----------------------------------------------------------------------------\n\n// A wrapper around an alphabet that ignores case (always uses uppercase) and\n// has handy methods.\nexport class Alphabet {\n  public readonly string: string;\n  public readonly length: number;\n\n  private readonly _to_index: helpers.Dictionary<number>;\n\n  constructor(alphabet: string) {\n    this.string = alphabet.toUpperCase();\n    this.length = alphabet.length;\n    this._to_index = new Dictionary<number>('Invalid letter');\n    for (let i = 0; i < this.string.length; i++) {\n      const letter = this.string[i];\n      this._to_index.set(letter, i);\n      this._to_index.set(letter.toLowerCase(), i);\n    }\n  }\n\n  // Returns true if letter is valid.\n  public valid(letter: string): boolean { return this._to_index.has(letter); }\n\n  // Returns true if all elements in s are valid characters.\n  public allValid(s: string): boolean {\n    for (const character of s) {\n      if (!this._to_index.has(character)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Returns the 0-based index of the given letter or throws an error if letter\n  // is not valid.\n  public indexOf(letter: string): number { return this._to_index.get(letter); }\n\n  // Returns the letter at the given 0-based index.\n  public fromIndex(index: number): string { return this.string[index]; }\n\n  // Converts an array of indices into a string.\n  public fromIndices(...indices: number[]): string {\n    let out = '';\n    for (const idx of indices) {\n      out += this.string[idx];\n    }\n    return out;\n  }\n\n  // Adds two letters by their indices, mod the alphabet length.\n  public add(a: string|number, b: string|number): string {\n    if (typeof a !== 'number') a = this.indexOf(a);\n    if (typeof b !== 'number') b = this.indexOf(b);\n    return this.string[mod(a + b, this.length)];\n  }\n\n  // Calls callback(letter, index) for each letter in the alphabet.\n  public each(callback: (letter: string, index: number) => void) {\n    for (let i = 0, len = this.string.length; i < len; i++) {\n      callback(this.string.charAt(i), i);\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n//                                Permutation\n// ----------------------------------------------------------------------------\n\n// A permutation (aka simple substitution) of alphabet.\nexport class Permutation {\n  public alphabet: Alphabet;\n  public last_forward: LastValue = {input: '', output: ''};\n  public last_inverse: LastValue = {input: '', output: ''};\n  public string!: string;\n\n  private _forward_table!: helpers.Dictionary<string>;\n  private _inverse_table!: helpers.Dictionary<string>;\n\n  constructor(permutation_string: string, alphabet: Alphabet) {\n    this.alphabet = alphabet;\n    this.setTo(permutation_string);\n  }\n\n  // Applies the permutation to the given letter.\n  public forward(letter: string): string {\n    letter = letter.toUpperCase();\n    const output = this._forward_table.get(letter);\n    this.last_forward = {input: letter, output: output};\n    return output;\n  }\n\n  // Applies the inverse of the permutation to the given letter.\n  public inverse(letter: string): string {\n    letter = letter.toUpperCase();\n    const output = this._inverse_table.get(letter);\n    this.last_inverse = {input: letter, output: output};\n    return output;\n  }\n\n  // Updates the permutation.  On error the permutation is unchanged.\n  public setTo(permutation_string: string): void {\n    permutation_string = permutation_string.toUpperCase();\n    if (permutation_string.length !== this.alphabet.length) {\n      throw Error('Invalid permutation: length ' + permutation_string.length +\n                  ', expected ' + this.alphabet.length);\n    }\n    const forward_table = new Dictionary<string>('Invalid letter');\n    const inverse_table = new Dictionary<string>('Invalid letter');\n    for (let i = 0; i < this.alphabet.length; i++) {\n      const plain = this.alphabet.fromIndex(i);\n      const cipher = permutation_string[i];\n      this.alphabet.indexOf(cipher);  // throws error if cipher invalid\n      if (inverse_table.has(cipher)) {\n        throw Error('Invalid permutation: letter ' + cipher +\n                    ' used more than once');\n      }\n      forward_table.set(plain, cipher);\n      inverse_table.set(cipher, plain);\n    }\n\n    this.string = permutation_string;\n    this._forward_table = forward_table;\n    this._inverse_table = inverse_table;\n  }\n\n  // Calls callback(plain_letter, cipher_letter) for each letter in the\n  // alphabet.\n  public eachPair(callback: (plain_letter: string,\n                             cipher_letter: string) => void) {\n    for (let i = 0; i < this.string.length; i++) {\n      callback(this.alphabet.string[i], this.string[i]);\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n//                                   Rotor\n// ----------------------------------------------------------------------------\n\n// An Enigma machine rotor.\nexport class Rotor {\n  public permutation: Permutation;\n  public notch_string: string;\n\n  private _notches: Set<number>;\n  private _alphabet: Alphabet;\n  private _indicator: number;\n  private _ring_setting: number;\n\n  constructor(permutation_string: string, notch_string: string,\n              alphabet: Alphabet) {\n    this.permutation = new Permutation(permutation_string, alphabet);\n    this.notch_string = notch_string;\n    this._notches = new Set<number>(\n        [...notch_string].map((letter) => alphabet.indexOf(letter)));\n    this._alphabet = alphabet;\n    this._indicator = 0;\n    this._ring_setting = 0;\n  }\n\n  get indicator(): number { return this._indicator; }\n  set indicator(value: number) {\n    this._indicator = mod(value, this._alphabet.length);\n  }\n\n  get ring_setting(): number { return this._ring_setting; }\n  set ring_setting(value: number) {\n    this._ring_setting = mod(value, this._alphabet.length);\n  }\n\n  public forward(letter: string): string {\n    const offset = this._indicator - this._ring_setting;\n    letter = this._alphabet.add(offset, letter);\n    letter = this.permutation.forward(letter);\n    return this._alphabet.add(-offset, letter);\n  }\n\n  public inverse(letter: string): string {\n    const offset = this._indicator - this._ring_setting;\n    letter = this._alphabet.add(offset, letter);\n    letter = this.permutation.inverse(letter);\n    return this._alphabet.add(-offset, letter);\n  }\n\n  public step(): void { this.indicator += 1; }\n\n  public isOnNotch(): boolean { return this._notches.has(this._indicator); }\n}\n\n// ----------------------------------------------------------------------------\n//                                 Plugboard\n// ----------------------------------------------------------------------------\n\nexport class Plugboard {\n  public permutation: Permutation;\n  public string: string;\n\n  private _alphabet: Alphabet;\n\n  constructor(alphabet: Alphabet) {\n    this._alphabet = alphabet;\n    this.permutation = new Permutation(this._alphabet.string, this._alphabet);\n    this.string = '';\n  }\n\n  public forward(letter: string): string {\n    return this.permutation.forward(letter);\n  }\n  public inverse(letter: string): string {\n    return this.permutation.inverse(letter);\n  }\n\n  // Sets the plugboard to the given value, e.g. 'AB FX'.\n  public setTo(pair_string: string): void {\n    pair_string = pair_string.toUpperCase();\n    this.permutation.setTo(this._toPermutationString(pair_string));\n    this.string = pair_string;\n  }\n\n  // Returns '' if pair_string is valid, else the error message.\n  public validate(pair_string: string): string {\n    try {\n      this._toPermutationString(pair_string.toUpperCase());\n      return '';\n    } catch (e) {\n      return e.message;\n    }\n  }\n\n  // Returns a permutation string for the given pair string, or throws an error\n  // if the input is invalid.  Example: 'AB DF' -> 'BACFEDG...Z'\n  private _toPermutationString(pair_string: string): string {\n    const out = this._alphabet.string.split('');\n    const pairs = pair_string.toUpperCase().split(/\\s+/);\n    for (const pair of pairs) {\n      if (pair === '') continue;\n      if (pair.length !== 2 || pair[0] === pair[1]) {\n        throw Error('Invalid plugboard pair: \"' + pair + '\"');\n      }\n      const i = this._alphabet.indexOf(pair[0]);\n      const j = this._alphabet.indexOf(pair[1]);\n      if (out[i] !== pair[0]) {\n        throw Error('Plugboard value \"' + pair[0] + '\" used more than once');\n      }\n      if (out[j] !== pair[1]) {\n        throw Error('Plugboard value \"' + pair[1] + '\" used more than once');\n      }\n      const tmp = out[i];\n      out[i] = out[j];\n      out[j] = tmp;\n    }\n    return out.join('');\n  }\n}\n\n// ----------------------------------------------------------------------------\n//                                   Enigma\n// ----------------------------------------------------------------------------\n\nexport class Enigma {\n  private _spec: Spec;\n  private _alphabet: Alphabet;\n  private _plugboard: Plugboard;\n  private _rotors!: Rotor[];\n  private _reflector!: Rotor;\n  private _rotor_order!: string;\n  private _reflector_name!: string;\n  private _ring_locked: boolean;  // only exists for callbacks\n  private readonly _onUpdateCallbacks: EnigmaOnUpdateCallback[];\n\n  constructor(spec: Spec) {\n    this._onUpdateCallbacks = new Array<EnigmaOnUpdateCallback>();\n    this._spec = spec;\n    this._alphabet = new Alphabet(spec.alphabet);\n    this._plugboard = new Plugboard(this._alphabet);\n    this.setRotorOrder(spec.defaults.rotor_order);\n    this.setReflector(spec.defaults.reflector);\n    this._ring_locked = true;\n  }\n\n  public registerOnUpdateCallback(callback: EnigmaOnUpdateCallback) {\n    this._onUpdateCallbacks.push(callback);\n  }\n\n  private _getRotorField(field: 'indicator'|'ring_setting') {\n    return this._alphabet.fromIndices(\n        this._rotors[0][field], this._rotors[1][field], this._rotors[2][field]);\n  }\n\n  private _setRotorField(field: 'indicator'|'ring_setting', value: string) {\n    const error = this._validateRotorField(field, value);\n    if (error) throw new Error(error);\n    for (let i = 0; i < value.length; i++) {\n      this._rotors[i][field] = this._alphabet.indexOf(value[i]);\n    }\n    this._callRotorUpdate(field);\n  }\n\n  private _validateRotorField(field: 'indicator'|'ring_setting',\n                              value: string) {\n    value = value.toUpperCase();\n    if (value.length !== 3) {\n      return field + ' length must be 3';\n    }\n    if (!this._alphabet.allValid(value)) {\n      return 'invalid ' + field + ' letter: ' + value;\n    }\n    return '';\n  }\n\n  private _setRotorFieldAtIndex(index: number,\n                                field: 'indicator'|'ring_setting',\n                                value: string) {\n    if (index < 0 || index > 3) {\n      throw new Error('invalid Rotor index: ' + index);\n    }\n    if (!this._alphabet.valid(value)) {\n      throw new Error('invalid letter: ' + value);\n    }\n    this._rotors[index][field] = this._alphabet.indexOf(value);\n    this._callRotorUpdate(field);\n  }\n\n  private _callRotorUpdate(field: 'indicator'|'ring_setting') {\n    if (field === 'indicator') {\n      this._onUpdateCallbacks.forEach(\n          c => c.onIndicatorChange(this.getIndicator()));\n    } else {\n      this._onUpdateCallbacks.forEach(\n          c => c.onRingSettingChange(this.getRingSetting()));\n    }\n  }\n\n  public getIndicator(): string { return this._getRotorField('indicator'); }\n  public setIndicator(value: string): void {\n    this._setRotorField('indicator', value);\n  }\n  public setIndicatorAtIndex(index: number, value: string): void {\n    this._setRotorFieldAtIndex(index, 'indicator', value);\n  }\n  public validateIndicator(value: string): string {\n    return this._validateRotorField('indicator', value);\n  }\n\n  public getRingSetting(): string {\n    return this._getRotorField('ring_setting');\n  }\n  public setRingSetting(value: string): void {\n    this._setRotorField('ring_setting', value);\n  }\n  public setRingSettingAtIndex(index: number, value: string): void {\n    this._setRotorFieldAtIndex(index, 'ring_setting', value);\n  }\n  public validateRingSetting(value: string): string {\n    return this._validateRotorField('ring_setting', value);\n  }\n\n  public getRotorOrder(): string { return this._rotor_order; }\n  public setRotorOrder(value: string, validate_only = false): void {\n    value = value.toUpperCase();\n    const a = value.split('-');\n    if (a.length !== 3) {\n      throw new Error('Rotor order must be specified as I-II-III');\n    }\n    const new_rotors: Rotor[] = [];\n    for (const rotor_name of a) {\n      const rotor_spec = this._spec.rotors[rotor_name];\n      if (rotor_spec === undefined) {\n        throw Error('Invalid rotor name: ' + rotor_name);\n      }\n      new_rotors.push(\n          new Rotor(rotor_spec.permutation, rotor_spec.notch, this._alphabet));\n    }\n    if (!validate_only) {\n      const old_rotors = this._rotors;\n      if (old_rotors) {\n        for (let i = 0; i < new_rotors.length; i++) {\n          new_rotors[i].indicator = old_rotors[i].indicator;\n          new_rotors[i].ring_setting = old_rotors[i].ring_setting;\n        }\n      }\n      this._rotors = new_rotors;\n      this._rotor_order = value;\n      this._onUpdateCallbacks.forEach(\n          c => c.onRotorOrderChange(this._rotor_order));\n      this._onUpdateCallbacks.forEach(c => c.onRotorChange('l', a[0]));\n      this._onUpdateCallbacks.forEach(c => c.onRotorChange('m', a[1]));\n      this._onUpdateCallbacks.forEach(c => c.onRotorChange('r', a[2]));\n    }\n  }\n  public validateRotorOrder(value: string): string {\n    try {\n      this.setRotorOrder(value, true);\n    } catch (e) {\n      return e.message;\n    }\n    return '';\n  }\n\n  public getReflector(): string { return this._reflector_name; }\n  public setReflector(name: string, validate_only = false): void {\n    const _permutation = this._spec.reflectors[name];\n    if (_permutation === undefined) {\n      throw Error('Invalid reflector name: ' + name);\n    }\n    if (!validate_only) {\n      this._reflector = new Rotor(_permutation, '', this._alphabet);\n      this._reflector_name = name;\n      this._onUpdateCallbacks.forEach(c => c.onReflectorChange(name));\n    }\n  }\n  public validateReflector(name: string): string {\n    try {\n      this.setReflector(name, true);\n    } catch (e) {\n      return e.message;\n    }\n    return '';\n  }\n  public getReflectorPermutation(): Permutation {\n    return this._reflector.permutation;\n  }\n\n  public getPlugboard(): string { return this._plugboard.string; }\n  public setPlugboard(value: string): void {\n    this._plugboard.setTo(value);\n    this._onUpdateCallbacks.forEach(\n        c => c.onPlugboardChange(this._plugboard.permutation,\n                                 this._plugboard.string));\n  }\n  public validatePlugboard(value: string): string {\n    return this._plugboard.validate(value);\n  }\n  public getPlugboardPermutation(): Permutation {\n    return this._plugboard.permutation;\n  }\n\n  public setRingLocked(value: boolean): void {\n    this._ring_locked = value;\n    this._onUpdateCallbacks.forEach(c => c.onRingLocked(value));\n  }\n\n  // TODO test and document\n  public getLastValues(): LastValueFullEnigma {\n    return {\n      plugboard: {\n        forward: this._plugboard.permutation.last_forward,\n        inverse: this._plugboard.permutation.last_inverse,\n      },\n      rotors: [\n        {\n          forward: this._rotors[0].permutation.last_forward,\n          inverse: this._rotors[0].permutation.last_inverse,\n        },\n        {\n          forward: this._rotors[1].permutation.last_forward,\n          inverse: this._rotors[1].permutation.last_inverse,\n        },\n        {\n          forward: this._rotors[2].permutation.last_forward,\n          inverse: this._rotors[2].permutation.last_inverse,\n        },\n      ],\n      reflector: this._reflector.permutation.last_forward,\n    };\n  }\n\n  public isValidLetter(letter: string): boolean {\n    return this._alphabet.valid(letter);\n  }\n\n  // Encrypts an entire message, stepping on each letter.\n  public encryptMessage(message: string): string {\n    let out = '';\n    for (const character of message) {\n      out += this.stepAndEncryptSingle(character);\n    }\n    return out;\n  }\n\n  // Steps the machine and encrypts a single letter, just like pushing\n  // a keyboard button.\n  public stepAndEncryptSingle(letter: string): string {\n    this.step(true);\n    return this.encryptSingleNoStep(letter);\n  }\n\n  // Encrypts a single letter without stepping.\n  public encryptSingleNoStep(letter: string): string {\n    let x = letter;\n    x = this._plugboard.forward(x);\n    x = this._rotors[2].forward(x);\n    x = this._rotors[1].forward(x);\n    x = this._rotors[0].forward(x);\n    x = this._reflector.forward(x);\n    x = this._rotors[0].inverse(x);\n    x = this._rotors[1].inverse(x);\n    x = this._rotors[2].inverse(x);\n    x = this._plugboard.inverse(x);\n    this._onUpdateCallbacks.forEach(c => c.onEncrypt(this.getLastValues()));\n    return x;\n  }\n\n  // Steps the scrambler one position.\n  public step(suppress_on_update: boolean): void {\n    if (this._rotors[1].isOnNotch()) {\n      this._rotors[0].step();\n    }\n    if (this._rotors[1].isOnNotch() || this._rotors[2].isOnNotch()) {\n      this._rotors[1].step();\n    }\n    this._rotors[2].step();\n    this._onUpdateCallbacks.forEach(\n        c => c.onIndicatorChange(this.getIndicator()));\n  }\n\n  public saveState(state: URLSearchParams): void {\n    state.set('rotor_order', this.getRotorOrder());\n    state.set('ring_setting', this.getRingSetting());\n    state.set('indicator', this.getIndicator());\n    state.set('plugboard', this.getPlugboard());\n    state.set('locked', this._ring_locked ? '1' : '0');\n  }\n\n  public loadState(state: URLSearchParams): void {\n    function setIfValid(query_param: string, set: (value: string) => void) {\n      const value = state.get(query_param);\n      if (value === null) {\n        return;\n      }\n      try {\n        set(value);\n      } catch (e) {\n        console.warn('Invalid state value: %s=%s (%s)', query_param, value, e);\n      }\n    }\n    function setBooleanIfValid(query_param: string,\n                               set: (value: boolean) => void) {\n      const value = state.get(query_param);\n      if (value === null) {\n        return;\n      }\n      if (value === '1') {\n        set(true);\n      } else if (value === '0') {\n        set(false);\n      } else {\n        console.warn('Invalid state value: %s=%s (must be \"0\" or \"1\")',\n                     query_param, value);\n      }\n    }\n    setIfValid('rotor_order', (v) => this.setRotorOrder(v));\n    setIfValid('ring_setting', (v) => this.setRingSetting(v));\n    setIfValid('indicator', (v) => this.setIndicator(v));\n    setIfValid('plugboard', (v) => this.setPlugboard(v));\n    setBooleanIfValid('ring_locked', (v) => this.setRingLocked(v));\n  }\n}\n\n// vim: set sw=2:\n","// Top level JavaScript for the Enigma simulator.\n\n'use strict';\n\nimport {getElementByIdOrThrow} from './dom';\nimport {EnigmaGraphics} from './graphics';\nimport {Enigma, EnigmaOnUpdateCallback, M3_DEF, Permutation} from './logic';\n\nfunction main() {\n  const graphics = new EnigmaGraphics('drawing', M3_DEF);\n  const enigma = new Enigma(M3_DEF);\n  enigma.registerOnUpdateCallback(graphics);\n  graphics.addEventListeners(enigma);\n  const html_interface = new HtmlInterface(enigma);\n  SetupOnHashChange(enigma);\n\n  // TODO remove this?\n  enigma.encryptSingleNoStep('A');\n}\n\nfunction getInputElementByIdOrThrow(id: string): HTMLInputElement {\n  return getElementByIdOrThrow(id) as HTMLInputElement;\n}\n\nfunction SetupOnHashChange(enigma: Enigma) {\n  function onHashChange() {\n    const state = new URLSearchParams(window.location.hash.substring(1));\n    enigma.loadState(state);\n  }\n  onHashChange();\n  window.addEventListener('hashchange', onHashChange, false);\n}\n\nclass HtmlInterface implements EnigmaOnUpdateCallback {\n  private readonly _enigma: Enigma;\n  private readonly _rotor_order: HTMLInputElement;\n  private readonly _ring_setting: HTMLInputElement;\n  private readonly _indicator: HTMLInputElement;\n  private readonly _plugboard: HTMLInputElement;\n  private readonly _ring_locked: HTMLInputElement;\n\n  constructor(enigma: Enigma) {\n    this._enigma = enigma;\n    this._rotor_order =\n        this.SetupInputHandler('rotor_order',                        //\n                               (v) => enigma.validateRotorOrder(v),  //\n                               (v) => enigma.setRotorOrder(v));\n    this._ring_setting =\n        this.SetupInputHandler('ring_setting',                        //\n                               (v) => enigma.validateRingSetting(v),  //\n                               (v) => enigma.setRingSetting(v));\n    this._indicator =\n        this.SetupInputHandler('indicator',                         //\n                               (v) => enigma.validateIndicator(v),  //\n                               (v) => enigma.setIndicator(v));\n    this._plugboard =\n        this.SetupInputHandler('plugboard',                         //\n                               (v) => enigma.validatePlugboard(v),  //\n                               (v) => enigma.setPlugboard(v));\n    this._ring_locked =\n        this.SetupCheckbox('ring_locked', (v) => enigma.setRingLocked(v));\n    this._enigma.registerOnUpdateCallback(this);\n  }\n\n  private SetupInputHandler(id: string, validate: (value: string) => string,\n                            set: (value: string) => void): HTMLInputElement {\n    const element = getInputElementByIdOrThrow(id);\n    element.oninput = (event) => {\n      if (validate(element.value) === '') {\n        element.classList.remove('bad');\n      } else {\n        element.classList.add('bad');\n      }\n    };\n    element.onchange = (event) => {\n      try {\n        set(element.value);\n        element.classList.remove('bad');\n      } catch (e) {\n        element.classList.add('bad');\n      }\n    };\n    return element;\n  }\n\n\n  private SetupCheckbox(id: string,\n                        set: (value: boolean) => void): HTMLInputElement {\n    const element = getInputElementByIdOrThrow(id);\n    element.onchange = (event) => { set(element.checked); };\n    return element;\n  }\n\n  public onPlugboardChange(permutation: Permutation, setting: string): void {\n    this._plugboard.value = setting;\n  }\n  public onRotorOrderChange(order: string): void {\n    this._rotor_order.value = order;\n  }\n  public onRingSettingChange(value: string): void {\n    this._ring_setting.value = value;\n  }\n  public onIndicatorChange(value: string): void {\n    this._indicator.value = value;\n  }\n  public onRingLocked(value: boolean): void {\n    this._ring_locked.checked = value;\n  }\n  // Things that aren't HTML options:\n  public onReflectorChange(): void {}\n  public onRotorChange(): void {}\n  public onEncrypt(): void {}\n}\n\nmain();\n","// Graphics of the Enigma Machine.\n//\n// TODO: Fix bug where drawing is incorrect when scroll is not at top.\n\n'use strict';\n\nimport SVG = require('svg.js');\nimport {clearClassKey, getElementByIdOrThrow, getSVGGraphicsElementByIdOrThrow, setClassKeyValue} from './dom';\nimport {draggable, DragState} from './drag';\nimport {circularDistance, mod, UnreachableCaseError} from './helpers';\nimport logic = require('./logic');\nimport {addPoints, donut, fromPolar, SvgPathBuilder} from './svg';\n\nconst Alphabet = logic.Alphabet;\n\n// ----------------------------------------------------------------------------\n//                                 Constants\n// ----------------------------------------------------------------------------\n\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst KEYBOARD_ORDER = 'PQAYWSXEDCRFVTGBZHNUJMIKLO';\n\nconst KEYBOARD_X = 50;\nconst KEYBOARD_Y = 350;\nconst DISPLAY_Y = 125;\n\nconst KEY_RADIUS = 20;\nconst KEY_ROW_SPACING = KEY_RADIUS * 3;\nconst KEY_COL_SPACING = KEY_RADIUS * 1.11;\nconst KEY_FONT_SIZE = 20;\n\nconst ROTOR_CX = 1175;\nconst ROTOR_CY = 450;\nconst REFLECTOR_RADIUS = 50;\nconst REFLECTOR_RING_WIDTH = 15;\nconst REFLECTOR_FONT_SIZE = 11;\nconst ROTOR_WIDTH = 110;\nconst RING_WIDTH = 20;\nconst RING_FONT_SIZE = 15;\nconst WINDOW_THICKNESS = 5;\nconst A_DOT_RADIUS = 5;\n\nconst PLUGBOARD_TOP = 600;\nconst PLUGBOARD_HEIGHT = 150;\nconst PLUGBOARD_LETTER_HEIGHT = 20;\nconst PLUGBOARD_FONT_SIZE = 15;\nconst PLUGBOARD_HANDLE_WIDTH = 10;\nconst PLUGBOARD_HANDLE_HEIGHT = 10;\nconst PLUGBOARD_MAX_DRAG_Y_OFFSET = PLUGBOARD_HEIGHT / 2;\n\nconst ETW_HEIGHT = 140;\nconst ETW_X_OFFSET = 50;\nconst WIRE_TOP = 30;\nconst ROTOR_IN_LENGTH = 10;\n\nconst HIGHLIGHT_STROKE_WIDTH = 5;\n\nconst FONT_VERTICAL_OFFSET = 0.35;\n\nconst ANIMATION_MS = 250;\n\n// ----------------------------------------------------------------------------\n//                          TypeScript declarations\n// ----------------------------------------------------------------------------\n\n// NOTE: dataset is not yet standardized for SVG so it's not in TypeScript.\n// It is however supported in all browsers by IE/Edge.\ndeclare global {\n  interface SVGElement {\n    readonly dataset: DOMStringMap;\n  }\n}\n\n// ----------------------------------------------------------------------------\n//                              Helper Functions\n// ----------------------------------------------------------------------------\n\nconst kAlphabet = new Alphabet(ALPHABET);\nconst kKeyboardOrder = new Alphabet(KEYBOARD_ORDER);\n\nfunction keyX(column: number): number {\n  return KEY_RADIUS + column * KEY_COL_SPACING;\n}\n\nfunction keyY(column: number): number {\n  const row = (column + 2) % 3;\n  return KEY_RADIUS + row * KEY_ROW_SPACING;\n}\n\n// Converts a keyboard x-offset to a numerical letter offset.\nfunction keyXOffsetToLetterOffset(dx: number): number {\n  return Math.round(dx / KEY_COL_SPACING);\n}\n\n// Permutes the integers mod n such that adjacent elements are far apart.\nfunction spread(i: number, n: number): number {\n  // The following multipliers were selected by hand.  n and mult must be\n  // relatively prime, and computing this for an arbitrary n is more work than\n  // I cared to figure out.\n  // https://en.wikipedia.org/wiki/Polygram_(geometry)\n  const table: {[n: number]: number} =\n      {5: 2, 7: 3, 8: 3, 9: 4, 10: 2, 11: 4, 12: 5, 13: 5, 26: 11};\n  const mult = table[n] || 1;\n  return (i * mult) % n;\n}\n\n// ----------------------------------------------------------------------------\n//                             Drawing Functions\n// ----------------------------------------------------------------------------\n\n// We keep all of the drawing functions separate so that we could eventually use\n// a static SVG image if desired.\nfunction drawEverything(svg: HTMLElement, spec: logic.Spec) {\n  const draw = SVG(svg);\n\n  // TODO make 1600x900 parameterized or dynamic or something\n  draw.size(1600, 900).viewbox(0, 0, 1600, 900);\n\n  const keyboardEnclosure =\n      draw.group().id('g-keyboard-enclosure').translate(KEYBOARD_X, DISPLAY_Y);\n  const display = drawKeyboardLike(keyboardEnclosure.group().id('g-display'));\n  const keyboard = drawKeyboardLike(keyboardEnclosure.group()\n                                        .id('g-keyboard')\n                                        .translate(0, KEYBOARD_Y - DISPLAY_Y));\n  const plugboard = drawPlugboard(keyboardEnclosure.group()\n                                      .id('g-plugboard')\n                                      .translate(0, PLUGBOARD_TOP - DISPLAY_Y));\n\n  const rotorEnclosure =\n      draw.group().id('g-rotor-enclosure').translate(ROTOR_CX, ROTOR_CY);\n  drawRotor(rotorEnclosure.group().id('g-rotor-r'),\n            REFLECTOR_RADIUS + 3 * ROTOR_WIDTH, spec);\n  drawRotor(rotorEnclosure.group().id('g-rotor-m'),\n            REFLECTOR_RADIUS + 2 * ROTOR_WIDTH, spec);\n  drawRotor(rotorEnclosure.group().id('g-rotor-l'),\n            REFLECTOR_RADIUS + 1 * ROTOR_WIDTH, spec);\n  drawReflector(rotorEnclosure.group().id('g-reflector'), REFLECTOR_RADIUS,\n                spec);\n  drawRotorFrame(rotorEnclosure.group().id('g-rotor-frame'), REFLECTOR_RADIUS,\n                 ROTOR_WIDTH);\n  drawRotorHotspots(rotorEnclosure.group().id('g-rotor-hotspots'),\n                    REFLECTOR_RADIUS, ROTOR_WIDTH);\n\n  const connectorEnclosure = draw.group().id('g-connectors');\n  drawDisplayKeyboardConnector(\n      connectorEnclosure.group().id('g-display-to-keyboard'), display.rbox(),\n      keyboard.rbox());\n  drawKeyboardPlugboardConnector(\n      connectorEnclosure.group().id('g-keyboard-to-plugboard'), keyboard.rbox(),\n      plugboard.rbox());\n  drawPlugboardRotorConnector(\n      connectorEnclosure.group().id('g-plugboard-to-rotor'), plugboard.rbox(),\n      {cx: ROTOR_CX, cy: ROTOR_CY, r: REFLECTOR_RADIUS + 3 * ROTOR_WIDTH});\n  connectorEnclosure.back();\n}\n\nfunction drawKeyboardLike(container: SVG.Container): SVG.Container {\n  const name = container.id();\n  container.addClass('keyboard-like');\n  kKeyboardOrder.each((letter, column) => {\n    const key = container.group()\n                    .center(keyX(column), keyY(column))\n                    .id(`${name}-key-${letter}`)\n                    .addClass('keyboard-key')\n                    .addClass(`letter-${letter}`);\n    key.circle(2 * KEY_RADIUS).center(0, 0);\n    key.plain(letter);\n  });\n  return container;\n}\n\nfunction drawPlugboard(container: SVG.Container): SVG.Container {\n  const name = container.id();\n  const height = PLUGBOARD_HEIGHT;\n  const width = KEY_RADIUS + kAlphabet.length * KEY_COL_SPACING;\n\n  const topBox = container.group().id(`${name}-top`);\n  const bottomBox = container.group().id(`${name}-bottom`);\n  const wires = container.group().id(`${name}-wires`);\n  kAlphabet.each((letter, column) => {\n    const x = keyX(column);\n    topBox.plain(letter).attr({x: x, y: PLUGBOARD_LETTER_HEIGHT / 2});\n    bottomBox.plain(letter).attr(\n        {x: x, y: height - PLUGBOARD_LETTER_HEIGHT / 2});\n    const wireGroup = wires.group().addClass(`color-${letter}`);\n    wireGroup.path()\n        .id(`${name}-${letter}`)\n        .addClass(`wire-${letter}`)\n        .addClass(`offset-0`)\n        .addClass('wire')\n        // We use a path here so that we can animate it via CSS. We also\n        // translate first so that the path can start at 0,0.\n        .translate(x, PLUGBOARD_LETTER_HEIGHT)\n        .plot(new SvgPathBuilder()\n                  .M(0, 0)\n                  .L(0, height - 2 * PLUGBOARD_LETTER_HEIGHT)\n                  .build());\n    wireGroup.rect(PLUGBOARD_HANDLE_WIDTH, PLUGBOARD_HANDLE_HEIGHT)\n        .id(`${name}-${letter}-drag-cipher`)\n        .attr({\n          x: x - PLUGBOARD_HANDLE_WIDTH / 2,\n          y: height - PLUGBOARD_LETTER_HEIGHT - PLUGBOARD_HANDLE_HEIGHT,\n        })\n        .addClass(`fill-color-${letter}`)\n        .addClass(`plugboard-hotspot`);\n  });\n\n  container.path().addClass('box').plot(\n      new SvgPathBuilder()\n          .M(0, 0)\n          .h(width)\n          .v(height)\n          .h(-width)\n          .z()\n          .m(0, PLUGBOARD_LETTER_HEIGHT)\n          .h(width)\n          .m(0, height - 2 * PLUGBOARD_LETTER_HEIGHT)\n          .h(-width)\n          .build());\n\n  return container;\n}\n\n// Draw the circles and the window, all of which does not rotate.\nfunction drawRotorFrame(container: SVG.Container, reflectorRadius: number,\n                        rotorWidth: number): SVG.Container {\n  const center = {cx: 0, cy: 0};\n  for (let i = 0; i <= 3; i++) {\n    const outer_radius = reflectorRadius + i * rotorWidth;\n    const ring_width = i === 0 ? REFLECTOR_RING_WIDTH : RING_WIDTH;\n    const inner_radius = outer_radius - ring_width;\n    container.circle(outer_radius * 2).attr(center).addClass('ring-line');\n    container.circle(inner_radius * 2).attr(center).addClass('ring-line');\n    if (i >= 1) {\n      const width = ring_width + WINDOW_THICKNESS;\n      container.rect(width, width)\n          .addClass('ring-window')\n          .radius(WINDOW_THICKNESS)\n          .cx(inner_radius + ring_width / 2)\n          .cy(0);\n    }\n  }\n  return container;\n}\n\n// Draw invisible hotspots for dragging the rotors.\nfunction drawRotorHotspots(container: SVG.Container, reflectorRadius: number,\n                           rotorWidth: number): SVG.Container {\n  function draw(idPrefix: string, outer_radius: number) {\n    container.path()\n        .id(`${idPrefix}-ring`)\n        .addClass('rotor-hotspot')\n        .plot(donut(outer_radius, RING_WIDTH));\n    container.path()\n        .id(`${idPrefix}-wires`)\n        .addClass('rotor-hotspot')\n        .plot(donut(outer_radius - RING_WIDTH, rotorWidth - RING_WIDTH));\n  }\n  draw('g-rotor-r-hotspot', reflectorRadius + 3 * rotorWidth);\n  draw('g-rotor-m-hotspot', reflectorRadius + 2 * rotorWidth);\n  draw('g-rotor-l-hotspot', reflectorRadius + 1 * rotorWidth);\n  return container;\n}\n\n// Draw the letters within the ring (but not the circles or the window, since\n// those don't rotate).\nfunction drawRingLetters(container: SVG.Container, outer_radius: number,\n                         ring_width: number): SVG.Container {\n  const name = container.id();\n  const inner_radius = outer_radius - ring_width;\n  kAlphabet.each((letter, i) => {\n    container.plain(letter)\n        .attr({x: inner_radius + ring_width / 2, y: 0})\n        .transform({cx: 0, cy: 0, rotation: i * 360 / kAlphabet.length})\n        .addClass('ring-letter')\n        .id(`${name}-letter-${letter}`);\n  });\n  return container;\n}\n\n// Draw the wires within a rotor.\nfunction drawRotorWires(container: SVG.Container, outer_radius: number,\n                        permutation: logic.Permutation): SVG.Container {\n  container.addClass('rotor-wires-instance');\n  const name = container.id();\n  const N = kAlphabet.length;\n  const r_outer = outer_radius - RING_WIDTH;\n  const r_inner = outer_radius - ROTOR_WIDTH;\n  const kGap = 0.05 * (ROTOR_WIDTH - RING_WIDTH);\n  const kBand = 0.9 * (ROTOR_WIDTH - RING_WIDTH);\n  permutation.eachPair((plain, cipher) => {\n    const i = kAlphabet.indexOf(plain);\n    const j = kAlphabet.indexOf(cipher);\n    const i_angle = 360 * i / N;\n    const j_angle = 360 * j / N;\n    const d = circularDistance(j - i, N);\n    const half_angle = 360 * 0.5 / N * Math.sign(d);\n    const r = r_outer - kGap - spread(i, N) * kBand / N;\n\n    const path = new SvgPathBuilder();\n    path.moveTo(fromPolar({deg: i_angle, r: r_outer}));\n    // Really we should use a cubic curve such that handle1 is orthogonal to\n    // the ring and handle2 is tangent to the ring at the second point.  This\n    // cubic satisfies the first property but is slightly off on the second,\n    // resulting in a very slight kink.\n    path.quadraticCurveTo(fromPolar({deg: i_angle, r: r}),\n                          fromPolar({deg: i_angle + half_angle, r: r}));\n    if (Math.abs(d) > 1) {\n      path.arcTo({r: r, sweep: d > 0},\n                 fromPolar({deg: j_angle - half_angle, r: r}));\n    }\n    path.quadraticCurveTo(fromPolar({deg: j_angle, r: r}),\n                          fromPolar({deg: j_angle, r: r_inner}));\n\n    container.path()\n        .addClass(`wire-${plain}`)\n        .addClass(`color-${plain}`)\n        .addClass('wire')\n        .plot(path.build());\n  });\n  return container;\n}\n\nfunction drawReflectorWires(container: SVG.Container, outer_radius: number,\n                            permutation: logic.Permutation): SVG.Container {\n  container.addClass('rotor-wires-instance');\n  const name = container.id();\n  const N = kAlphabet.length;\n  const radius = outer_radius - REFLECTOR_RING_WIDTH;\n  const handle = 0.6 * radius;\n  let color_index = 0;\n  permutation.eachPair((plain, cipher) => {\n    const i = kAlphabet.indexOf(plain);\n    const j = kAlphabet.indexOf(cipher);\n    if (i <= j) {\n      const color = kAlphabet.fromIndex(color_index);\n      const i_angle = 360 * i / N;\n      const j_angle = 360 * j / N;\n      const path = new SvgPathBuilder();\n      path.moveTo(fromPolar({deg: i_angle, r: radius}));\n      path.cubicCurveTo(fromPolar({deg: i_angle, r: handle}),\n                        fromPolar({deg: j_angle, r: handle}),\n                        fromPolar({deg: j_angle, r: radius}));\n      container.path()\n          .addClass(`wire-${plain}`)\n          .addClass(`wire-${cipher}`)\n          .addClass(`color-${color}`)\n          .addClass('wire')\n          .plot(path.build());\n      color_index += 2;\n    }\n  });\n  return container;\n}\n\nfunction drawRotor(container: SVG.Container, outer_radius: number,\n                   spec: logic.Spec): SVG.Container {\n  const name = container.id();\n  container.addClass('rotor');\n\n  const wires = container.group().id(`${name}-wires`).addClass('rotor-wires');\n  for (const rotor_name of Object.keys(spec.rotors)) {\n    const def = spec.rotors[rotor_name];\n    const perm = new logic.Permutation(def.permutation, kAlphabet);\n    drawRotorWires(wires.group().id(`${name}-wires-${rotor_name}`),\n                   outer_radius, perm);\n  }\n  // Draw a dot to show where the A wire is; used to indicate ring setting.\n  // This rotates with the wires.\n  wires.circle(A_DOT_RADIUS * 2).id(`${name}-dot`).addClass('ring-dot').attr({\n    cx: outer_radius - RING_WIDTH - A_DOT_RADIUS,\n    cy: 0,\n  });\n\n  // Draw the ring in a separate group so that it can be rotated separately when\n  // the ring setting is changed.\n  drawRingLetters(container.group().id(`${name}-ring`), outer_radius,\n                  RING_WIDTH);\n\n  return container;\n}\n\nfunction drawReflector(container: SVG.Container, outer_radius: number,\n                       spec: logic.Spec): SVG.Container {\n  const name = container.id();\n\n  const wires = container.group().id(`${name}-wires`);\n  for (const reflector_name of Object.keys(spec.reflectors)) {\n    const def = spec.reflectors[reflector_name];\n    const perm = new logic.Permutation(def, kAlphabet);\n    drawReflectorWires(wires.group().id(`${name}-wires-${reflector_name}`),\n                       outer_radius, perm);\n  }\n\n  // For consistency with drawRotor, we separate the ring, even though the ring\n  // of the reflector never rotates.\n  drawRingLetters(container.group().id(`${name}-ring`), outer_radius,\n                  REFLECTOR_RING_WIDTH);\n\n  return container;\n}\n\nfunction drawDisplayKeyboardConnector(container: SVG.Container,\n                                      display: SVG.Box,\n                                      keyboard: SVG.Box): SVG.Container {\n  const name = container.id();\n  kKeyboardOrder.each((letter, column) => {\n    const xOffset = keyX(column);\n    const yOffset = keyY(column);\n    container\n        .line(display.x + xOffset, display.y + yOffset,  // (line break)\n              keyboard.x + xOffset, keyboard.y + yOffset)\n        .addClass(`wire-${letter}`)\n        .addClass(`color-${letter}`)\n        .addClass('wire');\n  });\n  return container;\n}\n\nfunction drawKeyboardPlugboardConnector(container: SVG.Container,\n                                        keyboard: SVG.Box,\n                                        plugboard: SVG.Box): SVG.Container {\n  const name = container.id();\n  const yBreak = keyboard.y2;\n  const yDest = plugboard.y;\n  const yOffset = yDest - yBreak;\n  kKeyboardOrder.each((letter, column) => {\n    const xStart = keyboard.x + keyX(column);\n    const xDest = plugboard.x + keyX(kAlphabet.indexOf(letter));\n    const yStart = keyboard.y + keyY(column);\n    container.path()\n        .addClass(`wire-${letter}`)\n        .addClass(`color-${letter}`)\n        .addClass('wire')\n        .plot(new SvgPathBuilder()\n                  .M(xStart, yStart)\n                  .V(yBreak)\n                  .C(xStart, yBreak + yOffset / 3,  // (line break)\n                     xDest, yDest - yOffset / 3,    // (line break)\n                     xDest, yDest)\n                  .build());\n  });\n  return container;\n}\n\nfunction drawPlugboardRotorConnector(\n    container: SVG.Container, plugboard: SVG.Box,\n    rotor: {cx: number, cy: number, r: number}): SVG.Container {\n  const etw_top = {x: plugboard.x2 + ETW_X_OFFSET, y: plugboard.y2};\n  const etw_delta = ETW_HEIGHT / kAlphabet.length;\n  const N = kAlphabet.length;\n  const rotor_center = {x: rotor.cx, y: rotor.cy};\n  const r = rotor.r;\n  kAlphabet.each((letter, i) => {\n    const start = {x: plugboard.x + keyX(i), y: plugboard.y2};\n    const angle = 360 * i / N;\n    const end = addPoints(rotor_center, fromPolar({deg: angle, r: r}));\n    const end_in = addPoints(end, fromPolar({deg: angle, r: ROTOR_IN_LENGTH}));\n    const path = new SvgPathBuilder();\n    path.moveTo(start);\n    path.v(ETW_HEIGHT - i * etw_delta);\n    if (angle > 180) {\n      const offset = (N - 1 - i) * etw_delta;\n      path.H(etw_top.x + offset);\n      path.V(WIRE_TOP + offset);\n    }\n    path.H(end_in.x);\n    path.V(end_in.y);\n    path.lineTo(end);\n    container.path()\n        .addClass(`wire-${letter}`)\n        .addClass(`color-${letter}`)\n        .addClass('wire')\n        .plot(path.build());\n  });\n\n  return container;\n}\n\n// ----------------------------------------------------------------------------\n//                               EnigmaGraphics\n// ----------------------------------------------------------------------------\n\nexport class EnigmaGraphics implements logic.EnigmaOnUpdateCallback {\n  private readonly _svg: HTMLElement;\n  private readonly _spec: logic.Spec;\n  private _ring_locked: boolean;\n\n  constructor(id: string, spec: logic.Spec) {\n    this._svg = getElementByIdOrThrow(id);\n    this._spec = spec;\n    this._ring_locked = true;\n\n    // Draw the SVG.\n    drawEverything(this._svg, spec);\n\n    // Enable the default settings.\n    const rotor_order = spec.defaults.rotor_order.split('-');\n    this.onRotorChange('l', rotor_order[0]);\n    this.onRotorChange('m', rotor_order[1]);\n    this.onRotorChange('r', rotor_order[2]);\n    this.onReflectorChange(spec.defaults.reflector);\n\n    // Turn on animation after all drawing is finished.\n    this._enableAnimation();\n  }\n\n  private _enableAnimation() { this._svg.classList.add('animated'); }\n\n  private _disableAnimation() { this._svg.classList.remove('animated'); }\n\n  // Must be called exactly once!\n  public addEventListeners(enigma: logic.Enigma) {\n    kAlphabet.each((letter) => {\n      this.setupKeyboardClick(enigma, letter);\n      this.setupPlugboardDrag(enigma, letter);\n    });\n\n    this.setupRotorDrag(enigma, 'g-rotor-r', 2);\n    this.setupRotorDrag(enigma, 'g-rotor-m', 1);\n    this.setupRotorDrag(enigma, 'g-rotor-l', 0);\n\n    this.setupWindowKeyboardListener(enigma);\n  }\n\n  private setupKeyboardClick(enigma: logic.Enigma, letter: string) {\n    getElementByIdOrThrow(`g-keyboard-key-${letter}`)\n        .addEventListener('click',\n                          () => { enigma.stepAndEncryptSingle(letter); });\n  }\n\n  private setupPlugboardDrag(enigma: logic.Enigma, plain: string) {\n    const hotspot =\n        getSVGGraphicsElementByIdOrThrow(`g-plugboard-${plain}-drag-cipher`);\n    const plainIndex = kAlphabet.indexOf(plain);\n    const plainX = KEYBOARD_X + keyX(plainIndex);\n    const fakePlugboard = new logic.Plugboard(kAlphabet);\n    let origPlugboardSetting: string;\n    const computePlugboard = (state: DragState) => {\n      const dx = state.mouse.current.x - plainX;\n      const dy = state.mouse.current.y - state.target.start.y;\n      const offset = keyXOffsetToLetterOffset(dx);\n      const cipherIndex = plainIndex + offset;\n      if (Math.abs(dy) > PLUGBOARD_MAX_DRAG_Y_OFFSET || cipherIndex < 0 ||\n          cipherIndex >= kAlphabet.length) {\n        return null;\n      }\n      const cipher = kAlphabet.fromIndex(cipherIndex);\n      const out = new Array<string>();\n      if (plain !== cipher) {\n        out.push(plain + cipher);\n      }\n      for (const pair of origPlugboardSetting.toUpperCase().split(/\\s+/)) {\n        if (pair !== '' && pair.indexOf(plain) < 0 &&\n            pair.indexOf(cipher) < 0) {\n          out.push(pair);\n        }\n      }\n      // Normalize the plugboard setting.\n      for (let i = 0; i < out.length; i++) {\n        out[i] = out[i].split('').sort().join('');\n      }\n      out.sort();\n      return out.join(' ');\n    };\n    draggable({\n      element: hotspot,\n      onStart: () => {\n        // TODO Animate but make it much more responsive. Maybe add a class to\n        // this particular element to speed it up but have the other wires still\n        // go slow?\n        this._disableAnimation();\n        origPlugboardSetting = enigma.getPlugboard();\n      },\n      onMove: (state: DragState) => {\n        let newPlugboardSetting = computePlugboard(state);\n        if (newPlugboardSetting === null) {\n          newPlugboardSetting = origPlugboardSetting;\n        }\n        fakePlugboard.setTo(newPlugboardSetting);\n        this.onPlugboardChange(fakePlugboard.permutation, newPlugboardSetting);\n      },\n      onFinish: (state: DragState) => {\n        const newPlugboardSetting = computePlugboard(state);\n        if (newPlugboardSetting !== null) {\n          enigma.setPlugboard(newPlugboardSetting);\n        } else {\n          this.onPlugboardChange(enigma.getPlugboardPermutation(),\n                                 enigma.getPlugboard());\n        }\n        this._enableAnimation();\n      },\n    });\n  }\n\n  private setupRotorDrag(enigma: logic.Enigma, id: string, rotorIndex: number) {\n    const rotor = getSVGGraphicsElementByIdOrThrow(id);\n    const wires = getSVGGraphicsElementByIdOrThrow(`${id}-wires`);\n    const ring = getSVGGraphicsElementByIdOrThrow(`${id}-ring`);\n    const wireHotspot = getSVGGraphicsElementByIdOrThrow(`${id}-hotspot-wires`);\n    const ringHotspot = getSVGGraphicsElementByIdOrThrow(`${id}-hotspot-ring`);\n    // Explanation:\n    //   'locked' = Whole rotor rotates as a unit, only indicator changes.\n    //   'wires' = Only wires rotate, only ring setting changes.\n    //   'ring' = Only ring rotates, both indicator and ring setting change.\n    //            This is implemented by rotating the rotor and anti-rotating\n    //            the wires.\n    let mode: 'locked'|'wires'|'ring';\n    let rotorStartPosition = 0;\n    let wiresStartPosition = 0;\n    const setupHotspot = (element: SVGGraphicsElement) => {\n      draggable({\n        element: element,\n        onStart: () => {\n          this._disableAnimation();\n          mode = this._ring_locked ? 'locked' :\n                                     element === wireHotspot ? 'wires' : 'ring';\n          rotorStartPosition = this._rotorPosition(rotor);\n          wiresStartPosition = this._rotorPosition(wires);\n        },\n        onMove: (state: DragState) => {\n          const degrees = state.target.start.degreesTo(state.mouse.current) -\n              state.target.start.degreesTo(state.mouse.start);\n          // Negative since positive degrees means clockwise but we need\n          // positive to mean counter-clockwise.\n          const deltaPosition = -degrees / 360 * kAlphabet.length;\n          switch (mode) {\n            case 'locked':\n              this._rotateRotor(rotor, rotorStartPosition + deltaPosition,\n                                'counter-clockwise');\n              break;\n            case 'ring':\n              this._rotateRotor(rotor, rotorStartPosition + deltaPosition,\n                                'counter-clockwise');\n              this._rotateRotor(wires, wiresStartPosition + deltaPosition,\n                                'clockwise');\n              break;\n            case 'wires':\n              this._rotateRotor(wires, wiresStartPosition - deltaPosition,\n                                'clockwise');\n              break;\n            default:\n              throw new UnreachableCaseError(mode);\n          }\n        },\n        onFinish: (state: DragState) => {\n          const degrees = state.target.start.degreesTo(state.mouse.current) -\n              state.target.start.degreesTo(state.mouse.start);\n          function roundToLetter(position: number) {\n            return kAlphabet.fromIndex(\n                mod(Math.round(position), kAlphabet.length));\n          }\n          const deltaPosition = -degrees / 360 * kAlphabet.length;\n          this._enableAnimation();\n          switch (mode) {\n            case 'locked':\n              enigma.setIndicatorAtIndex(\n                  rotorIndex,\n                  roundToLetter(rotorStartPosition + deltaPosition));\n              break;\n            case 'ring':\n              enigma.setIndicatorAtIndex(\n                  rotorIndex,\n                  roundToLetter(rotorStartPosition + deltaPosition));\n              enigma.setRingSettingAtIndex(\n                  rotorIndex,\n                  roundToLetter(wiresStartPosition + deltaPosition));\n              break;\n            case 'wires':\n              enigma.setRingSettingAtIndex(\n                  rotorIndex,\n                  roundToLetter(wiresStartPosition - deltaPosition));\n              break;\n            default:\n              throw new UnreachableCaseError(mode);\n          }\n        },\n      });\n    };\n    setupHotspot(wireHotspot);\n    setupHotspot(ringHotspot);\n  }\n\n  private setupWindowKeyboardListener(enigma: logic.Enigma) {\n    document.addEventListener('keydown', (event) => {\n      // Ignore key presses on input boxes, or if CTRL or ALT is used (e.g.\n      // CTRL-F).\n      if (event.defaultPrevented || !event.target ||\n          (event.target as Element).nodeName === 'INPUT' ||\n          (event.target as Element).nodeName === 'TEXTAREA' ||\n          event.getModifierState('Control') || event.getModifierState('Alt') ||\n          event.getModifierState('Meta')) {\n        return;\n      }\n\n      if (enigma.isValidLetter(event.key)) {\n        enigma.stepAndEncryptSingle(event.key);\n      } else if (event.key === 'Backspace') {\n        // TODO Backup to previous position and key press. Probably need to keep\n        // a stack of previous history, which gets erased whenever the settings\n        // are changed manually.\n      }\n    }, true);\n  }\n\n  // --- EnigmaOnUpdateCallback ---\n\n  public onPlugboardChange(permutation: logic.Permutation, setting: string) {\n    this._clear();\n    // Note: the css 'd' property is Chrome-only as of March 2018. It might be\n    // good to add a non-animated fallback for other browsers.\n    permutation.eachPair((plain, cipher) => {\n      const offset = kAlphabet.indexOf(cipher) - kAlphabet.indexOf(plain);\n      setClassKeyValue(getElementByIdOrThrow(`g-plugboard-${plain}`), 'offset',\n                       '' + offset);\n    });\n  }\n\n  public onReflectorChange(selectedName: string) {\n    this._clear();\n    this._setWires(`g-reflector-wires`, Object.keys(this._spec.reflectors),\n                   selectedName);\n  }\n\n  public onRotorOrderChange(order: string) {}\n\n  public onRotorChange(position: logic.RotorPosition, selectedName: string) {\n    this._clear();\n    this._setWires(`g-rotor-${position}-wires`, Object.keys(this._spec.rotors),\n                   selectedName);\n    this._setNotches(`g-rotor-${position}-ring-letter`,\n                     this._spec.rotors[selectedName].notch);\n  }\n\n  private _setWires(idPrefix: string, allNames: string[],\n                    selectedName: string) {\n    let found = false;\n    for (const name of allNames) {\n      const el = getElementByIdOrThrow(`${idPrefix}-${name}`);\n      if (name === selectedName) {\n        // TODO It would be nice to raise the selected wire to the front. But\n        // sadly SVG does not have a z-index so we'd need to remove the element\n        // and re-add it to the end of its sibling list. And this won't raise it\n        // above any other container, such as the keyboard keys. Given this\n        // challenge, it's probably not worth fixing.\n        el.classList.add('selected');\n        found = true;\n      } else {\n        el.classList.remove('selected');\n      }\n    }\n    if (!found) {\n      console.error(`element ${name} not found in array ${allNames}`);\n    }\n  }\n\n  private _setNotches(idPrefix: string, notch: string) {\n    kAlphabet.each((letter) => {\n      const el = getElementByIdOrThrow(`${idPrefix}-${letter}`);\n      if (notch.indexOf(letter) >= 0) {\n        el.classList.add('notch');\n      } else {\n        el.classList.remove('notch');\n      }\n    });\n  }\n\n  public onRingSettingChange(value: string) {\n    console.assert(value.length === 3, 'expected length 3, got', value);\n    this._clear();\n    this._rotateRotor('g-rotor-l-wires', value[0], 'clockwise');\n    this._rotateRotor('g-rotor-m-wires', value[1], 'clockwise');\n    this._rotateRotor('g-rotor-r-wires', value[2], 'clockwise');\n  }\n\n  public onIndicatorChange(value: string) {\n    console.assert(value.length === 3, 'expected length 3, got', value);\n    this._clear();\n    this._rotateRotor('g-rotor-l', value[0], 'counter-clockwise');\n    this._rotateRotor('g-rotor-m', value[1], 'counter-clockwise');\n    this._rotateRotor('g-rotor-r', value[2], 'counter-clockwise');\n  }\n\n  public onRingLocked(value: boolean): void { this._ring_locked = value; }\n\n  private _rotateRotor(id_or_el: string|SVGElement, position: string|number,\n                       direction: 'clockwise'|'counter-clockwise') {\n    const el = (typeof id_or_el === 'string') ?\n        getSVGGraphicsElementByIdOrThrow(id_or_el) :\n        id_or_el;\n    position = (typeof position === 'string') ? kAlphabet.indexOf(position) :\n                                                mod(position, kAlphabet.length);\n    // If we just set the rotation directly, there would be a jarring jump from\n    // Z->A, spinning all the way backward. So instead we keep track of current\n    // rotation and keep going past 360 degrees as necessary to keep the\n    // animation smooth. We store the position as an index (0..25) as a data\n    // attribute so we can retrieve it next time.\n    const old_position = this._rotorPosition(el);\n    const delta = circularDistance(position - old_position, kAlphabet.length);\n    const new_position = old_position + delta;\n    const tick = (direction === 'clockwise' ? 1 : -1) * 360 / kAlphabet.length;\n    el.dataset.position = '' + new_position;\n    el.style.transform = `rotate(${tick * new_position}deg)`;\n  }\n\n  private _rotorPosition(el: SVGElement): number {\n    return +(el.dataset.position || 0);\n  }\n\n  public onEncrypt(values: logic.LastValueFullEnigma) {\n    function highlight(id: string, letter: string|logic.LastValueBidi,\n                       showOutput?: boolean) {\n      if (typeof letter === 'string') {\n        setClassKeyValue(getElementByIdOrThrow(id), 'selected-letter', letter);\n      } else if (showOutput) {\n        setClassKeyValue(getElementByIdOrThrow(id), 'selected-letter',\n                         [letter.forward.output, letter.inverse.input]);\n      } else {\n        setClassKeyValue(getElementByIdOrThrow(id), 'selected-letter',\n                         [letter.forward.input, letter.inverse.output]);\n      }\n    }\n    highlight('g-display', values.plugboard.inverse.output);\n    highlight('g-display-to-keyboard', values.plugboard.inverse.output);\n    highlight('g-keyboard', values.plugboard.forward.input);\n    highlight('g-keyboard-to-plugboard', values.plugboard);\n    highlight('g-plugboard', values.plugboard);\n    highlight('g-plugboard-to-rotor', values.plugboard, true);\n    highlight('g-rotor-r', values.rotors[2]);\n    highlight('g-rotor-m', values.rotors[1]);\n    highlight('g-rotor-l', values.rotors[0]);\n    highlight('g-reflector', values.reflector.input);\n  }\n\n  private _clear() {\n    function clear(id: string) {\n      clearClassKey(getElementByIdOrThrow(id), 'selected-letter');\n    }\n    clear('g-display');\n    clear('g-display-to-keyboard');\n    clear('g-keyboard');\n    clear('g-keyboard-to-plugboard');\n    clear('g-plugboard');\n    clear('g-plugboard-to-rotor');\n    clear('g-rotor-r');\n    clear('g-rotor-m');\n    clear('g-rotor-l');\n    clear('g-reflector');\n  }\n}\n\n// vim: set sw=2:\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","'use strict';\n\nexport class Point {\n  constructor(readonly x: number, readonly y: number) {}\n\n  // Returns the number of degrees to the given point.\n  public degreesTo(other: Point) {\n    const radians = Math.atan2(other.y - this.y, other.x - this.x);\n    return radians * 180 / Math.PI;\n  }\n}\n\nexport interface DragState {\n  // Note: all points are in SVG's global coordinate system.\n  mouse: {start: Point; current: Point;};\n  target: {\n    // start and current are for the center of element.\n    start: Point; current: Point; element: SVGGraphicsElement;\n  };\n}\n\nexport interface DragParams {\n  element: SVGGraphicsElement;\n  onStart?: (state: DragState) => void;\n  onMove?: (state: DragState) => void;\n  onFinish?: (state: DragState) => void;\n}\n\nexport function draggable(params: DragParams) {\n  let state: DragState|null = null;  // null if not currently dragging\n  const svg: SVGSVGElement =\n      params.element.ownerSVGElement || params.element as SVGSVGElement;\n\n  // Returns the center point of the element in the element's coordinate system.\n  const computeCenter = (element: SVGGraphicsElement) => {\n    const rect = element.getBoundingClientRect();\n    const cx = rect.left + rect.width / 2 + window.scrollX;\n    const cy = rect.top + rect.height / 2 + window.scrollY;\n    return new Point(cx, cy);\n  };\n\n  // Returns the point translated to param.element's coordinate system.\n  const translatePoint = (event: MouseEvent) => {\n    const point = svg.createSVGPoint();\n    point.x = event.clientX;\n    point.y = event.clientY;\n    const p = point.matrixTransform(svg.getScreenCTM()!.inverse());\n    return new Point(p.x, p.y);\n  };\n\n  const mouseDownHandler = (event: MouseEvent) => {\n    const center = computeCenter(params.element);\n    const mouse = translatePoint(event);\n    state = {\n      mouse: {\n        start: mouse,\n        current: mouse,\n      },\n      target: {\n        start: center,\n        current: center,\n        element: params.element,\n      },\n    };\n    if (params.onStart) {\n      params.onStart(state);\n    }\n    window.addEventListener('mousemove', mouseMoveHandler, false);\n  };\n\n  const mouseMoveHandler = (event: MouseEvent) => {\n    if (state === null) {\n      // Should we error out or do any cleanup?\n      return;\n    }\n    state.target.current = computeCenter(params.element);\n    state.mouse.current = translatePoint(event);\n    if (params.onMove) {\n      params.onMove(state);\n    }\n  };\n\n  const mouseUpHandler = (event: MouseEvent) => {\n    if (state === null) {\n      // Should we error out or do any cleanup?\n      return;\n    }\n    window.removeEventListener('mousemove', mouseMoveHandler, false);\n    state.target.current = computeCenter(params.element);\n    state.mouse.current = translatePoint(event);\n    if (params.onFinish) {\n      params.onFinish(state);\n    }\n    state = null;\n  };\n\n  window.addEventListener('mouseup', mouseUpHandler, false);\n  params.element.addEventListener('mousedown', mouseDownHandler, false);\n}\n","// Helper library for drawing SVG.\n\n'use strict';\n\ninterface XY {\n  x: number;\n  y: number;\n}\n\ninterface ArcOptionsRxRy {\n  rx: number;\n  ry: number;\n  rotation?: number;\n  largeArc?: boolean;\n  sweep?: boolean;\n}\n\ninterface ArcOptionsR {\n  r: number;\n  largeArc?: boolean;\n  sweep?: boolean;\n}\n\ntype ArcOptions = ArcOptionsRxRy|ArcOptionsR;\n\nfunction isArcOptionsR(o: ArcOptions): o is ArcOptionsR {\n  return 'r' in o;\n}\n\nexport function fromPolar({r, deg}: {r: number, deg: number}): XY {\n  const radians = deg * Math.PI / 180;\n  return {x: r * Math.cos(radians), y: r * Math.sin(radians)};\n}\n\nexport function addPoints(a: XY, b: XY) {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\n// Used to construct an SVG <path>'s `d` attribute.\n// TODO: break lines so as not to exceed 255 chars\n// TODO: round numbers to proper number of significant digits\nexport class SvgPathBuilder {\n  private elements: string[];\n\n  constructor() { this.elements = []; }\n\n  public build(): string { return this.elements.join(' '); }\n\n  public close() { return this.Z(); }\n  public moveTo(p: XY) { return this.M(p.x, p.y); }\n  public lineTo(p: XY) { return this.L(p.x, p.y); }\n  public quadraticCurveTo(c: XY, p: XY) { return this.Q(c.x, c.y, p.x, p.y); }\n  public cubicCurveTo(c1: XY, c2: XY, p: XY) {\n    return this.C(c1.x, c1.y, c2.x, c2.y, p.x, p.y);\n  }\n  public arcTo(o: ArcOptions, p: XY) {\n    if (isArcOptionsR(o)) {\n      return this.A(o.r, o.r, 0, o.largeArc || false, o.sweep || false, p.x,\n                    p.y);\n    } else {\n      return this.A(o.rx, o.ry, o.rotation || 0, o.largeArc || false,\n                    o.sweep || false, p.x, p.y);\n    }\n  }\n\n  public M(x: number, y: number) { return this.push(`M${x},${y}`); }\n  public m(dx: number, dy: number) { return this.push(`m${dx},${dy}`); }\n  public Z() { return this.push('Z'); }\n  public z() { return this.push('z'); }\n  public L(x: number, y: number) { return this.push(`L${x},${y}`); }\n  public l(dx: number, dy: number) { return this.push(`l${dx},${dy}`); }\n  public H(x: number) { return this.push(`H${x}`); }\n  public h(dx: number) { return this.push(`h${dx}`); }\n  public V(y: number) { return this.push(`V${y}`); }\n  public v(dy: number) { return this.push(`v${dy}`); }\n  public C(c1x: number, c1y: number, c2x: number, c2y: number, x: number,\n           y: number) {\n    return this.push(`C${c1x},${c1y},${c2x},${c2y},${x},${y}`);\n  }\n  public c(c1dx: number, c1dy: number, c2dx: number, c2dy: number, dx: number,\n           dy: number) {\n    return this.push(`c${c1dx},${c1dy},${c2dx},${c2dy},${dx},${dy}`);\n  }\n  public S(c2x: number, c2y: number, x: number, y: number) {\n    return this.push(`S${c2x},${c2y},${x},${y}`);\n  }\n  public s(c2dx: number, c2dy: number, dx: number, dy: number) {\n    return this.push(`s${c2dx},${c2dy},${dx},${dy}`);\n  }\n  public Q(cx: number, cy: number, x: number, y: number) {\n    return this.push(`Q${cx},${cy},${x},${y}`);\n  }\n  public q(cdx: number, cdy: number, dx: number, dy: number) {\n    return this.push(`q${cdx},${cdy},${dx},${dy}`);\n  }\n  public T(x: number, y: number) { return this.push(`T${x},${y}`); }\n  public t(dx: number, dy: number) { return this.push(`t${dx},${dy}`); }\n  public A(rx: number, ry: number, xAxisRotate: number,\n           largeArc: number|boolean, sweep: number|boolean, x: number,\n           y: number) {\n    const lAF = largeArc ? 1 : 0;\n    const sF = sweep ? 1 : 0;\n    return this.push(`A${rx},${ry},${xAxisRotate},${lAF},${sF},${x},${y}`);\n  }\n  public a(rdx: number, rdy: number, xAxisRotate: number,\n           largeArc: number|boolean, sweep: number|boolean, dx: number,\n           dy: number) {\n    const lAF = largeArc ? 1 : 0;\n    const sF = sweep ? 1 : 0;\n    return this.push(`a${rdx},${rdy},${xAxisRotate},${lAF},${sF},${dx},${dy}`);\n  }\n\n  private push(s: string) {\n    this.elements.push(s);\n    return this;\n  }\n}\n\n// Returns an SVG path 'd' attribute for a donut.\nexport function donut(outer_radius: number, width: number): string {\n  const inner_radius = outer_radius - width;\n  return new SvgPathBuilder()\n      .moveTo({x: 0, y: outer_radius})\n      .arcTo({r: outer_radius, largeArc: true, sweep: false},\n             {x: 0, y: -outer_radius})\n      .arcTo({r: outer_radius, largeArc: true, sweep: false},\n             {x: 0, y: outer_radius})\n      .close()\n      .moveTo({x: 0, y: inner_radius})\n      .arcTo({r: inner_radius, largeArc: true, sweep: true},\n             {x: 0, y: -inner_radius})\n      .arcTo({r: inner_radius, largeArc: true, sweep: true},\n             {x: 0, y: inner_radius})\n      .close()\n      .build();\n}\n"],"sourceRoot":""}